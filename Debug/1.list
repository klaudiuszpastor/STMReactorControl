
1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000365c  08009c68  08009c68  0000ac68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c4  0800d2c4  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c4  0800d2c4  0000e2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2cc  0800d2cc  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2cc  0800d2cc  0000e2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d2d4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2ac  200001d4  0800d4a8  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a480  0800d4a8  0000f480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c1d  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca7  00000000  00000000  00025e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00029ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb4  00000000  00000000  0002af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a49e  00000000  00000000  0002bf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cba0  00000000  00000000  000563a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79da  00000000  00000000  00072f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a91c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b0  00000000  00000000  0016a960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00170e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c4c 	.word	0x08009c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009c4c 	.word	0x08009c4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  return wire_init();
 8000e9c:	f000 feea 	bl	8001c74 <wire_init>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000eb2:	f000 ff01 	bl	8001cb8 <wire_reset>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <send_cmd+0x1a>
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e01e      	b.n	8000efe <send_cmd+0x58>

  if (!rom_code) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d103      	bne.n	8000ece <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000ec6:	20cc      	movs	r0, #204	@ 0xcc
 8000ec8:	f000 ff98 	bl	8001dfc <wire_write>
 8000ecc:	e012      	b.n	8000ef4 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000ece:	2055      	movs	r0, #85	@ 0x55
 8000ed0:	f000 ff94 	bl	8001dfc <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e009      	b.n	8000eee <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 ff8a 	bl	8001dfc <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddf2      	ble.n	8000eda <send_cmd+0x34>
  }
  wire_write(cmd);
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 ff80 	bl	8001dfc <wire_write>
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000f0e:	2144      	movs	r1, #68	@ 0x44
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffc8 	bl	8000ea6 <send_cmd>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000f2a:	21be      	movs	r1, #190	@ 0xbe
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffba 	bl	8000ea6 <send_cmd>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e01e      	b.n	8000f7a <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e009      	b.n	8000f56 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	18d4      	adds	r4, r2, r3
 8000f48:	f000 ff04 	bl	8001d54 <wire_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	ddf2      	ble.n	8000f42 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f000 ff9a 	bl	8001e98 <wire_crc>
 8000f64:	4603      	mov	r3, r0
 8000f66:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	7afa      	ldrb	r2, [r7, #11]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d101      	bne.n	8000f78 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e000      	b.n	8000f7a <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
	...

08000f84 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffc4 	bl	8000f20 <ds18b20_read_scratchpad>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <ds18b20_get_temp+0x20>
    return 85.0f;
 8000f9e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000fcc <ds18b20_get_temp+0x48>
 8000fa2:	e00b      	b.n	8000fbc <ds18b20_get_temp+0x38>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000fa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000fb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8000fbc:	eef0 7a47 	vmov.f32	s15, s14
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	42aa0000 	.word	0x42aa0000

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a2a      	ldr	r2, [pc, #168]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <MX_GPIO_Init+0xc4>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <MX_GPIO_Init+0xc4>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <MX_GPIO_Init+0xc4>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2120      	movs	r1, #32
 8001032:	4819      	ldr	r0, [pc, #100]	@ (8001098 <MX_GPIO_Init+0xc8>)
 8001034:	f001 fabc 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f640 0104 	movw	r1, #2052	@ 0x804
 800103e:	4817      	ldr	r0, [pc, #92]	@ (800109c <MX_GPIO_Init+0xcc>)
 8001040:	f001 fab6 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <MX_GPIO_Init+0xcc>)
 800104c:	f001 fab0 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS_Pin */
  GPIO_InitStruct.Pin = DS_Pin;
 8001050:	2320      	movs	r3, #32
 8001052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001054:	2311      	movs	r3, #17
 8001056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	480c      	ldr	r0, [pc, #48]	@ (8001098 <MX_GPIO_Init+0xc8>)
 8001068:	f001 f8e0 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800106c:	f641 0304 	movw	r3, #6148	@ 0x1804
 8001070:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_GPIO_Init+0xcc>)
 8001086:	f001 f8d1 	bl	800222c <HAL_GPIO_Init>

}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	48000800 	.word	0x48000800
 800109c:	48000400 	.word	0x48000400

080010a0 <hagl_hal_put_pixel>:
#include "hagl_hal.h"
#include "hagl.h"

void hagl_hal_put_pixel(void *self, int16_t x0, int16_t y0, hagl_color_t color) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	817b      	strh	r3, [r7, #10]
 80010ae:	4613      	mov	r3, r2
 80010b0:	813b      	strh	r3, [r7, #8]
    lcd_put_pixel(x0, y0, (uint16_t)color); // Cast if needed for compatibility
 80010b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010b6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	b292      	uxth	r2, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f946 	bl	8001350 <lcd_put_pixel>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <hagl_hal_init>:

void hagl_hal_init(hagl_surface_t *surface) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    surface->width = DISPLAY_WIDTH;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	22a0      	movs	r2, #160	@ 0xa0
 80010d8:	801a      	strh	r2, [r3, #0]
    surface->height = DISPLAY_HEIGHT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	805a      	strh	r2, [r3, #2]
    surface->depth = DISPLAY_DEPTH;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2210      	movs	r2, #16
 80010e4:	711a      	strb	r2, [r3, #4]

    surface->clip.x0 = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	80da      	strh	r2, [r3, #6]
    surface->clip.y0 = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	811a      	strh	r2, [r3, #8]
    surface->clip.x1 = DISPLAY_WIDTH - 1;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	229f      	movs	r2, #159	@ 0x9f
 80010f6:	815a      	strh	r2, [r3, #10]
    surface->clip.y1 = DISPLAY_HEIGHT - 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	227f      	movs	r2, #127	@ 0x7f
 80010fc:	819a      	strh	r2, [r3, #12]

    surface->put_pixel = hagl_hal_put_pixel;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <hagl_hal_init+0x68>)
 8001102:	611a      	str	r2, [r3, #16]
    surface->get_pixel = NULL;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
    surface->color = NULL;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
    surface->blit = NULL;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
    surface->scale_blit = NULL;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
    surface->hline = NULL;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
    surface->vline = NULL;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	080010a1 	.word	0x080010a1

08001138 <enter_critical_section>:
#include "interrupt.h".h"

uint32_t enter_critical_section(uint32_t priority) {
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001140:	f3ef 8311 	mrs	r3, BASEPRI
 8001144:	60fb      	str	r3, [r7, #12]
  return(result);
 8001146:	68fb      	ldr	r3, [r7, #12]
    uint32_t old_basepri = __get_BASEPRI();
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	f383 8811 	msr	BASEPRI, r3
}
 8001154:	bf00      	nop
    __set_BASEPRI(priority);
    return old_basepri;
 8001156:	697b      	ldr	r3, [r7, #20]
}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <exit_critical_section>:

void exit_critical_section(uint32_t old_basepri) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f383 8811 	msr	BASEPRI, r3
}
 8001176:	bf00      	nop
    __set_BASEPRI(old_basepri);
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <lcd_cmd>:
#define ST7735S_GAMCTRN1		0xe1
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_cmd(uint8_t cmd)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <lcd_cmd+0x44>)
 8001196:	f001 fa0b 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <lcd_cmd+0x44>)
 80011a2:	f001 fa05 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80011a6:	1df9      	adds	r1, r7, #7
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	2201      	movs	r2, #1
 80011ae:	4807      	ldr	r0, [pc, #28]	@ (80011cc <lcd_cmd+0x48>)
 80011b0:	f002 fdd9 	bl	8003d66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ba:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <lcd_cmd+0x44>)
 80011bc:	f001 f9f8 	bl	80025b0 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000400 	.word	0x48000400
 80011cc:	2000a1f0 	.word	0x2000a1f0

080011d0 <lcd_data>:

static void lcd_data(uint8_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <lcd_data+0x44>)
 80011e2:	f001 f9e5 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ec:	4809      	ldr	r0, [pc, #36]	@ (8001214 <lcd_data+0x44>)
 80011ee:	f001 f9df 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80011f2:	1df9      	adds	r1, r7, #7
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	2201      	movs	r2, #1
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <lcd_data+0x48>)
 80011fc:	f002 fdb3 	bl	8003d66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <lcd_data+0x44>)
 8001208:	f001 f9d2 	bl	80025b0 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	48000400 	.word	0x48000400
 8001218:	2000a1f0 	.word	0x2000a1f0

0800121c <lcd_send>:

static void lcd_send(uint16_t value)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <lcd_send+0x20>
		lcd_cmd(value);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffa5 	bl	8001184 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800123a:	e004      	b.n	8001246 <lcd_send+0x2a>
		lcd_data(value);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffc5 	bl	80011d0 <lcd_data>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <lcd_data16>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_data16(uint16_t value)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffb5 	bl	80011d0 <lcd_data>
	lcd_data(value);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffb0 	bl	80011d0 <lcd_data>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001286:	202a      	movs	r0, #42	@ 0x2a
 8001288:	f7ff ff7c 	bl	8001184 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b29b      	uxth	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffda 	bl	800124e <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffd1 	bl	800124e <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80012ac:	202b      	movs	r0, #43	@ 0x2b
 80012ae:	f7ff ff69 	bl	8001184 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3302      	adds	r3, #2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ffc7 	bl	800124e <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ffbc 	bl	800124e <lcd_data16>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <lcd_init>:

void lcd_init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	4817      	ldr	r0, [pc, #92]	@ (8001348 <lcd_init+0x68>)
 80012ec:	f001 f960 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	@ 0x64
 80012f2:	f000 fe91 	bl	8002018 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2104      	movs	r1, #4
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <lcd_init+0x68>)
 80012fc:	f001 f958 	bl	80025b0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	@ 0x64
 8001302:	f000 fe89 	bl	8002018 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <lcd_init+0x40>
    lcd_send(init_table[i]);
 800130c:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <lcd_init+0x6c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff81 	bl	800121c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b4b      	cmp	r3, #75	@ 0x4b
 8001324:	d9f2      	bls.n	800130c <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001326:	20c8      	movs	r0, #200	@ 0xc8
 8001328:	f000 fe76 	bl	8002018 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 800132c:	2011      	movs	r0, #17
 800132e:	f7ff ff29 	bl	8001184 <lcd_cmd>
  HAL_Delay(120);
 8001332:	2078      	movs	r0, #120	@ 0x78
 8001334:	f000 fe70 	bl	8002018 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001338:	2029      	movs	r0, #41	@ 0x29
 800133a:	f7ff ff23 	bl	8001184 <lcd_cmd>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	48000400 	.word	0x48000400
 800134c:	08009d10 	.word	0x08009d10

08001350 <lcd_put_pixel>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	4905      	ldr	r1, [pc, #20]	@ (8001384 <lcd_put_pixel+0x34>)
 8001370:	88fa      	ldrh	r2, [r7, #6]
 8001372:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200001f0 	.word	0x200001f0

08001388 <lcd_copy>:

void lcd_copy(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	22a0      	movs	r2, #160	@ 0xa0
 8001390:	2100      	movs	r1, #0
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff ff70 	bl	8001278 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001398:	202c      	movs	r0, #44	@ 0x2c
 800139a:	f7ff fef3 	bl	8001184 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <lcd_copy+0x50>)
 80013a6:	f001 f903 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <lcd_copy+0x50>)
 80013b2:	f001 f8fd 	bl	80025b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80013be:	4907      	ldr	r1, [pc, #28]	@ (80013dc <lcd_copy+0x54>)
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <lcd_copy+0x58>)
 80013c2:	f002 fcd0 	bl	8003d66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <lcd_copy+0x50>)
 80013ce:	f001 f8ef 	bl	80025b0 <HAL_GPIO_WritePin>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	48000400 	.word	0x48000400
 80013dc:	200001f0 	.word	0x200001f0
 80013e0:	2000a1f0 	.word	0x2000a1f0

080013e4 <hagl_fill_rectangle>:
 * @param y1
 * @param color
 */
static void inline
hagl_fill_rectangle(void const *surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	4608      	mov	r0, r1
 80013ee:	4611      	mov	r1, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	817b      	strh	r3, [r7, #10]
 80013f6:	460b      	mov	r3, r1
 80013f8:	813b      	strh	r3, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
    hagl_fill_rectangle_xyxy(surface, x0, y0, x1, y1, color);
 80013fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001402:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001406:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	4603      	mov	r3, r0
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f004 ff71 	bl	80062fe <hagl_fill_rectangle_xyxy>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d102      	bne.n	8001438 <__io_putchar+0x14>
    __io_putchar('\r');
 8001432:	200d      	movs	r0, #13
 8001434:	f7ff fff6 	bl	8001424 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	2201      	movs	r2, #1
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <__io_putchar+0x2c>)
 8001442:	f003 f9a7 	bl	8004794 <HAL_UART_Transmit>

  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000a2a4 	.word	0x2000a2a4

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b0a4      	sub	sp, #144	@ 0x90
 8001458:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f000 fd68 	bl	8001f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f903 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f7ff fdb5 	bl	8000fd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001466:	f000 fb79 	bl	8001b5c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800146a:	f000 fb21 	bl	8001ab0 <MX_TIM6_Init>
  MX_SPI2_Init();
 800146e:	f000 f953 	bl	8001718 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  if (ds18b20_init() != HAL_OK) {
 8001472:	f7ff fd11 	bl	8000e98 <ds18b20_init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <main+0x2c>
    Error_Handler();
 800147c:	f000 f946 	bl	800170c <Error_Handler>
  }

  const uint8_t ds1[] = { 0x28, 0x29, 0x35, 0x7, 0xD6, 0x1, 0x3C, 0xFF };
 8001480:	4a6e      	ldr	r2, [pc, #440]	@ (800163c <main+0x1e8>)
 8001482:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148a:	e883 0003 	stmia.w	r3, {r0, r1}
  const uint8_t ds2[] = { 0x28, 0xD3, 0xEA, 0x7, 0xD6, 0x1, 0x3C, 0x73 };
 800148e:	4a6c      	ldr	r2, [pc, #432]	@ (8001640 <main+0x1ec>)
 8001490:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001498:	e883 0003 	stmia.w	r3, {r0, r1}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 800149c:	f7ff ff20 	bl	80012e0 <lcd_init>
  hagl_surface_t surface;

  hagl_hal_init(&surface);
 80014a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe11 	bl	80010cc <hagl_hal_init>

  hagl_put_text(&surface, L"T1:", 10, 70, WHITE, font6x9);
 80014aa:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80014ae:	4b65      	ldr	r3, [pc, #404]	@ (8001644 <main+0x1f0>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2346      	movs	r3, #70	@ 0x46
 80014ba:	220a      	movs	r2, #10
 80014bc:	4962      	ldr	r1, [pc, #392]	@ (8001648 <main+0x1f4>)
 80014be:	f004 fc05 	bl	8005ccc <hagl_put_text>
  hagl_put_text(&surface, L"T2:", 10, 100, WHITE, font6x9);
 80014c2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80014c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001644 <main+0x1f0>)
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2364      	movs	r3, #100	@ 0x64
 80014d2:	220a      	movs	r2, #10
 80014d4:	495d      	ldr	r1, [pc, #372]	@ (800164c <main+0x1f8>)
 80014d6:	f004 fbf9 	bl	8005ccc <hagl_put_text>

  lcd_copy();
 80014da:	f7ff ff55 	bl	8001388 <lcd_copy>

  while (1)
  {
      wchar_t wbuffer[16];

      ds18b20_start_measure(ds1);
 80014de:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fd0f 	bl	8000f06 <ds18b20_start_measure>
      ds18b20_start_measure(ds2);
 80014e8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fd0a 	bl	8000f06 <ds18b20_start_measure>

      HAL_Delay(750);
 80014f2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80014f6:	f000 fd8f 	bl	8002018 <HAL_Delay>

      float temp1 = ds18b20_get_temp(ds1);
 80014fa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd40 	bl	8000f84 <ds18b20_get_temp>
 8001504:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
      float temp2 = ds18b20_get_temp(ds2);
 8001508:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fd39 	bl	8000f84 <ds18b20_get_temp>
 8001512:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80

      printf("Debug Temp1: %.1f, Temp2: %.1f\n", temp1, temp2);
 8001516:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800151a:	f7ff f815 	bl	8000548 <__aeabi_f2d>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
 8001522:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001526:	f7ff f80f 	bl	8000548 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	e9cd 2300 	strd	r2, r3, [sp]
 8001532:	4622      	mov	r2, r4
 8001534:	462b      	mov	r3, r5
 8001536:	4846      	ldr	r0, [pc, #280]	@ (8001650 <main+0x1fc>)
 8001538:	f005 fe58 	bl	80071ec <iprintf>

      hagl_fill_rectangle(&surface, 40, 70, 150, 85, rgb565(0, 0, 0));
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f004 ff91 	bl	8006468 <rgb565>
 8001546:	4603      	mov	r3, r0
 8001548:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2355      	movs	r3, #85	@ 0x55
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2396      	movs	r3, #150	@ 0x96
 8001554:	2246      	movs	r2, #70	@ 0x46
 8001556:	2128      	movs	r1, #40	@ 0x28
 8001558:	f7ff ff44 	bl	80013e4 <hagl_fill_rectangle>
      hagl_fill_rectangle(&surface, 40, 100, 150, 115, rgb565(0, 0, 0));
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f004 ff81 	bl	8006468 <rgb565>
 8001566:	4603      	mov	r3, r0
 8001568:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	2373      	movs	r3, #115	@ 0x73
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2396      	movs	r3, #150	@ 0x96
 8001574:	2264      	movs	r2, #100	@ 0x64
 8001576:	2128      	movs	r1, #40	@ 0x28
 8001578:	f7ff ff34 	bl	80013e4 <hagl_fill_rectangle>

      if (temp1 <= -80.0f) {
 800157c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001580:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001654 <main+0x200>
 8001584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d806      	bhi.n	800159c <main+0x148>
          swprintf(wbuffer, sizeof(wbuffer) / sizeof(wbuffer[0]), L"Error");
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4a31      	ldr	r2, [pc, #196]	@ (8001658 <main+0x204>)
 8001592:	2110      	movs	r1, #16
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fe7f 	bl	8007298 <swprintf>
 800159a:	e00c      	b.n	80015b6 <main+0x162>
      } else {
          swprintf(wbuffer, sizeof(wbuffer) / sizeof(wbuffer[0]), L"%.1f *C", temp1);
 800159c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80015a0:	f7fe ffd2 	bl	8000548 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	1d38      	adds	r0, r7, #4
 80015aa:	e9cd 2300 	strd	r2, r3, [sp]
 80015ae:	4a2b      	ldr	r2, [pc, #172]	@ (800165c <main+0x208>)
 80015b0:	2110      	movs	r1, #16
 80015b2:	f005 fe71 	bl	8007298 <swprintf>
      }
      printf("Buffer T1: %ls\n", wbuffer);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4829      	ldr	r0, [pc, #164]	@ (8001660 <main+0x20c>)
 80015bc:	f005 fe16 	bl	80071ec <iprintf>
      hagl_put_text(&surface, wbuffer, 40, 70, WHITE, font6x9);
 80015c0:	1d39      	adds	r1, r7, #4
 80015c2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <main+0x1f0>)
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2346      	movs	r3, #70	@ 0x46
 80015d2:	2228      	movs	r2, #40	@ 0x28
 80015d4:	f004 fb7a 	bl	8005ccc <hagl_put_text>

      if (temp2 <= -80.0f) {
 80015d8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80015dc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001654 <main+0x200>
 80015e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	d806      	bhi.n	80015f8 <main+0x1a4>
          swprintf(wbuffer, sizeof(wbuffer) / sizeof(wbuffer[0]), L"Error");
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001658 <main+0x204>)
 80015ee:	2110      	movs	r1, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fe51 	bl	8007298 <swprintf>
 80015f6:	e00c      	b.n	8001612 <main+0x1be>
      } else {
          swprintf(wbuffer, sizeof(wbuffer) / sizeof(wbuffer[0]), L"%.1f *C", temp2);
 80015f8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80015fc:	f7fe ffa4 	bl	8000548 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	1d38      	adds	r0, r7, #4
 8001606:	e9cd 2300 	strd	r2, r3, [sp]
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <main+0x208>)
 800160c:	2110      	movs	r1, #16
 800160e:	f005 fe43 	bl	8007298 <swprintf>
      }
      printf("Buffer T2: %ls\n", wbuffer);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4813      	ldr	r0, [pc, #76]	@ (8001664 <main+0x210>)
 8001618:	f005 fde8 	bl	80071ec <iprintf>
      hagl_put_text(&surface, wbuffer, 40, 100, WHITE, font6x9);
 800161c:	1d39      	adds	r1, r7, #4
 800161e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <main+0x1f0>)
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2364      	movs	r3, #100	@ 0x64
 800162e:	2228      	movs	r2, #40	@ 0x28
 8001630:	f004 fb4c 	bl	8005ccc <hagl_put_text>

      lcd_copy();
 8001634:	f7ff fea8 	bl	8001388 <lcd_copy>
  {
 8001638:	e751      	b.n	80014de <main+0x8a>
 800163a:	bf00      	nop
 800163c:	08009d00 	.word	0x08009d00
 8001640:	08009d08 	.word	0x08009d08
 8001644:	08009da8 	.word	0x08009da8
 8001648:	08009c68 	.word	0x08009c68
 800164c:	08009c78 	.word	0x08009c78
 8001650:	08009c88 	.word	0x08009c88
 8001654:	c2a00000 	.word	0xc2a00000
 8001658:	08009ca8 	.word	0x08009ca8
 800165c:	08009cc0 	.word	0x08009cc0
 8001660:	08009ce0 	.word	0x08009ce0
 8001664:	08009cf0 	.word	0x08009cf0

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b096      	sub	sp, #88	@ 0x58
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2244      	movs	r2, #68	@ 0x44
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f005 fe42 	bl	8007300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800168a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800168e:	f000 ffb5 	bl	80025fc <HAL_PWREx_ControlVoltageScaling>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001698:	f000 f838 	bl	800170c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800169c:	2310      	movs	r3, #16
 800169e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016a8:	2360      	movs	r3, #96	@ 0x60
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ac:	2302      	movs	r3, #2
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016b8:	2328      	movs	r3, #40	@ 0x28
 80016ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016bc:	2307      	movs	r3, #7
 80016be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 ffeb 	bl	80026a8 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016d8:	f000 f818 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2303      	movs	r3, #3
 80016e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	2104      	movs	r1, #4
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fbb3 	bl	8002e60 <HAL_RCC_ClockConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001700:	f000 f804 	bl	800170c <Error_Handler>
  }
}
 8001704:	bf00      	nop
 8001706:	3758      	adds	r7, #88	@ 0x58
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_SPI2_Init+0x74>)
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <MX_SPI2_Init+0x78>)
 8001720:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_SPI2_Init+0x74>)
 8001724:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001728:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_SPI2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_SPI2_Init+0x74>)
 8001732:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001736:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_SPI2_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <MX_SPI2_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_SPI2_Init+0x74>)
 8001746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800174a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_SPI2_Init+0x74>)
 800174e:	2210      	movs	r2, #16
 8001750:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_SPI2_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_SPI2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MX_SPI2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_SPI2_Init+0x74>)
 8001766:	2207      	movs	r2, #7
 8001768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <MX_SPI2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_SPI2_Init+0x74>)
 8001772:	2208      	movs	r2, #8
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_SPI2_Init+0x74>)
 8001778:	f002 fa52 	bl	8003c20 <HAL_SPI_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001782:	f7ff ffc3 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000a1f0 	.word	0x2000a1f0
 8001790:	40003800 	.word	0x40003800

08001794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a25      	ldr	r2, [pc, #148]	@ (8001848 <HAL_SPI_MspInit+0xb4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d144      	bne.n	8001840 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a24      	ldr	r2, [pc, #144]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a18      	ldr	r2, [pc, #96]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_SPI_MspInit+0xb8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fe:	2308      	movs	r3, #8
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180e:	2305      	movs	r3, #5
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	480d      	ldr	r0, [pc, #52]	@ (8001850 <HAL_SPI_MspInit+0xbc>)
 800181a:	f000 fd07 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001830:	2305      	movs	r3, #5
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	@ (8001854 <HAL_SPI_MspInit+0xc0>)
 800183c:	f000 fcf6 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	@ 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40003800 	.word	0x40003800
 800184c:	40021000 	.word	0x40021000
 8001850:	48000800 	.word	0x48000800
 8001854:	48000400 	.word	0x48000400

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_MspInit+0x44>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001862:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <HAL_MspInit+0x44>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6613      	str	r3, [r2, #96]	@ 0x60
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_MspInit+0x44>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_MspInit+0x44>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_MspInit+0x44>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001880:	6593      	str	r3, [r2, #88]	@ 0x58
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_MspInit+0x44>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <NMI_Handler+0x4>

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <MemManage_Handler+0x4>

080018b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 fb6f 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  return 1;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_kill>:

int _kill(int pid, int sig)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001918:	f005 fd54 	bl	80073c4 <__errno>
 800191c:	4603      	mov	r3, r0
 800191e:	2216      	movs	r2, #22
 8001920:	601a      	str	r2, [r3, #0]
  return -1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_exit>:

void _exit (int status)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001936:	f04f 31ff 	mov.w	r1, #4294967295
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffe7 	bl	800190e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <_exit+0x12>

08001944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e00a      	b.n	800196c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001956:	f3af 8000 	nop.w
 800195a:	4601      	mov	r1, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf0      	blt.n	8001956 <_read+0x12>
  }

  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e009      	b.n	80019a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd43 	bl	8001424 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbf1      	blt.n	8001990 <_write+0x12>
  }
  return len;
 80019ac:	687b      	ldr	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_close>:

int _close(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019de:	605a      	str	r2, [r3, #4]
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_isatty>:

int _isatty(int file)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f005 fcb8 	bl	80073c4 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20018000 	.word	0x20018000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	2000a254 	.word	0x2000a254
 8001a88:	2000a480 	.word	0x2000a480

08001a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001ac2:	4a15      	ldr	r2, [pc, #84]	@ (8001b18 <MX_TIM6_Init+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001ac8:	224f      	movs	r2, #79	@ 0x4f
 8001aca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001ae2:	f002 fc1b 	bl	800431c <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001aec:	f7ff fe0e 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_TIM6_Init+0x64>)
 8001afe:	f002 fd73 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b08:	f7ff fe00 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000a258 	.word	0x2000a258
 8001b18:	40001000 	.word	0x40001000

08001b1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_TIM_Base_MspInit+0x38>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d10b      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_TIM_Base_MspInit+0x3c>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <HAL_TIM_Base_MspInit+0x3c>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <HAL_TIM_Base_MspInit+0x3c>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40001000 	.word	0x40001000
 8001b58:	40021000 	.word	0x40021000

08001b5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b60:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <MX_USART2_UART_Init+0x5c>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	f002 fdaa 	bl	80046f8 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001baa:	f7ff fdaf 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000a2a4 	.word	0x2000a2a4
 8001bb8:	40004400 	.word	0x40004400

08001bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0ac      	sub	sp, #176	@ 0xb0
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2288      	movs	r2, #136	@ 0x88
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f005 fb8f 	bl	8007300 <memset>
  if(uartHandle->Instance==USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a21      	ldr	r2, [pc, #132]	@ (8001c6c <HAL_UART_MspInit+0xb0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d13b      	bne.n	8001c64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fb55 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c04:	f7ff fd82 	bl	800170c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_UART_MspInit+0xb4>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <HAL_UART_MspInit+0xb4>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_UART_MspInit+0xb4>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <HAL_UART_MspInit+0xb4>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c24:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <HAL_UART_MspInit+0xb4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_UART_MspInit+0xb4>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c50:	2307      	movs	r3, #7
 8001c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f000 fae4 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c64:	bf00      	nop
 8001c66:	37b0      	adds	r7, #176	@ 0xb0
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	40021000 	.word	0x40021000

08001c74 <wire_init>:
#include "gpio.h"
#include "tim.h"
#include "interrupt.h"

HAL_StatusTypeDef wire_init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <wire_init+0x10>)
 8001c7a:	f002 fba7 	bl	80043cc <HAL_TIM_Base_Start>
 8001c7e:	4603      	mov	r3, r0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000a258 	.word	0x2000a258

08001c88 <delay_us>:

static void delay_us(uint32_t us)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <delay_us+0x2c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8001c98:	bf00      	nop
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <delay_us+0x2c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d8f9      	bhi.n	8001c9a <delay_us+0x12>
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	2000a258 	.word	0x2000a258

08001cb8 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
	int rc;

	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <wire_reset+0x50>)
 8001cc4:	f000 fc74 	bl	80025b0 <HAL_GPIO_WritePin>
	delay_us(480);
 8001cc8:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001ccc:	f7ff ffdc 	bl	8001c88 <delay_us>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <wire_reset+0x50>)
 8001cd6:	f000 fc6b 	bl	80025b0 <HAL_GPIO_WritePin>
	delay_us(70);
 8001cda:	2046      	movs	r0, #70	@ 0x46
 8001cdc:	f7ff ffd4 	bl	8001c88 <delay_us>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4809      	ldr	r0, [pc, #36]	@ (8001d08 <wire_reset+0x50>)
 8001ce4:	f000 fc4c 	bl	8002580 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	607b      	str	r3, [r7, #4]
	delay_us(410);
 8001cec:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8001cf0:	f7ff ffca 	bl	8001c88 <delay_us>

	if (rc == 0)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <wire_reset+0x46>
		return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <wire_reset+0x48>
	else
		return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	48000800 	.word	0x48000800

08001d0c <read_bit>:

static int read_bit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int rc;
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2120      	movs	r1, #32
 8001d16:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <read_bit+0x44>)
 8001d18:	f000 fc4a 	bl	80025b0 <HAL_GPIO_WritePin>
	delay_us(6);
 8001d1c:	2006      	movs	r0, #6
 8001d1e:	f7ff ffb3 	bl	8001c88 <delay_us>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2120      	movs	r1, #32
 8001d26:	480a      	ldr	r0, [pc, #40]	@ (8001d50 <read_bit+0x44>)
 8001d28:	f000 fc42 	bl	80025b0 <HAL_GPIO_WritePin>
	delay_us(9);
 8001d2c:	2009      	movs	r0, #9
 8001d2e:	f7ff ffab 	bl	8001c88 <delay_us>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001d32:	2120      	movs	r1, #32
 8001d34:	4806      	ldr	r0, [pc, #24]	@ (8001d50 <read_bit+0x44>)
 8001d36:	f000 fc23 	bl	8002580 <HAL_GPIO_ReadPin>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	607b      	str	r3, [r7, #4]
	delay_us(55);
 8001d3e:	2037      	movs	r0, #55	@ 0x37
 8001d40:	f7ff ffa2 	bl	8001c88 <delay_us>

	return rc;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	48000800 	.word	0x48000800

08001d54 <wire_read>:

uint8_t wire_read(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
	int i;
	uint32_t old_basepri = enter_critical_section(0x20);
 8001d5e:	2020      	movs	r0, #32
 8001d60:	f7ff f9ea 	bl	8001138 <enter_critical_section>
 8001d64:	6078      	str	r0, [r7, #4]
	for (i = 0; i < 8; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	e00e      	b.n	8001d8a <wire_read+0x36>
		value >>= 1;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
		if (read_bit())
 8001d72:	f7ff ffcb 	bl	8001d0c <read_bit>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <wire_read+0x30>
			value |= 0x80;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d82:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++) {
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b07      	cmp	r3, #7
 8001d8e:	dded      	ble.n	8001d6c <wire_read+0x18>
  }
	exit_critical_section(old_basepri);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff f9e7 	bl	8001164 <exit_critical_section>
	return value;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <write_bit>:

static void write_bit(int value)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (value) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <write_bit+0x30>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2120      	movs	r1, #32
 8001db2:	4811      	ldr	r0, [pc, #68]	@ (8001df8 <write_bit+0x58>)
 8001db4:	f000 fbfc 	bl	80025b0 <HAL_GPIO_WritePin>
		delay_us(6);
 8001db8:	2006      	movs	r0, #6
 8001dba:	f7ff ff65 	bl	8001c88 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <write_bit+0x58>)
 8001dc4:	f000 fbf4 	bl	80025b0 <HAL_GPIO_WritePin>
		delay_us(64);
 8001dc8:	2040      	movs	r0, #64	@ 0x40
 8001dca:	f7ff ff5d 	bl	8001c88 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
		delay_us(60);
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
		delay_us(10);
  }
}
 8001dce:	e00f      	b.n	8001df0 <write_bit+0x50>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2120      	movs	r1, #32
 8001dd4:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <write_bit+0x58>)
 8001dd6:	f000 fbeb 	bl	80025b0 <HAL_GPIO_WritePin>
		delay_us(60);
 8001dda:	203c      	movs	r0, #60	@ 0x3c
 8001ddc:	f7ff ff54 	bl	8001c88 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2120      	movs	r1, #32
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <write_bit+0x58>)
 8001de6:	f000 fbe3 	bl	80025b0 <HAL_GPIO_WritePin>
		delay_us(10);
 8001dea:	200a      	movs	r0, #10
 8001dec:	f7ff ff4c 	bl	8001c88 <delay_us>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	48000800 	.word	0x48000800

08001dfc <wire_write>:

void wire_write(uint8_t byte)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	int i;
	uint32_t old_basepri = enter_critical_section(0x20);
 8001e06:	2020      	movs	r0, #32
 8001e08:	f7ff f996 	bl	8001138 <enter_critical_section>
 8001e0c:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < 8; i++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e00b      	b.n	8001e2c <wire_write+0x30>
		write_bit(byte & 0x01);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffc0 	bl	8001da0 <write_bit>
		byte >>= 1;
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++) {
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b07      	cmp	r3, #7
 8001e30:	ddf0      	ble.n	8001e14 <wire_write+0x18>
  }
	exit_critical_section(old_basepri);
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f7ff f996 	bl	8001164 <exit_critical_section>
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	460a      	mov	r2, r1
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71bb      	strb	r3, [r7, #6]
	int i;
	for (i = 0; i < 8; i++) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e016      	b.n	8001e84 <byte_crc+0x44>
		uint8_t b = crc ^ byte;
 8001e56:	79fa      	ldrb	r2, [r7, #7]
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	4053      	eors	r3, r2
 8001e5c:	72fb      	strb	r3, [r7, #11]
		crc >>= 1;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	71fb      	strb	r3, [r7, #7]
		if (b & 0x01)
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <byte_crc+0x38>
			crc ^= 0x8c;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001e74:	43db      	mvns	r3, r3
 8001e76:	71fb      	strb	r3, [r7, #7]
		byte >>= 1;
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i++) {
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b07      	cmp	r3, #7
 8001e88:	dde5      	ble.n	8001e56 <byte_crc+0x16>
  }
	return crc;
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t crc = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e00d      	b.n	8001ec8 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ffc1 	bl	8001e40 <byte_crc>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbed      	blt.n	8001eac <wire_crc+0x14>

    return crc;
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee0:	f7ff fdd4 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	@ (8001f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	@ (8001f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <LoopForever+0xe>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f28 <LoopForever+0x16>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f005 fa61 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0e:	f7ff faa1 	bl	8001454 <main>

08001f12 <LoopForever>:

LoopForever:
    b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f20:	0800d2d4 	.word	0x0800d2d4
  ldr r2, =_sbss
 8001f24:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f28:	2000a480 	.word	0x2000a480

08001f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_2_IRQHandler>

08001f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f000 f943 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3e:	200f      	movs	r0, #15
 8001f40:	f000 f80e 	bl	8001f60 <HAL_InitTick>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	e001      	b.n	8001f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f50:	f7ff fc82 	bl	8001858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f54:	79fb      	ldrb	r3, [r7, #7]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <HAL_InitTick+0x6c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_InitTick+0x70>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <HAL_InitTick+0x6c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f941 	bl	8002212 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d809      	bhi.n	8001fb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 f919 	bl	80021da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_InitTick+0x74>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e007      	b.n	8001fc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e004      	b.n	8001fc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e001      	b.n	8001fc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	2000a32c 	.word	0x2000a32c

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000a32c 	.word	0x2000a32c

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	@ (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	@ (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff47 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff5c 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffb0 	bl	8002180 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e17f      	b.n	800253c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8171 	beq.w	8002536 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d005      	beq.n	800226c <HAL_GPIO_Init+0x40>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0201 	and.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d118      	bne.n	800230c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80ac 	beq.w	8002536 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <HAL_GPIO_Init+0x330>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	4a5e      	ldr	r2, [pc, #376]	@ (800255c <HAL_GPIO_Init+0x330>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ea:	4b5c      	ldr	r3, [pc, #368]	@ (800255c <HAL_GPIO_Init+0x330>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002560 <HAL_GPIO_Init+0x334>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002420:	d025      	beq.n	800246e <HAL_GPIO_Init+0x242>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	@ (8002564 <HAL_GPIO_Init+0x338>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_GPIO_Init+0x23e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4e      	ldr	r2, [pc, #312]	@ (8002568 <HAL_GPIO_Init+0x33c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x23a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4d      	ldr	r2, [pc, #308]	@ (800256c <HAL_GPIO_Init+0x340>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x236>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4c      	ldr	r2, [pc, #304]	@ (8002570 <HAL_GPIO_Init+0x344>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x232>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4b      	ldr	r2, [pc, #300]	@ (8002574 <HAL_GPIO_Init+0x348>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x22e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4a      	ldr	r2, [pc, #296]	@ (8002578 <HAL_GPIO_Init+0x34c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x22a>
 8002452:	2306      	movs	r3, #6
 8002454:	e00c      	b.n	8002470 <HAL_GPIO_Init+0x244>
 8002456:	2307      	movs	r3, #7
 8002458:	e00a      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800245a:	2305      	movs	r3, #5
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x244>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x244>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x244>
 800246e:	2300      	movs	r3, #0
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002480:	4937      	ldr	r1, [pc, #220]	@ (8002560 <HAL_GPIO_Init+0x334>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248e:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <HAL_GPIO_Init+0x350>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024b2:	4a32      	ldr	r2, [pc, #200]	@ (800257c <HAL_GPIO_Init+0x350>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024b8:	4b30      	ldr	r3, [pc, #192]	@ (800257c <HAL_GPIO_Init+0x350>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024dc:	4a27      	ldr	r2, [pc, #156]	@ (800257c <HAL_GPIO_Init+0x350>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024e2:	4b26      	ldr	r3, [pc, #152]	@ (800257c <HAL_GPIO_Init+0x350>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002506:	4a1d      	ldr	r2, [pc, #116]	@ (800257c <HAL_GPIO_Init+0x350>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800250c:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <HAL_GPIO_Init+0x350>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002530:	4a12      	ldr	r2, [pc, #72]	@ (800257c <HAL_GPIO_Init+0x350>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	f47f ae78 	bne.w	800223c <HAL_GPIO_Init+0x10>
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	48000400 	.word	0x48000400
 8002568:	48000800 	.word	0x48000800
 800256c:	48000c00 	.word	0x48000c00
 8002570:	48001000 	.word	0x48001000
 8002574:	48001400 	.word	0x48001400
 8002578:	48001800 	.word	0x48001800
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e001      	b.n	80025a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800260a:	d130      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002618:	d038      	beq.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800262a:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2232      	movs	r2, #50	@ 0x32
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002640:	e002      	b.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002654:	d102      	bne.n	800265c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f2      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002668:	d110      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e00f      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267a:	d007      	beq.n	800268c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002684:	4a05      	ldr	r2, [pc, #20]	@ (800269c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800268a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40007000 	.word	0x40007000
 80026a0:	20000000 	.word	0x20000000
 80026a4:	431bde83 	.word	0x431bde83

080026a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e3ca      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4b97      	ldr	r3, [pc, #604]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	4b94      	ldr	r3, [pc, #592]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80e4 	beq.w	80028a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4a>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	f040 808b 	bne.w	8002800 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 8087 	bne.w	8002800 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026f2:	4b89      	ldr	r3, [pc, #548]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x62>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e3a2      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	4b82      	ldr	r3, [pc, #520]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_RCC_OscConfig+0x7c>
 800271a:	4b7f      	ldr	r3, [pc, #508]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002722:	e005      	b.n	8002730 <HAL_RCC_OscConfig+0x88>
 8002724:	4b7c      	ldr	r3, [pc, #496]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002730:	4293      	cmp	r3, r2
 8002732:	d223      	bcs.n	800277c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fd55 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e383      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002748:	4b73      	ldr	r3, [pc, #460]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a72      	ldr	r2, [pc, #456]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b70      	ldr	r3, [pc, #448]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	496d      	ldr	r1, [pc, #436]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002766:	4b6c      	ldr	r3, [pc, #432]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	4968      	ldr	r1, [pc, #416]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	e025      	b.n	80027c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277c:	4b66      	ldr	r3, [pc, #408]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a65      	ldr	r2, [pc, #404]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b63      	ldr	r3, [pc, #396]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4960      	ldr	r1, [pc, #384]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279a:	4b5f      	ldr	r3, [pc, #380]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	495b      	ldr	r1, [pc, #364]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd15 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e343      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c8:	f000 fc4a 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b52      	ldr	r3, [pc, #328]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	4950      	ldr	r1, [pc, #320]	@ (800291c <HAL_RCC_OscConfig+0x274>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002920 <HAL_RCC_OscConfig+0x278>)
 80027e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fbb7 	bl	8001f60 <HAL_InitTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d052      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	e327      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d032      	beq.n	800286e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002808:	4b43      	ldr	r3, [pc, #268]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a42      	ldr	r2, [pc, #264]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002814:	f7ff fbf4 	bl	8002000 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800281c:	f7ff fbf0 	bl	8002000 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e310      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282e:	4b3a      	ldr	r3, [pc, #232]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283a:	4b37      	ldr	r3, [pc, #220]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a36      	ldr	r2, [pc, #216]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002840:	f043 0308 	orr.w	r3, r3, #8
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4931      	ldr	r1, [pc, #196]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002858:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	492c      	ldr	r1, [pc, #176]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e01a      	b.n	80028a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800286e:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a29      	ldr	r2, [pc, #164]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800287a:	f7ff fbc1 	bl	8002000 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002882:	f7ff fbbd 	bl	8002000 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e2dd      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002894:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x1da>
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d074      	beq.n	800299a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x21a>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d10e      	bne.n	80028da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d064      	beq.n	8002998 <HAL_RCC_OscConfig+0x2f0>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d160      	bne.n	8002998 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e2ba      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x24a>
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e026      	b.n	8002940 <HAL_RCC_OscConfig+0x298>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028fa:	d115      	bne.n	8002928 <HAL_RCC_OscConfig+0x280>
 80028fc:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 8002902:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b03      	ldr	r3, [pc, #12]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a02      	ldr	r2, [pc, #8]	@ (8002918 <HAL_RCC_OscConfig+0x270>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x298>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	0800cd60 	.word	0x0800cd60
 8002920:	20000000 	.word	0x20000000
 8002924:	20000004 	.word	0x20000004
 8002928:	4ba0      	ldr	r3, [pc, #640]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a9f      	ldr	r2, [pc, #636]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b9d      	ldr	r3, [pc, #628]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a9c      	ldr	r2, [pc, #624]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff fb5a 	bl	8002000 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fb56 	bl	8002000 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e276      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002962:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x2a8>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fb46 	bl	8002000 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fb42 	bl	8002000 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e262      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x2d0>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d060      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x310>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d116      	bne.n	80029e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b8:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x328>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e23f      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	4973      	ldr	r1, [pc, #460]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e4:	e040      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d023      	beq.n	8002a36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ee:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff fb01 	bl	8002000 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff fafd 	bl	8002000 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e21d      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	4b65      	ldr	r3, [pc, #404]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b62      	ldr	r3, [pc, #392]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	495f      	ldr	r1, [pc, #380]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b5d      	ldr	r3, [pc, #372]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7ff fadd 	bl	8002000 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7ff fad9 	bl	8002000 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1f9      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a5c:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d03c      	beq.n	8002aee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a82:	4a4a      	ldr	r2, [pc, #296]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fab8 	bl	8002000 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff fab4 	bl	8002000 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1d4      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <HAL_RCC_OscConfig+0x3ec>
 8002ab4:	e01b      	b.n	8002aee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7ff fa9b 	bl	8002000 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff fa97 	bl	8002000 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1b7      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae0:	4b32      	ldr	r3, [pc, #200]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ef      	bne.n	8002ace <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80a6 	beq.w	8002c48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b00:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	4a26      	ldr	r2, [pc, #152]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b18:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b28:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d118      	bne.n	8002b66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b34:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7ff fa5e 	bl	8002000 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7ff fa5a 	bl	8002000 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e17a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_RCC_OscConfig+0x508>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d8>
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b74:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b7e:	e029      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x50c>
 8002b88:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	4a03      	ldr	r2, [pc, #12]	@ (8002bac <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x52c>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	4a9b      	ldr	r2, [pc, #620]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc4:	4b98      	ldr	r3, [pc, #608]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	4a97      	ldr	r2, [pc, #604]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7ff fa10 	bl	8002000 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7ff fa0c 	bl	8002000 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e12a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ed      	beq.n	8002be4 <HAL_RCC_OscConfig+0x53c>
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7ff f9f9 	bl	8002000 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7ff f9f5 	bl	8002000 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e113      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c28:	4b7f      	ldr	r3, [pc, #508]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ed      	bne.n	8002c12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	4a79      	ldr	r2, [pc, #484]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80fe 	beq.w	8002e4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 80d0 	bne.w	8002dfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c5c:	4b72      	ldr	r3, [pc, #456]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0203 	and.w	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d130      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d127      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11f      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c9c:	2a07      	cmp	r2, #7
 8002c9e:	bf14      	ite	ne
 8002ca0:	2201      	movne	r2, #1
 8002ca2:	2200      	moveq	r2, #0
 8002ca4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d113      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d06e      	beq.n	8002db0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	d069      	beq.n	8002dac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd8:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ce4:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0ad      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d00:	f7ff f97e 	bl	8002000 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7ff f97a 	bl	8002000 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e09a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1a:	4b43      	ldr	r3, [pc, #268]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d26:	4b40      	ldr	r3, [pc, #256]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b40      	ldr	r3, [pc, #256]	@ (8002e2c <HAL_RCC_OscConfig+0x784>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d36:	3a01      	subs	r2, #1
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d40:	0212      	lsls	r2, r2, #8
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d48:	0852      	lsrs	r2, r2, #1
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	0552      	lsls	r2, r2, #21
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d54:	0852      	lsrs	r2, r2, #1
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0652      	lsls	r2, r2, #25
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d60:	0912      	lsrs	r2, r2, #4
 8002d62:	0452      	lsls	r2, r2, #17
 8002d64:	430a      	orrs	r2, r1
 8002d66:	4930      	ldr	r1, [pc, #192]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d78:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d84:	f7ff f93c 	bl	8002000 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7ff f938 	bl	8002000 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e058      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9e:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002daa:	e050      	b.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04f      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d148      	bne.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd4:	f7ff f914 	bl	8002000 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7ff f910 	bl	8002000 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e030      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x734>
 8002dfa:	e028      	b.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d023      	beq.n	8002e4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <HAL_RCC_OscConfig+0x780>)
 8002e08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff f8f7 	bl	8002000 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	e00c      	b.n	8002e30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7ff f8f3 	bl	8002000 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d905      	bls.n	8002e30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e013      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_OscConfig+0x7b0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ec      	bne.n	8002e16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x7b0>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4905      	ldr	r1, [pc, #20]	@ (8002e58 <HAL_RCC_OscConfig+0x7b0>)
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_RCC_OscConfig+0x7b4>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
 8002e48:	e001      	b.n	8002e4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	feeefffc 	.word	0xfeeefffc

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0e7      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b75      	ldr	r3, [pc, #468]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b72      	ldr	r3, [pc, #456]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4970      	ldr	r1, [pc, #448]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b6e      	ldr	r3, [pc, #440]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0cf      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b66      	ldr	r3, [pc, #408]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b63      	ldr	r3, [pc, #396]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4960      	ldr	r1, [pc, #384]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d04c      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0a6      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efe:	4b54      	ldr	r3, [pc, #336]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d115      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e09a      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	4b4e      	ldr	r3, [pc, #312]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e08e      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e086      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b46      	ldr	r3, [pc, #280]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4943      	ldr	r1, [pc, #268]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7ff f85a 	bl	8002000 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7ff f856 	bl	8002000 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e06e      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b3a      	ldr	r3, [pc, #232]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d208      	bcs.n	8002fa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b2e      	ldr	r3, [pc, #184]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	492b      	ldr	r1, [pc, #172]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa6:	4b29      	ldr	r3, [pc, #164]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d210      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 0207 	bic.w	r2, r3, #7
 8002fbc:	4923      	ldr	r1, [pc, #140]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc4:	4b21      	ldr	r3, [pc, #132]	@ (800304c <HAL_RCC_ClockConfig+0x1ec>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e036      	b.n	8003044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4918      	ldr	r1, [pc, #96]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4910      	ldr	r1, [pc, #64]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003014:	f000 f824 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	490b      	ldr	r1, [pc, #44]	@ (8003054 <HAL_RCC_ClockConfig+0x1f4>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
 8003030:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1f8>)
 8003032:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x1fc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe ff91 	bl	8001f60 <HAL_InitTick>
 800303e:	4603      	mov	r3, r0
 8003040:	72fb      	strb	r3, [r7, #11]

  return status;
 8003042:	7afb      	ldrb	r3, [r7, #11]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40022000 	.word	0x40022000
 8003050:	40021000 	.word	0x40021000
 8003054:	0800cd60 	.word	0x0800cd60
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	@ 0x24
 8003064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306e:	4b3e      	ldr	r3, [pc, #248]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003078:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d121      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d11e      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003094:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030a0:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e005      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030bc:	4a2b      	ldr	r2, [pc, #172]	@ (800316c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d8:	4b25      	ldr	r3, [pc, #148]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x110>)
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e004      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030e4:	4b23      	ldr	r3, [pc, #140]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d134      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0xa6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0xac>
 8003104:	e005      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003106:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x110>)
 8003108:	617b      	str	r3, [r7, #20]
      break;
 800310a:	e005      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x114>)
 800310e:	617b      	str	r3, [r7, #20]
      break;
 8003110:	e002      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	617b      	str	r3, [r7, #20]
      break;
 8003116:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	3301      	adds	r3, #1
 8003124:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	fb03 f202 	mul.w	r2, r3, r2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313e:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0e5b      	lsrs	r3, r3, #25
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	3301      	adds	r3, #1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003158:	69bb      	ldr	r3, [r7, #24]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	@ 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	0800cd78 	.word	0x0800cd78
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	@ (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	@ (80031b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	0800cd70 	.word	0x0800cd70

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c0:	f7ff ffda 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0adb      	lsrs	r3, r3, #11
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	@ (80031e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	0800cd70 	.word	0x0800cd70

080031e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031f4:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003200:	f7ff f9ee 	bl	80025e0 <HAL_PWREx_GetVoltageRange>
 8003204:	6178      	str	r0, [r7, #20]
 8003206:	e014      	b.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b25      	ldr	r3, [pc, #148]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320c:	4a24      	ldr	r2, [pc, #144]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	@ 0x58
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003220:	f7ff f9de 	bl	80025e0 <HAL_PWREx_GetVoltageRange>
 8003224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	4a1d      	ldr	r2, [pc, #116]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d10b      	bne.n	8003252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b80      	cmp	r3, #128	@ 0x80
 800323e:	d919      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2ba0      	cmp	r3, #160	@ 0xa0
 8003244:	d902      	bls.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003246:	2302      	movs	r3, #2
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	e013      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800324c:	2301      	movs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e010      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b80      	cmp	r3, #128	@ 0x80
 8003256:	d902      	bls.n	800325e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003258:	2303      	movs	r3, #3
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	e00a      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	@ 0x80
 8003262:	d102      	bne.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003264:	2302      	movs	r3, #2
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e004      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b70      	cmp	r3, #112	@ 0x70
 800326e:	d101      	bne.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003270:	2301      	movs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0207 	bic.w	r2, r3, #7
 800327c:	4909      	ldr	r1, [pc, #36]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003284:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40022000 	.word	0x40022000

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d041      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032cc:	d02a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032d2:	d824      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032de:	d81e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e8:	d010      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ea:	e018      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ec:	4b86      	ldr	r3, [pc, #536]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a85      	ldr	r2, [pc, #532]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f8:	e015      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fabb 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330a:	e00c      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3320      	adds	r3, #32
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fba6 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	74fb      	strb	r3, [r7, #19]
      break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800333a:	4973      	ldr	r1, [pc, #460]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d041      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800335c:	d02a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800335e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003362:	d824      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800336a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800336e:	d81e      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003378:	d010      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800337a:	e018      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800337c:	4b62      	ldr	r3, [pc, #392]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a61      	ldr	r2, [pc, #388]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003386:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003388:	e015      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fa73 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339a:	e00c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3320      	adds	r3, #32
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fb5e 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ac:	e003      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	74fb      	strb	r3, [r7, #19]
      break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033bc:	4b52      	ldr	r3, [pc, #328]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ca:	494f      	ldr	r1, [pc, #316]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a0 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ea:	4b47      	ldr	r3, [pc, #284]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	4a40      	ldr	r2, [pc, #256]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	4b3e      	ldr	r3, [pc, #248]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b3b      	ldr	r3, [pc, #236]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3a      	ldr	r2, [pc, #232]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003428:	f7fe fdea 	bl	8002000 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342e:	e009      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fe fde6 	bl	8002000 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
        break;
 8003442:	e005      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003444:	4b31      	ldr	r3, [pc, #196]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d15c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003456:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01f      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	d019      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003474:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800347e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003480:	4b21      	ldr	r3, [pc, #132]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	4a20      	ldr	r2, [pc, #128]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003490:	4b1d      	ldr	r3, [pc, #116]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	4a1c      	ldr	r2, [pc, #112]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a0:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fda5 	bl	8002000 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	e00b      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe fda1 	bl	8002000 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d902      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	74fb      	strb	r3, [r7, #19]
            break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ec      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f6:	4904      	ldr	r1, [pc, #16]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003514:	7c7b      	ldrb	r3, [r7, #17]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4b9e      	ldr	r3, [pc, #632]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	4a9d      	ldr	r2, [pc, #628]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003532:	4b98      	ldr	r3, [pc, #608]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	4994      	ldr	r1, [pc, #592]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003554:	4b8f      	ldr	r3, [pc, #572]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	f023 020c 	bic.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003562:	498c      	ldr	r1, [pc, #560]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003576:	4b87      	ldr	r3, [pc, #540]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	4983      	ldr	r1, [pc, #524]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003598:	4b7e      	ldr	r3, [pc, #504]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	497b      	ldr	r1, [pc, #492]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ba:	4b76      	ldr	r3, [pc, #472]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c8:	4972      	ldr	r1, [pc, #456]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ea:	496a      	ldr	r1, [pc, #424]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b65      	ldr	r3, [pc, #404]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	4961      	ldr	r1, [pc, #388]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003620:	4b5c      	ldr	r3, [pc, #368]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	4959      	ldr	r1, [pc, #356]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003642:	4b54      	ldr	r3, [pc, #336]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003648:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003650:	4950      	ldr	r1, [pc, #320]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003672:	4948      	ldr	r1, [pc, #288]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003686:	4b43      	ldr	r3, [pc, #268]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	493f      	ldr	r1, [pc, #252]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d028      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036b6:	4937      	ldr	r1, [pc, #220]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b32      	ldr	r3, [pc, #200]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a31      	ldr	r2, [pc, #196]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e011      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036de:	d10c      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8c8 	bl	800387c <RCCEx_PLLSAI1_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003706:	4b23      	ldr	r3, [pc, #140]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	491f      	ldr	r1, [pc, #124]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003724:	d106      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003726:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003730:	60d3      	str	r3, [r2, #12]
 8003732:	e011      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f899 	bl	800387c <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02b      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003764:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003772:	4908      	ldr	r1, [pc, #32]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003782:	d109      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a02      	ldr	r2, [pc, #8]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800378e:	60d3      	str	r3, [r2, #12]
 8003790:	e014      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f867 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d6:	4928      	ldr	r1, [pc, #160]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f844 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3320      	adds	r3, #32
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f925 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003834:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003842:	490d      	ldr	r1, [pc, #52]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003856:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003866:	4904      	ldr	r1, [pc, #16]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800386e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000

0800387c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800388a:	4b75      	ldr	r3, [pc, #468]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003896:	4b72      	ldr	r3, [pc, #456]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
       ||
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
       ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d047      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e044      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d018      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x86>
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d825      	bhi.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d002      	beq.n	80038de <RCCEx_PLLSAI1_Config+0x62>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d009      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x74>
 80038dc:	e020      	b.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038de:	4b60      	ldr	r3, [pc, #384]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11d      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e01a      	b.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003900:	e013      	b.n	800392a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003902:	4b57      	ldr	r3, [pc, #348]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800390e:	4b54      	ldr	r3, [pc, #336]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800391e:	e006      	b.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e004      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003936:	4b4a      	ldr	r3, [pc, #296]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	430b      	orrs	r3, r1
 800394c:	4944      	ldr	r1, [pc, #272]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d17d      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003958:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a40      	ldr	r2, [pc, #256]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fe fb4c 	bl	8002000 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fe fb48 	bl	8002000 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
        break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003980:	4b37      	ldr	r3, [pc, #220]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ef      	bne.n	800396c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d160      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d111      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003998:	4b31      	ldr	r3, [pc, #196]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0912      	lsrs	r2, r2, #4
 80039b0:	0452      	lsls	r2, r2, #17
 80039b2:	430a      	orrs	r2, r1
 80039b4:	492a      	ldr	r1, [pc, #168]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	610b      	str	r3, [r1, #16]
 80039ba:	e027      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d112      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c2:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	0211      	lsls	r1, r2, #8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6912      	ldr	r2, [r2, #16]
 80039d8:	0852      	lsrs	r2, r2, #1
 80039da:	3a01      	subs	r2, #1
 80039dc:	0552      	lsls	r2, r2, #21
 80039de:	430a      	orrs	r2, r1
 80039e0:	491f      	ldr	r1, [pc, #124]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]
 80039e6:	e011      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6952      	ldr	r2, [r2, #20]
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0652      	lsls	r2, r2, #25
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4916      	ldr	r1, [pc, #88]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe faf2 	bl	8002000 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fe faee 	bl	8002000 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
          break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a34:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000

08003a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a72:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a7e:	4b67      	ldr	r3, [pc, #412]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
       ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a96:	4b61      	ldr	r3, [pc, #388]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d047      	beq.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e044      	b.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d018      	beq.n	8003aea <RCCEx_PLLSAI2_Config+0x86>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d825      	bhi.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d002      	beq.n	8003ac6 <RCCEx_PLLSAI2_Config+0x62>
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d009      	beq.n	8003ad8 <RCCEx_PLLSAI2_Config+0x74>
 8003ac4:	e020      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac6:	4b55      	ldr	r3, [pc, #340]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11d      	bne.n	8003b0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e01a      	b.n	8003b0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad8:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e013      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aea:	4b4c      	ldr	r3, [pc, #304]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af6:	4b49      	ldr	r3, [pc, #292]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b06:	e006      	b.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e004      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	430b      	orrs	r3, r1
 8003b34:	4939      	ldr	r1, [pc, #228]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d167      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b40:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fe fa58 	bl	8002000 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b54:	f7fe fa54 	bl	8002000 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
        break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b68:	4b2c      	ldr	r3, [pc, #176]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ef      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d14a      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b80:	4b26      	ldr	r3, [pc, #152]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	0912      	lsrs	r2, r2, #4
 8003b98:	0452      	lsls	r2, r2, #17
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	491f      	ldr	r1, [pc, #124]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	614b      	str	r3, [r1, #20]
 8003ba2:	e011      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6912      	ldr	r2, [r2, #16]
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0652      	lsls	r2, r2, #25
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	4916      	ldr	r1, [pc, #88]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc8:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fa14 	bl	8002000 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bda:	e009      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bdc:	f7fe fa10 	bl	8002000 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	73fb      	strb	r3, [r7, #15]
          break;
 8003bee:	e005      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	4904      	ldr	r1, [pc, #16]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e095      	b.n	8003d5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c42:	d009      	beq.n	8003c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
 8003c4a:	e005      	b.n	8003c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fd8e 	bl	8001794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c98:	d902      	bls.n	8003ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e002      	b.n	8003ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cae:	d007      	beq.n	8003cc0 <HAL_SPI_Init+0xa0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d02:	ea42 0103 	orr.w	r1, r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 0204 	and.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d3c:	ea42 0103 	orr.w	r1, r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b088      	sub	sp, #32
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d76:	f7fe f943 	bl	8002000 <HAL_GetTick>
 8003d7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e15c      	b.n	800404a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_SPI_Transmit+0x36>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e154      	b.n	800404a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_SPI_Transmit+0x48>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e14d      	b.n	800404a <HAL_SPI_Transmit+0x2e4>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e00:	d10f      	bne.n	8003e22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2c:	2b40      	cmp	r3, #64	@ 0x40
 8003e2e:	d007      	beq.n	8003e40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e48:	d952      	bls.n	8003ef0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_Transmit+0xf2>
 8003e52:	8b7b      	ldrh	r3, [r7, #26]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d145      	bne.n	8003ee4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e7c:	e032      	b.n	8003ee4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d112      	bne.n	8003eb2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eb0:	e018      	b.n	8003ee4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb2:	f7fe f8a5 	bl	8002000 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d803      	bhi.n	8003eca <HAL_SPI_Transmit+0x164>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d102      	bne.n	8003ed0 <HAL_SPI_Transmit+0x16a>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0b2      	b.n	800404a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1c7      	bne.n	8003e7e <HAL_SPI_Transmit+0x118>
 8003eee:	e083      	b.n	8003ff8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Transmit+0x198>
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d177      	bne.n	8003fee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d912      	bls.n	8003f2e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b02      	subs	r3, #2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f2c:	e05f      	b.n	8003fee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f54:	e04b      	b.n	8003fee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d12b      	bne.n	8003fbc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d912      	bls.n	8003f94 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b02      	subs	r3, #2
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f92:	e02c      	b.n	8003fee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fba:	e018      	b.n	8003fee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbc:	f7fe f820 	bl	8002000 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d803      	bhi.n	8003fd4 <HAL_SPI_Transmit+0x26e>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x274>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e02d      	b.n	800404a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ae      	bne.n	8003f56 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f947 	bl	8004290 <SPI_EndRxTxTransaction>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004048:	2300      	movs	r3, #0
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004064:	f7fd ffcc 	bl	8002000 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4413      	add	r3, r2
 8004072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004074:	f7fd ffc4 	bl	8002000 <HAL_GetTick>
 8004078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800407a:	4b39      	ldr	r3, [pc, #228]	@ (8004160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	015b      	lsls	r3, r3, #5
 8004080:	0d1b      	lsrs	r3, r3, #20
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408a:	e054      	b.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d050      	beq.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004094:	f7fd ffb4 	bl	8002000 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d902      	bls.n	80040aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d13d      	bne.n	8004126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c2:	d111      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040cc:	d004      	beq.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d6:	d107      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f0:	d10f      	bne.n	8004112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e017      	b.n	8004156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3b01      	subs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	429a      	cmp	r2, r3
 8004152:	d19b      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000000 	.word	0x20000000

08004164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004176:	f7fd ff43 	bl	8002000 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4413      	add	r3, r2
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004186:	f7fd ff3b 	bl	8002000 <HAL_GetTick>
 800418a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004194:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00da      	lsls	r2, r3, #3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	0d1b      	lsrs	r3, r3, #20
 80041a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80041ac:	e060      	b.n	8004270 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80041b4:	d107      	bne.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d050      	beq.n	8004270 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041ce:	f7fd ff17 	bl	8002000 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041da:	429a      	cmp	r2, r3
 80041dc:	d902      	bls.n	80041e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d13d      	bne.n	8004260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041fc:	d111      	bne.n	8004222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004206:	d004      	beq.n	8004212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004210:	d107      	bne.n	8004222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800422a:	d10f      	bne.n	800424c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800424a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e010      	b.n	8004282 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	3b01      	subs	r3, #1
 800426e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d196      	bne.n	80041ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3728      	adds	r7, #40	@ 0x28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000000 	.word	0x20000000

08004290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff5b 	bl	8004164 <SPI_WaitFifoStateUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e027      	b.n	8004314 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2200      	movs	r2, #0
 80042cc:	2180      	movs	r1, #128	@ 0x80
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff fec0 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e014      	b.n	8004314 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff ff34 	bl	8004164 <SPI_WaitFifoStateUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e000      	b.n	8004314 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e049      	b.n	80043c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd fbea 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 f89e 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d001      	beq.n	80043e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e047      	b.n	8004474 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <HAL_TIM_Base_Start+0xb4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01d      	beq.n	8004432 <HAL_TIM_Base_Start+0x66>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d018      	beq.n	8004432 <HAL_TIM_Base_Start+0x66>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1f      	ldr	r2, [pc, #124]	@ (8004484 <HAL_TIM_Base_Start+0xb8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIM_Base_Start+0x66>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1e      	ldr	r2, [pc, #120]	@ (8004488 <HAL_TIM_Base_Start+0xbc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIM_Base_Start+0x66>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <HAL_TIM_Base_Start+0xc0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIM_Base_Start+0x66>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <HAL_TIM_Base_Start+0xc4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIM_Base_Start+0x66>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a19      	ldr	r2, [pc, #100]	@ (8004494 <HAL_TIM_Base_Start+0xc8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d115      	bne.n	800445e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <HAL_TIM_Base_Start+0xcc>)
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d015      	beq.n	8004470 <HAL_TIM_Base_Start+0xa4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444a:	d011      	beq.n	8004470 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e008      	b.n	8004470 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e000      	b.n	8004472 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40013400 	.word	0x40013400
 8004494:	40014000 	.word	0x40014000
 8004498:	00010007 	.word	0x00010007

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a46      	ldr	r2, [pc, #280]	@ (80045c8 <TIM_Base_SetConfig+0x12c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ba:	d00f      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a43      	ldr	r2, [pc, #268]	@ (80045cc <TIM_Base_SetConfig+0x130>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00b      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a42      	ldr	r2, [pc, #264]	@ (80045d0 <TIM_Base_SetConfig+0x134>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a41      	ldr	r2, [pc, #260]	@ (80045d4 <TIM_Base_SetConfig+0x138>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a40      	ldr	r2, [pc, #256]	@ (80045d8 <TIM_Base_SetConfig+0x13c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a35      	ldr	r2, [pc, #212]	@ (80045c8 <TIM_Base_SetConfig+0x12c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fc:	d01b      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a32      	ldr	r2, [pc, #200]	@ (80045cc <TIM_Base_SetConfig+0x130>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d017      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a31      	ldr	r2, [pc, #196]	@ (80045d0 <TIM_Base_SetConfig+0x134>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a30      	ldr	r2, [pc, #192]	@ (80045d4 <TIM_Base_SetConfig+0x138>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2f      	ldr	r2, [pc, #188]	@ (80045d8 <TIM_Base_SetConfig+0x13c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2e      	ldr	r2, [pc, #184]	@ (80045dc <TIM_Base_SetConfig+0x140>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2d      	ldr	r2, [pc, #180]	@ (80045e0 <TIM_Base_SetConfig+0x144>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2c      	ldr	r2, [pc, #176]	@ (80045e4 <TIM_Base_SetConfig+0x148>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <TIM_Base_SetConfig+0x12c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00f      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <TIM_Base_SetConfig+0x13c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <TIM_Base_SetConfig+0x140>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <TIM_Base_SetConfig+0x144>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0xf8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a15      	ldr	r2, [pc, #84]	@ (80045e4 <TIM_Base_SetConfig+0x148>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	611a      	str	r2, [r3, #16]
  }
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e068      	b.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2e      	ldr	r2, [pc, #184]	@ (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800463a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	d018      	beq.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1a      	ldr	r2, [pc, #104]	@ (80046ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10c      	bne.n	80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40013400 	.word	0x40013400
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000

080046f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e040      	b.n	800478c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd fa4e 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	@ 0x24
 8004724:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fb6a 	bl	8004e18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8af 	bl	80048a8 <UART_SetConfig>
 800474a:	4603      	mov	r3, r0
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e01b      	b.n	800478c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fbe9 	bl	8004f5c <UART_CheckIdleState>
 800478a:	4603      	mov	r3, r0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	@ 0x28
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d177      	bne.n	800489c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_UART_Transmit+0x24>
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e070      	b.n	800489e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2221      	movs	r2, #33	@ 0x21
 80047c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ca:	f7fd fc19 	bl	8002000 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e8:	d108      	bne.n	80047fc <HAL_UART_Transmit+0x68>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e003      	b.n	8004804 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004804:	e02f      	b.n	8004866 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	2180      	movs	r1, #128	@ 0x80
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fc4b 	bl	80050ac <UART_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e03b      	b.n	800489e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	881a      	ldrh	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004838:	b292      	uxth	r2, r2
 800483a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	3302      	adds	r3, #2
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e007      	b.n	8004854 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1c9      	bne.n	8004806 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2140      	movs	r1, #64	@ 0x40
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fc15 	bl	80050ac <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e005      	b.n	800489e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ac:	b08a      	sub	sp, #40	@ 0x28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4ba4      	ldr	r3, [pc, #656]	@ (8004b68 <UART_SetConfig+0x2c0>)
 80048d8:	4013      	ands	r3, r2
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a99      	ldr	r2, [pc, #612]	@ (8004b6c <UART_SetConfig+0x2c4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004910:	4313      	orrs	r3, r2
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004924:	430a      	orrs	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a90      	ldr	r2, [pc, #576]	@ (8004b70 <UART_SetConfig+0x2c8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d126      	bne.n	8004980 <UART_SetConfig+0xd8>
 8004932:	4b90      	ldr	r3, [pc, #576]	@ (8004b74 <UART_SetConfig+0x2cc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b03      	cmp	r3, #3
 800493e:	d81b      	bhi.n	8004978 <UART_SetConfig+0xd0>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <UART_SetConfig+0xa0>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	08004959 	.word	0x08004959
 800494c:	08004969 	.word	0x08004969
 8004950:	08004961 	.word	0x08004961
 8004954:	08004971 	.word	0x08004971
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495e:	e116      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004960:	2302      	movs	r3, #2
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004966:	e112      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004968:	2304      	movs	r3, #4
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496e:	e10e      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004976:	e10a      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497e:	e106      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a7c      	ldr	r2, [pc, #496]	@ (8004b78 <UART_SetConfig+0x2d0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d138      	bne.n	80049fc <UART_SetConfig+0x154>
 800498a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b74 <UART_SetConfig+0x2cc>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b0c      	cmp	r3, #12
 8004996:	d82d      	bhi.n	80049f4 <UART_SetConfig+0x14c>
 8004998:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <UART_SetConfig+0xf8>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049d5 	.word	0x080049d5
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	080049f5 	.word	0x080049f5
 80049ac:	080049f5 	.word	0x080049f5
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	080049f5 	.word	0x080049f5
 80049b8:	080049f5 	.word	0x080049f5
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	080049f5 	.word	0x080049f5
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049ed 	.word	0x080049ed
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e0d8      	b.n	8004b8e <UART_SetConfig+0x2e6>
 80049dc:	2302      	movs	r3, #2
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e0d4      	b.n	8004b8e <UART_SetConfig+0x2e6>
 80049e4:	2304      	movs	r3, #4
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e0d0      	b.n	8004b8e <UART_SetConfig+0x2e6>
 80049ec:	2308      	movs	r3, #8
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e0cc      	b.n	8004b8e <UART_SetConfig+0x2e6>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e0c8      	b.n	8004b8e <UART_SetConfig+0x2e6>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5e      	ldr	r2, [pc, #376]	@ (8004b7c <UART_SetConfig+0x2d4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d125      	bne.n	8004a52 <UART_SetConfig+0x1aa>
 8004a06:	4b5b      	ldr	r3, [pc, #364]	@ (8004b74 <UART_SetConfig+0x2cc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a10:	2b30      	cmp	r3, #48	@ 0x30
 8004a12:	d016      	beq.n	8004a42 <UART_SetConfig+0x19a>
 8004a14:	2b30      	cmp	r3, #48	@ 0x30
 8004a16:	d818      	bhi.n	8004a4a <UART_SetConfig+0x1a2>
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d00a      	beq.n	8004a32 <UART_SetConfig+0x18a>
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d814      	bhi.n	8004a4a <UART_SetConfig+0x1a2>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <UART_SetConfig+0x182>
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d008      	beq.n	8004a3a <UART_SetConfig+0x192>
 8004a28:	e00f      	b.n	8004a4a <UART_SetConfig+0x1a2>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a30:	e0ad      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a32:	2302      	movs	r3, #2
 8004a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a38:	e0a9      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a40:	e0a5      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a42:	2308      	movs	r3, #8
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a48:	e0a1      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a50:	e09d      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a4a      	ldr	r2, [pc, #296]	@ (8004b80 <UART_SetConfig+0x2d8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d125      	bne.n	8004aa8 <UART_SetConfig+0x200>
 8004a5c:	4b45      	ldr	r3, [pc, #276]	@ (8004b74 <UART_SetConfig+0x2cc>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a68:	d016      	beq.n	8004a98 <UART_SetConfig+0x1f0>
 8004a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a6c:	d818      	bhi.n	8004aa0 <UART_SetConfig+0x1f8>
 8004a6e:	2b80      	cmp	r3, #128	@ 0x80
 8004a70:	d00a      	beq.n	8004a88 <UART_SetConfig+0x1e0>
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d814      	bhi.n	8004aa0 <UART_SetConfig+0x1f8>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <UART_SetConfig+0x1d8>
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d008      	beq.n	8004a90 <UART_SetConfig+0x1e8>
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x1f8>
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a86:	e082      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8e:	e07e      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a96:	e07a      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9e:	e076      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa6:	e072      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a35      	ldr	r2, [pc, #212]	@ (8004b84 <UART_SetConfig+0x2dc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d12a      	bne.n	8004b08 <UART_SetConfig+0x260>
 8004ab2:	4b30      	ldr	r3, [pc, #192]	@ (8004b74 <UART_SetConfig+0x2cc>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac0:	d01a      	beq.n	8004af8 <UART_SetConfig+0x250>
 8004ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac6:	d81b      	bhi.n	8004b00 <UART_SetConfig+0x258>
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004acc:	d00c      	beq.n	8004ae8 <UART_SetConfig+0x240>
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad2:	d815      	bhi.n	8004b00 <UART_SetConfig+0x258>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <UART_SetConfig+0x238>
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004adc:	d008      	beq.n	8004af0 <UART_SetConfig+0x248>
 8004ade:	e00f      	b.n	8004b00 <UART_SetConfig+0x258>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae6:	e052      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aee:	e04e      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af6:	e04a      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e046      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e042      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a17      	ldr	r2, [pc, #92]	@ (8004b6c <UART_SetConfig+0x2c4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d13a      	bne.n	8004b88 <UART_SetConfig+0x2e0>
 8004b12:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <UART_SetConfig+0x2cc>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b20:	d01a      	beq.n	8004b58 <UART_SetConfig+0x2b0>
 8004b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b26:	d81b      	bhi.n	8004b60 <UART_SetConfig+0x2b8>
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b2c:	d00c      	beq.n	8004b48 <UART_SetConfig+0x2a0>
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b32:	d815      	bhi.n	8004b60 <UART_SetConfig+0x2b8>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x298>
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3c:	d008      	beq.n	8004b50 <UART_SetConfig+0x2a8>
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x2b8>
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b46:	e022      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4e:	e01e      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b56:	e01a      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5e:	e016      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b66:	e012      	b.n	8004b8e <UART_SetConfig+0x2e6>
 8004b68:	efff69f3 	.word	0xefff69f3
 8004b6c:	40008000 	.word	0x40008000
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40004400 	.word	0x40004400
 8004b7c:	40004800 	.word	0x40004800
 8004b80:	40004c00 	.word	0x40004c00
 8004b84:	40005000 	.word	0x40005000
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a9f      	ldr	r2, [pc, #636]	@ (8004e10 <UART_SetConfig+0x568>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d17a      	bne.n	8004c8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d824      	bhi.n	8004bea <UART_SetConfig+0x342>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <UART_SetConfig+0x300>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004beb 	.word	0x08004beb
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004beb 	.word	0x08004beb
 8004bb8:	08004bdb 	.word	0x08004bdb
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004beb 	.word	0x08004beb
 8004bc8:	08004be3 	.word	0x08004be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe fae0 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	61f8      	str	r0, [r7, #28]
        break;
 8004bd2:	e010      	b.n	8004bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8004e14 <UART_SetConfig+0x56c>)
 8004bd6:	61fb      	str	r3, [r7, #28]
        break;
 8004bd8:	e00d      	b.n	8004bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bda:	f7fe fa41 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004bde:	61f8      	str	r0, [r7, #28]
        break;
 8004be0:	e009      	b.n	8004bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be6:	61fb      	str	r3, [r7, #28]
        break;
 8004be8:	e005      	b.n	8004bf6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80fb 	beq.w	8004df4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	4413      	add	r3, r2
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d305      	bcc.n	8004c1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d903      	bls.n	8004c22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c20:	e0e8      	b.n	8004df4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2200      	movs	r2, #0
 8004c26:	461c      	mov	r4, r3
 8004c28:	4615      	mov	r5, r2
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	022b      	lsls	r3, r5, #8
 8004c34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c38:	0222      	lsls	r2, r4, #8
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	6849      	ldr	r1, [r1, #4]
 8004c3e:	0849      	lsrs	r1, r1, #1
 8004c40:	2000      	movs	r0, #0
 8004c42:	4688      	mov	r8, r1
 8004c44:	4681      	mov	r9, r0
 8004c46:	eb12 0a08 	adds.w	sl, r2, r8
 8004c4a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	4659      	mov	r1, fp
 8004c60:	f7fb ffa2 	bl	8000ba8 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c72:	d308      	bcc.n	8004c86 <UART_SetConfig+0x3de>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c7a:	d204      	bcs.n	8004c86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	e0b6      	b.n	8004df4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c8c:	e0b2      	b.n	8004df4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c96:	d15e      	bne.n	8004d56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d828      	bhi.n	8004cf2 <UART_SetConfig+0x44a>
 8004ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <UART_SetConfig+0x400>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004ce3 	.word	0x08004ce3
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004cf3 	.word	0x08004cf3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fe fa60 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	61f8      	str	r0, [r7, #28]
        break;
 8004cd2:	e014      	b.n	8004cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7fe fa72 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8004cd8:	61f8      	str	r0, [r7, #28]
        break;
 8004cda:	e010      	b.n	8004cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004e14 <UART_SetConfig+0x56c>)
 8004cde:	61fb      	str	r3, [r7, #28]
        break;
 8004ce0:	e00d      	b.n	8004cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe f9bd 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004ce6:	61f8      	str	r0, [r7, #28]
        break;
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cee:	61fb      	str	r3, [r7, #28]
        break;
 8004cf0:	e005      	b.n	8004cfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d077      	beq.n	8004df4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	005a      	lsls	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	441a      	add	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b0f      	cmp	r3, #15
 8004d1e:	d916      	bls.n	8004d4e <UART_SetConfig+0x4a6>
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d26:	d212      	bcs.n	8004d4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f023 030f 	bic.w	r3, r3, #15
 8004d30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	8afb      	ldrh	r3, [r7, #22]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	8afa      	ldrh	r2, [r7, #22]
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	e052      	b.n	8004df4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d54:	e04e      	b.n	8004df4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d827      	bhi.n	8004dae <UART_SetConfig+0x506>
 8004d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <UART_SetConfig+0x4bc>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004d9f 	.word	0x08004d9f
 8004d78:	08004daf 	.word	0x08004daf
 8004d7c:	08004daf 	.word	0x08004daf
 8004d80:	08004daf 	.word	0x08004daf
 8004d84:	08004da7 	.word	0x08004da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe fa02 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
        break;
 8004d8e:	e014      	b.n	8004dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d90:	f7fe fa14 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8004d94:	61f8      	str	r0, [r7, #28]
        break;
 8004d96:	e010      	b.n	8004dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <UART_SetConfig+0x56c>)
 8004d9a:	61fb      	str	r3, [r7, #28]
        break;
 8004d9c:	e00d      	b.n	8004dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9e:	f7fe f95f 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004da2:	61f8      	str	r0, [r7, #28]
        break;
 8004da4:	e009      	b.n	8004dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004daa:	61fb      	str	r3, [r7, #28]
        break;
 8004dac:	e005      	b.n	8004dba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004db8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d019      	beq.n	8004df4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	085a      	lsrs	r2, r3, #1
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d909      	bls.n	8004dee <UART_SetConfig+0x546>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de0:	d205      	bcs.n	8004dee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e002      	b.n	8004df4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	@ 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0e:	bf00      	nop
 8004e10:	40008000 	.word	0x40008000
 8004e14:	00f42400 	.word	0x00f42400

08004e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01a      	beq.n	8004f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f16:	d10a      	bne.n	8004f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b098      	sub	sp, #96	@ 0x60
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f6c:	f7fd f848 	bl	8002000 <HAL_GetTick>
 8004f70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d12e      	bne.n	8004fde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f88c 	bl	80050ac <UART_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d021      	beq.n	8004fde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e062      	b.n	80050a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d149      	bne.n	8005080 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f856 	bl	80050ac <UART_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d03c      	beq.n	8005080 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	623b      	str	r3, [r7, #32]
   return(result);
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800501a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
 8005026:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800502a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	60fb      	str	r3, [r7, #12]
   return(result);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	617b      	str	r3, [r7, #20]
   return(result);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e011      	b.n	80050a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3758      	adds	r7, #88	@ 0x58
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050bc:	e04f      	b.n	800515e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d04b      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c6:	f7fc ff9b 	bl	8002000 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <UART_WaitOnFlagUntilTimeout+0x30>
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e04e      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d037      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0xb2>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b80      	cmp	r3, #128	@ 0x80
 80050f2:	d034      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0xb2>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d031      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b08      	cmp	r3, #8
 8005106:	d110      	bne.n	800512a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2208      	movs	r2, #8
 800510e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f838 	bl	8005186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2208      	movs	r2, #8
 800511a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e029      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005138:	d111      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f81e 	bl	8005186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e00f      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4013      	ands	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2300      	movne	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	429a      	cmp	r2, r3
 800517a:	d0a0      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005186:	b480      	push	{r7}
 8005188:	b095      	sub	sp, #84	@ 0x54
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800519c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d118      	bne.n	800522e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	60bb      	str	r3, [r7, #8]
   return(result);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	647b      	str	r3, [r7, #68]	@ 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6979      	ldr	r1, [r7, #20]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	613b      	str	r3, [r7, #16]
   return(result);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005242:	bf00      	nop
 8005244:	3754      	adds	r7, #84	@ 0x54
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <fontx_meta>:

#include "fontx.h"

uint8_t
fontx_meta(fontx_meta_t *meta, const uint8_t *font)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3306      	adds	r3, #6
 800525e:	2208      	movs	r2, #8
 8005260:	4619      	mov	r1, r3
 8005262:	f002 f8dc 	bl	800741e <memcpy>
    meta->width = font[FONTX_WIDTH];
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	330e      	adds	r3, #14
 800526a:	781a      	ldrb	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	330f      	adds	r3, #15
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	3310      	adds	r3, #16
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	72da      	strb	r2, [r3, #11]

    return 0;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <fontx_glyph>:


uint8_t
fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t *font)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b08e      	sub	sp, #56	@ 0x38
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800529a:	f107 0314 	add.w	r3, r7, #20
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ffd4 	bl	800524e <fontx_meta>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80052ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <fontx_glyph+0x2c>
        return status;
 80052b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052b8:	e077      	b.n	80053aa <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80052ba:	7f7a      	ldrb	r2, [r7, #29]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80052c0:	7fba      	ldrb	r2, [r7, #30]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80052c6:	7f7b      	ldrb	r3, [r7, #29]
 80052c8:	3307      	adds	r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	da00      	bge.n	80052d0 <fontx_glyph+0x42>
 80052ce:	3307      	adds	r3, #7
 80052d0:	10db      	asrs	r3, r3, #3
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	78da      	ldrb	r2, [r3, #3]
 80052dc:	7fbb      	ldrb	r3, [r7, #30]
 80052de:	fb12 f303 	smulbb	r3, r2, r3
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80052e8:	7ffb      	ldrb	r3, [r7, #31]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10f      	bne.n	800530e <fontx_glyph+0x80>
        if (code < 0x100) {
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2bff      	cmp	r3, #255	@ 0xff
 80052f2:	d859      	bhi.n	80053a8 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	789b      	ldrb	r3, [r3, #2]
 80052f8:	461a      	mov	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	3311      	adds	r3, #17
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e04d      	b.n	80053aa <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3312      	adds	r3, #18
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3311      	adds	r3, #17
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8005320:	e03d      	b.n	800539e <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	3301      	adds	r3, #1
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	4413      	add	r3, r2
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	3302      	adds	r3, #2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	3303      	adds	r3, #3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4413      	add	r3, r2
 8005346:	623b      	str	r3, [r7, #32]

            /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	429a      	cmp	r2, r3
 800534e:	d31c      	bcc.n	800538a <fontx_glyph+0xfc>
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	429a      	cmp	r2, r3
 8005356:	d818      	bhi.n	800538a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005360:	4413      	add	r3, r2
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
                // *INDENT-OFF*
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3311      	adds	r3, #17
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	461a      	mov	r2, r3
                    nc * glyph->size
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	789b      	ldrb	r3, [r3, #2]
 8005372:	4619      	mov	r1, r3
 8005374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005376:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800537a:	4413      	add	r3, r2
 800537c:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
                ];
                // *INDENT-ON*
                return FONTX_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e00f      	b.n	80053aa <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	4413      	add	r3, r2
 8005394:	3301      	adds	r3, #1
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	3304      	adds	r3, #4
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1bc      	bne.n	8005322 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80053a8:	2301      	movs	r3, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	3738      	adds	r7, #56	@ 0x38
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <put_pixel>:
#include <stdio.h>
#include "hagl_hal.h"

static void
put_pixel(void *_bitmap, int16_t x0, int16_t y0, hagl_color_t color)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b087      	sub	sp, #28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	817b      	strh	r3, [r7, #10]
 80053c0:	4613      	mov	r3, r2
 80053c2:	813b      	strh	r3, [r7, #8]
    hagl_bitmap_t *bitmap = _bitmap;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	617b      	str	r3, [r7, #20]

    hagl_color_t *ptr = (hagl_color_t *) (bitmap->buffer + bitmap->pitch * y0 + (bitmap->depth / 8) * x0);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053d0:	4619      	mov	r1, r3
 80053d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4619      	mov	r1, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	791b      	ldrb	r3, [r3, #4]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	4618      	mov	r0, r3
 80053e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053ea:	fb00 f303 	mul.w	r3, r0, r3
 80053ee:	440b      	add	r3, r1
 80053f0:	4413      	add	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    *ptr = color;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <get_pixel>:

static hagl_color_t
get_pixel(void *_bitmap, int16_t x0, int16_t y0)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	807b      	strh	r3, [r7, #2]
 8005412:	4613      	mov	r3, r2
 8005414:	803b      	strh	r3, [r7, #0]
    hagl_bitmap_t *bitmap = _bitmap;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
    return *(hagl_color_t *) (bitmap->buffer + bitmap->pitch * y0 + (bitmap->depth / 8) * x0);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005422:	4619      	mov	r1, r3
 8005424:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	4619      	mov	r1, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	08db      	lsrs	r3, r3, #3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	4618      	mov	r0, r3
 8005438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800543c:	fb00 f303 	mul.w	r3, r0, r3
 8005440:	440b      	add	r3, r1
 8005442:	4413      	add	r3, r2
 8005444:	681b      	ldr	r3, [r3, #0]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <hline>:

void
hline(void *_bitmap, int16_t x0, int16_t y0, uint16_t width, hagl_color_t color)
{
 8005452:	b480      	push	{r7}
 8005454:	b089      	sub	sp, #36	@ 0x24
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	461a      	mov	r2, r3
 8005460:	4603      	mov	r3, r0
 8005462:	817b      	strh	r3, [r7, #10]
 8005464:	460b      	mov	r3, r1
 8005466:	813b      	strh	r3, [r7, #8]
 8005468:	4613      	mov	r3, r2
 800546a:	80fb      	strh	r3, [r7, #6]
    hagl_bitmap_t *bitmap = _bitmap;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	617b      	str	r3, [r7, #20]

    hagl_color_t *ptr = (hagl_color_t *) (bitmap->buffer + bitmap->pitch * y0 + (bitmap->depth / 8) * x0);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005478:	4619      	mov	r1, r3
 800547a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4619      	mov	r1, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	791b      	ldrb	r3, [r3, #4]
 8005488:	08db      	lsrs	r3, r3, #3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	4618      	mov	r0, r3
 800548e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	440b      	add	r3, r1
 8005498:	4413      	add	r3, r2
 800549a:	61fb      	str	r3, [r7, #28]
    for (uint16_t x = 0; x < width; x++) {
 800549c:	2300      	movs	r3, #0
 800549e:	837b      	strh	r3, [r7, #26]
 80054a0:	e007      	b.n	80054b2 <hline+0x60>
        *ptr++ = color;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	1d1a      	adds	r2, r3, #4
 80054a6:	61fa      	str	r2, [r7, #28]
 80054a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054aa:	601a      	str	r2, [r3, #0]
    for (uint16_t x = 0; x < width; x++) {
 80054ac:	8b7b      	ldrh	r3, [r7, #26]
 80054ae:	3301      	adds	r3, #1
 80054b0:	837b      	strh	r3, [r7, #26]
 80054b2:	8b7a      	ldrh	r2, [r7, #26]
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3f3      	bcc.n	80054a2 <hline+0x50>
    }
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	3724      	adds	r7, #36	@ 0x24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <vline>:

void
vline(void *_bitmap, int16_t x0, int16_t y0, uint16_t height, hagl_color_t color)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	@ 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	460b      	mov	r3, r1
 80054dc:	813b      	strh	r3, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
    hagl_bitmap_t *bitmap = _bitmap;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	617b      	str	r3, [r7, #20]

    hagl_color_t *ptr = (hagl_color_t *) (bitmap->buffer + bitmap->pitch * y0 + (bitmap->depth / 8) * x0);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ee:	4619      	mov	r1, r3
 80054f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4619      	mov	r1, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	791b      	ldrb	r3, [r3, #4]
 80054fe:	08db      	lsrs	r3, r3, #3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	4618      	mov	r0, r3
 8005504:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005508:	fb00 f303 	mul.w	r3, r0, r3
 800550c:	440b      	add	r3, r1
 800550e:	4413      	add	r3, r2
 8005510:	61fb      	str	r3, [r7, #28]
    for (uint16_t y = 0; y < height; y++) {
 8005512:	2300      	movs	r3, #0
 8005514:	837b      	strh	r3, [r7, #26]
 8005516:	e012      	b.n	800553e <vline+0x76>
        *ptr = color;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800551c:	601a      	str	r2, [r3, #0]
        ptr += bitmap->pitch / (bitmap->depth / 8);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005522:	461a      	mov	r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	791b      	ldrb	r3, [r3, #4]
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
    for (uint16_t y = 0; y < height; y++) {
 8005538:	8b7b      	ldrh	r3, [r7, #26]
 800553a:	3301      	adds	r3, #1
 800553c:	837b      	strh	r3, [r7, #26]
 800553e:	8b7a      	ldrh	r2, [r7, #26]
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3e8      	bcc.n	8005518 <vline+0x50>
    }
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	3724      	adds	r7, #36	@ 0x24
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <blit>:
 * Blit source bitmap to a destination bitmap->
 */

static void
blit(void *_dst, int16_t x0, int16_t y0, void *_src)
{
 8005554:	b480      	push	{r7}
 8005556:	b08f      	sub	sp, #60	@ 0x3c
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	817b      	strh	r3, [r7, #10]
 8005562:	4613      	mov	r3, r2
 8005564:	813b      	strh	r3, [r7, #8]
    hagl_bitmap_t *dst = _dst;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	61fb      	str	r3, [r7, #28]
    hagl_bitmap_t *src = _src;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	61bb      	str	r3, [r7, #24]

    int16_t srcw = src->width;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	86fb      	strh	r3, [r7, #54]	@ 0x36
    int16_t srch = src->height;
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	885b      	ldrh	r3, [r3, #2]
 8005578:	86bb      	strh	r3, [r7, #52]	@ 0x34
    int16_t x1 = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	867b      	strh	r3, [r7, #50]	@ 0x32
    int16_t y1 = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	863b      	strh	r3, [r7, #48]	@ 0x30

    /* x0 or y0 is over the edge, nothing to do. */
    if ((x0 > dst->width) || (y0 > dst->height))  {
 8005582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	8812      	ldrh	r2, [r2, #0]
 800558a:	4293      	cmp	r3, r2
 800558c:	f300 80c0 	bgt.w	8005710 <blit+0x1bc>
 8005590:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	8852      	ldrh	r2, [r2, #2]
 8005598:	4293      	cmp	r3, r2
 800559a:	f300 80b9 	bgt.w	8005710 <blit+0x1bc>
        return;
    }

    /* x0 is negative, ignore parts outside of screen. */
    if (x0 < 0) {
 800559e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da0d      	bge.n	80055c2 <blit+0x6e>
        srcw = srcw + x0;
 80055a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80055a8:	897b      	ldrh	r3, [r7, #10]
 80055aa:	4413      	add	r3, r2
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        x1 = abs(x0);
 80055b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bfb8      	it	lt
 80055b8:	425b      	neglt	r3, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	867b      	strh	r3, [r7, #50]	@ 0x32
        x0 = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	817b      	strh	r3, [r7, #10]
    }

    /* y0 is negative, ignore parts outside of screen. */
    if (y0 < 0) {
 80055c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da0d      	bge.n	80055e6 <blit+0x92>
        srch = srch + y0;
 80055ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	4413      	add	r3, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	86bb      	strh	r3, [r7, #52]	@ 0x34
        y1 = abs(y0);
 80055d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfb8      	it	lt
 80055dc:	425b      	neglt	r3, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	863b      	strh	r3, [r7, #48]	@ 0x30
        y0 = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	813b      	strh	r3, [r7, #8]
    }

    /* Ignore everything going over right edge. */
    if (srcw > dst->width - x0) {
 80055e6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055f4:	1acb      	subs	r3, r1, r3
 80055f6:	429a      	cmp	r2, r3
 80055f8:	dd05      	ble.n	8005606 <blit+0xb2>
        srcw = dst->width - x0;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	897b      	ldrh	r3, [r7, #10]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	b29b      	uxth	r3, r3
 8005604:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    /* Ignore everything going over bottom edge. */
    if (srch > dst->height - y0) {
 8005606:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	885b      	ldrh	r3, [r3, #2]
 800560e:	4619      	mov	r1, r3
 8005610:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005614:	1acb      	subs	r3, r1, r3
 8005616:	429a      	cmp	r2, r3
 8005618:	dd05      	ble.n	8005626 <blit+0xd2>
        srch = dst->height - y0;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	885a      	ldrh	r2, [r3, #2]
 800561e:	893b      	ldrh	r3, [r7, #8]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	b29b      	uxth	r3, r3
 8005624:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }

    /* Everthing outside viewport, nothing to do. */
    if ((srcw < 0 ) || (srch < 0))  {
 8005626:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800562a:	2b00      	cmp	r3, #0
 800562c:	db72      	blt.n	8005714 <blit+0x1c0>
 800562e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8005632:	2b00      	cmp	r3, #0
 8005634:	db6e      	blt.n	8005714 <blit+0x1c0>
        return;
    }

    uint8_t *dstptr = (uint8_t *) (dst->buffer + (dst->pitch * y0) + ((dst->depth / 8) * x0));
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800563e:	4619      	mov	r1, r3
 8005640:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	4619      	mov	r1, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	791b      	ldrb	r3, [r3, #4]
 800564e:	08db      	lsrs	r3, r3, #3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	4618      	mov	r0, r3
 8005654:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005658:	fb00 f303 	mul.w	r3, r0, r3
 800565c:	440b      	add	r3, r1
 800565e:	4413      	add	r3, r2
 8005660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *srcptr = (uint8_t *) (src->buffer + (src->pitch * y1) + ((dst->depth / 8) * x1));
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800566a:	4619      	mov	r1, r3
 800566c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	4619      	mov	r1, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	08db      	lsrs	r3, r3, #3
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4618      	mov	r0, r3
 8005680:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005684:	fb00 f303 	mul.w	r3, r0, r3
 8005688:	440b      	add	r3, r1
 800568a:	4413      	add	r3, r2
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Bytes per pixel. */
    uint8_t bytes = dst->depth / 8;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	791b      	ldrb	r3, [r3, #4]
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	75fb      	strb	r3, [r7, #23]
    for (uint16_t y = 0; y < srch; y++) {
 8005696:	2300      	movs	r3, #0
 8005698:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800569a:	e033      	b.n	8005704 <blit+0x1b0>
        for (uint16_t x = 0; x < srcw; x++) {
 800569c:	2300      	movs	r3, #0
 800569e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80056a0:	e015      	b.n	80056ce <blit+0x17a>
            for (uint16_t z = 0; z < bytes; z++) {
 80056a2:	2300      	movs	r3, #0
 80056a4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056a6:	e00a      	b.n	80056be <blit+0x16a>
                *(dstptr++) = *(srcptr++);
 80056a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056aa:	1c53      	adds	r3, r2, #1
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056b4:	7812      	ldrb	r2, [r2, #0]
 80056b6:	701a      	strb	r2, [r3, #0]
            for (uint16_t z = 0; z < bytes; z++) {
 80056b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056ba:	3301      	adds	r3, #1
 80056bc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d3ef      	bcc.n	80056a8 <blit+0x154>
        for (uint16_t x = 0; x < srcw; x++) {
 80056c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056ca:	3301      	adds	r3, #1
 80056cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80056ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80056d0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80056d4:	429a      	cmp	r2, r3
 80056d6:	dbe4      	blt.n	80056a2 <blit+0x14e>
            }
        }
        dstptr += (dst->pitch / (dst->depth / 8) - srcw) * bytes;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056dc:	461a      	mov	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	791b      	ldrb	r3, [r3, #4]
 80056e2:	08db      	lsrs	r3, r3, #3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	fb92 f2f3 	sdiv	r2, r2, r3
 80056ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	7dfa      	ldrb	r2, [r7, #23]
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fa:	4413      	add	r3, r2
 80056fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint16_t y = 0; y < srch; y++) {
 80056fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005700:	3301      	adds	r3, #1
 8005702:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005704:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005706:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800570a:	429a      	cmp	r2, r3
 800570c:	dbc6      	blt.n	800569c <blit+0x148>
 800570e:	e002      	b.n	8005716 <blit+0x1c2>
        return;
 8005710:	bf00      	nop
 8005712:	e000      	b.n	8005716 <blit+0x1c2>
        return;
 8005714:	bf00      	nop
    }
}
 8005716:	373c      	adds	r7, #60	@ 0x3c
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <scale_blit>:
 * http://www.davdata.nl/math/bmresize.html
 */

static void
scale_blit(void *_dst, int16_t x0, int16_t y0, uint16_t dstw, uint16_t dsth, void *_src)
{
 8005720:	b480      	push	{r7}
 8005722:	b093      	sub	sp, #76	@ 0x4c
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	460b      	mov	r3, r1
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
    hagl_bitmap_t *dst = _dst;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
    hagl_bitmap_t *src = _src;
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30

    uint16_t px, py;

    uint16_t srcw = src->width;
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t srch = src->height;
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	885b      	ldrh	r3, [r3, #2]
 800574c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint32_t x_ratio = (uint32_t)((srcw << 16) / dstw);
 800574e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005750:	041a      	lsls	r2, r3, #16
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	fb92 f3f3 	sdiv	r3, r2, r3
 8005758:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t y_ratio = (uint32_t)((srch << 16) / dsth);
 800575a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800575c:	041a      	lsls	r2, r3, #16
 800575e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005762:	fb92 f3f3 	sdiv	r3, r2, r3
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24

    /* x0 or y0 is over the edge, nothing to do. */
    if ((x0 > dst->width) || (y0 > dst->height)) {
 8005768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800576c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	4293      	cmp	r3, r2
 8005772:	f300 8108 	bgt.w	8005986 <scale_blit+0x266>
 8005776:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800577a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800577c:	8852      	ldrh	r2, [r2, #2]
 800577e:	4293      	cmp	r3, r2
 8005780:	f300 8101 	bgt.w	8005986 <scale_blit+0x266>
        return;
    }

    /* x0 is negative, ignore parts outside of screen. */
    if (x0 < 0) {
 8005784:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005788:	2b00      	cmp	r3, #0
 800578a:	da05      	bge.n	8005798 <scale_blit+0x78>
        dstw = dstw + x0;
 800578c:	897a      	ldrh	r2, [r7, #10]
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	4413      	add	r3, r2
 8005792:	80fb      	strh	r3, [r7, #6]
        x0 = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	817b      	strh	r3, [r7, #10]
    }

    /* y0 is negative, ignore parts outside of screen. */
    if (y0 < 0) {
 8005798:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da07      	bge.n	80057b0 <scale_blit+0x90>
        dsth = dsth + y0;
 80057a0:	893a      	ldrh	r2, [r7, #8]
 80057a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057a6:	4413      	add	r3, r2
 80057a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        y0 = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	813b      	strh	r3, [r7, #8]
    }

    /* Ignore everything going over right edge. */
    if (dstw > (dst->width - x0)) {
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057bc:	1acb      	subs	r3, r1, r3
 80057be:	429a      	cmp	r2, r3
 80057c0:	dd04      	ble.n	80057cc <scale_blit+0xac>
        dstw = dst->width - x0;
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	881a      	ldrh	r2, [r3, #0]
 80057c6:	897b      	ldrh	r3, [r7, #10]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	80fb      	strh	r3, [r7, #6]
    }

    /* Ignore everything going over bottom edge. */
    if (dsth > (dst->height - y0)) {
 80057cc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	885b      	ldrh	r3, [r3, #2]
 80057d4:	4619      	mov	r1, r3
 80057d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057da:	1acb      	subs	r3, r1, r3
 80057dc:	429a      	cmp	r2, r3
 80057de:	dd05      	ble.n	80057ec <scale_blit+0xcc>
        dsth = dst->height - y0;
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e2:	885a      	ldrh	r2, [r3, #2]
 80057e4:	893b      	ldrh	r3, [r7, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    }

    /* Bytes per pixel. */
    uint8_t bytes = dst->depth / 8;
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	791b      	ldrb	r3, [r3, #4]
 80057f0:	08db      	lsrs	r3, r3, #3
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* If sentence here is not the most elegant thing, but makes */
    /* the pointer maths much more easy to read. */
    if (2 == bytes) {
 80057f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d166      	bne.n	80058cc <scale_blit+0x1ac>
        uint16_t *dstptr = (uint16_t *) (dst->buffer + dst->pitch * y0 + (dst->depth / 8) * x0);
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005806:	4619      	mov	r1, r3
 8005808:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	b2db      	uxtb	r3, r3
 800581a:	4618      	mov	r0, r3
 800581c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005820:	fb00 f303 	mul.w	r3, r0, r3
 8005824:	440b      	add	r3, r1
 8005826:	4413      	add	r3, r2
 8005828:	647b      	str	r3, [r7, #68]	@ 0x44
        uint16_t *srcptr = (uint16_t *) src->buffer;
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	617b      	str	r3, [r7, #20]
        for (uint16_t y = 0; y < dsth; y++) {
 8005830:	2300      	movs	r3, #0
 8005832:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005836:	e042      	b.n	80058be <scale_blit+0x19e>
            for (uint16_t x = 0; x < dstw; x++) {
 8005838:	2300      	movs	r3, #0
 800583a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800583e:	e025      	b.n	800588c <scale_blit+0x16c>
                px = ((x * x_ratio) >> 16);
 8005840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	0c1b      	lsrs	r3, r3, #16
 800584c:	837b      	strh	r3, [r7, #26]
                py = ((y * y_ratio) >> 16);
 800584e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	833b      	strh	r3, [r7, #24]
                *(dstptr++) = srcptr[(uint8_t)((py * srcw) + px)];
 800585c:	8b3b      	ldrh	r3, [r7, #24]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005862:	b2db      	uxtb	r3, r3
 8005864:	fb12 f303 	smulbb	r3, r2, r3
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8b7b      	ldrh	r3, [r7, #26]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4413      	add	r3, r2
 8005870:	b2db      	uxtb	r3, r3
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	441a      	add	r2, r3
 8005878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587a:	1c99      	adds	r1, r3, #2
 800587c:	6479      	str	r1, [r7, #68]	@ 0x44
 800587e:	8812      	ldrh	r2, [r2, #0]
 8005880:	801a      	strh	r2, [r3, #0]
            for (uint16_t x = 0; x < dstw; x++) {
 8005882:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005886:	3301      	adds	r3, #1
 8005888:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800588c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	429a      	cmp	r2, r3
 8005894:	d3d4      	bcc.n	8005840 <scale_blit+0x120>
            }
            dstptr += dst->pitch / (dst->depth / 8) - dstw;
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800589a:	461a      	mov	r2, r3
 800589c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	08db      	lsrs	r3, r3, #3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b0:	4413      	add	r3, r2
 80058b2:	647b      	str	r3, [r7, #68]	@ 0x44
        for (uint16_t y = 0; y < dsth; y++) {
 80058b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80058be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80058c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3b6      	bcc.n	8005838 <scale_blit+0x118>
 80058ca:	e05d      	b.n	8005988 <scale_blit+0x268>
        }
    } else {
        /* Assume 1 byte per pixel. */
        uint8_t *dstptr = (uint8_t *) (dst->buffer + dst->pitch * y0 + (dst->depth / 8) * x0);
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058d4:	4619      	mov	r1, r3
 80058d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	4619      	mov	r1, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e2:	791b      	ldrb	r3, [r3, #4]
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	4618      	mov	r0, r3
 80058ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80058ee:	fb00 f303 	mul.w	r3, r0, r3
 80058f2:	440b      	add	r3, r1
 80058f4:	4413      	add	r3, r2
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t *srcptr = (uint8_t *) src->buffer;
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fc:	61fb      	str	r3, [r7, #28]
        for (uint16_t y = 0; y < dsth; y++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005902:	e03a      	b.n	800597a <scale_blit+0x25a>
            for (uint16_t x = 0; x < dstw; x++) {
 8005904:	2300      	movs	r3, #0
 8005906:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005908:	e021      	b.n	800594e <scale_blit+0x22e>
                px = ((x * x_ratio) >> 16);
 800590a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800590c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	837b      	strh	r3, [r7, #26]
                py = ((y * y_ratio) >> 16);
 8005916:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	833b      	strh	r3, [r7, #24]
                *(dstptr++) = srcptr[(uint8_t)((py * srcw) + px)];
 8005922:	8b3b      	ldrh	r3, [r7, #24]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005928:	b2db      	uxtb	r3, r3
 800592a:	fb12 f303 	smulbb	r3, r2, r3
 800592e:	b2da      	uxtb	r2, r3
 8005930:	8b7b      	ldrh	r3, [r7, #26]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	4413      	add	r3, r2
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	441a      	add	r2, r3
 800593e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005940:	1c59      	adds	r1, r3, #1
 8005942:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	701a      	strb	r2, [r3, #0]
            for (uint16_t x = 0; x < dstw; x++) {
 8005948:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800594a:	3301      	adds	r3, #1
 800594c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800594e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	429a      	cmp	r2, r3
 8005954:	d3d9      	bcc.n	800590a <scale_blit+0x1ea>
            }
            dstptr += dst->pitch / (dst->depth / 8) - dstw;
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800595a:	461a      	mov	r2, r3
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	791b      	ldrb	r3, [r3, #4]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	fb92 f2f3 	sdiv	r2, r2, r3
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	461a      	mov	r2, r3
 800596e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005970:	4413      	add	r3, r2
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (uint16_t y = 0; y < dsth; y++) {
 8005974:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005976:	3301      	adds	r3, #1
 8005978:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800597a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800597c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005980:	429a      	cmp	r2, r3
 8005982:	d3bf      	bcc.n	8005904 <scale_blit+0x1e4>
 8005984:	e000      	b.n	8005988 <scale_blit+0x268>
        return;
 8005986:	bf00      	nop
        }
    }
}
 8005988:	374c      	adds	r7, #76	@ 0x4c
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <hagl_bitmap_init>:

/* Initialise bitmap with given buffer. */
void
hagl_bitmap_init(hagl_bitmap_t *bitmap, int16_t width, uint16_t height, uint8_t depth, void *buffer)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	4608      	mov	r0, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	461a      	mov	r2, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	817b      	strh	r3, [r7, #10]
 80059a6:	460b      	mov	r3, r1
 80059a8:	813b      	strh	r3, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
    bitmap->width = width;
 80059ae:	897a      	ldrh	r2, [r7, #10]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	801a      	strh	r2, [r3, #0]
    bitmap->height = height;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	893a      	ldrh	r2, [r7, #8]
 80059b8:	805a      	strh	r2, [r3, #2]
    bitmap->depth = depth;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	79fa      	ldrb	r2, [r7, #7]
 80059be:	711a      	strb	r2, [r3, #4]
    bitmap->buffer = (uint8_t *) buffer;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	635a      	str	r2, [r3, #52]	@ 0x34

    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	7912      	ldrb	r2, [r2, #4]
 80059ce:	08d2      	lsrs	r2, r2, #3
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	fb13 f302 	smulbb	r3, r3, r2
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	859a      	strh	r2, [r3, #44]	@ 0x2c
    bitmap->size = bitmap->pitch * bitmap->height;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059e0:	461a      	mov	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	885b      	ldrh	r3, [r3, #2]
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30

    bitmap->clip.x0 = 0;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	80da      	strh	r2, [r3, #6]
    bitmap->clip.y0 = 0;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	811a      	strh	r2, [r3, #8]
    bitmap->clip.x1 = bitmap->width - 1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	815a      	strh	r2, [r3, #10]
    bitmap->clip.y1 = bitmap->height - 1;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	885b      	ldrh	r3, [r3, #2]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	819a      	strh	r2, [r3, #12]

    bitmap->put_pixel = put_pixel;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a0b      	ldr	r2, [pc, #44]	@ (8005a44 <hagl_bitmap_init+0xb0>)
 8005a18:	611a      	str	r2, [r3, #16]
    bitmap->get_pixel = get_pixel;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a48 <hagl_bitmap_init+0xb4>)
 8005a1e:	615a      	str	r2, [r3, #20]
    bitmap->hline = hline;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a0a      	ldr	r2, [pc, #40]	@ (8005a4c <hagl_bitmap_init+0xb8>)
 8005a24:	625a      	str	r2, [r3, #36]	@ 0x24
    bitmap->vline = vline;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4a09      	ldr	r2, [pc, #36]	@ (8005a50 <hagl_bitmap_init+0xbc>)
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28
    bitmap->blit = blit;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a09      	ldr	r2, [pc, #36]	@ (8005a54 <hagl_bitmap_init+0xc0>)
 8005a30:	61da      	str	r2, [r3, #28]
    bitmap->scale_blit = scale_blit;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <hagl_bitmap_init+0xc4>)
 8005a36:	621a      	str	r2, [r3, #32]
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	080053b3 	.word	0x080053b3
 8005a48:	08005407 	.word	0x08005407
 8005a4c:	08005453 	.word	0x08005453
 8005a50:	080054c9 	.word	0x080054c9
 8005a54:	08005555 	.word	0x08005555
 8005a58:	08005721 	.word	0x08005721

08005a5c <hagl_blit_xy>:
#include "hagl/bitmap.h"
#include "hagl/surface.h"

void
hagl_blit_xy(void const *_surface, int16_t x0, int16_t y0, hagl_bitmap_t *source)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b08d      	sub	sp, #52	@ 0x34
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	817b      	strh	r3, [r7, #10]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	813b      	strh	r3, [r7, #8]
    const hagl_surface_t *surface = _surface;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	617b      	str	r3, [r7, #20]

    if (surface->blit) {
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d053      	beq.n	8005b22 <hagl_blit_xy+0xc6>
        /* Check if bitmap is inside clip windows bounds */
        if (
            (x0 < surface->clip.x0) ||
 8005a7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	88d2      	ldrh	r2, [r2, #6]
        if (
 8005a82:	4293      	cmp	r3, r2
 8005a84:	db17      	blt.n	8005ab6 <hagl_blit_xy+0x5a>
            (y0 < surface->clip.y0) ||
 8005a86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	8912      	ldrh	r2, [r2, #8]
            (x0 < surface->clip.x0) ||
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	db11      	blt.n	8005ab6 <hagl_blit_xy+0x5a>
            (x0 + source->width > surface->clip.x1) ||
 8005a92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	8812      	ldrh	r2, [r2, #0]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	8952      	ldrh	r2, [r2, #10]
            (y0 < surface->clip.y0) ||
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	dc08      	bgt.n	8005ab6 <hagl_blit_xy+0x5a>
            (y0 + source->height > surface->clip.y1)
 8005aa4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	8852      	ldrh	r2, [r2, #2]
 8005aac:	4413      	add	r3, r2
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	8992      	ldrh	r2, [r2, #12]
            (x0 + source->width > surface->clip.x1) ||
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	dd2c      	ble.n	8005b10 <hagl_blit_xy+0xb4>
        ) {
            /* Out of bounds, use local putpixel fallback. */
            hagl_color_t color;
            hagl_color_t *ptr = (hagl_color_t *) source->buffer;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            for (uint16_t y = 0; y < source->height; y++) {
 8005abc:	2300      	movs	r3, #0
 8005abe:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005ac0:	e020      	b.n	8005b04 <hagl_blit_xy+0xa8>
                for (uint16_t x = 0; x < source->width; x++) {
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ac6:	e015      	b.n	8005af4 <hagl_blit_xy+0x98>
                    color = *(ptr++);
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	61bb      	str	r3, [r7, #24]
                    hagl_put_pixel(surface, x0 + x, y0 + y, color);
 8005ad2:	6978      	ldr	r0, [r7, #20]
 8005ad4:	897a      	ldrh	r2, [r7, #10]
 8005ad6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ad8:	4413      	add	r3, r2
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b219      	sxth	r1, r3
 8005ade:	893a      	ldrh	r2, [r7, #8]
 8005ae0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b21a      	sxth	r2, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f000 fbb8 	bl	800625e <hagl_put_pixel>
                for (uint16_t x = 0; x < source->width; x++) {
 8005aee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005af0:	3301      	adds	r3, #1
 8005af2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3e4      	bcc.n	8005ac8 <hagl_blit_xy+0x6c>
            for (uint16_t y = 0; y < source->height; y++) {
 8005afe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b00:	3301      	adds	r3, #1
 8005b02:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	885b      	ldrh	r3, [r3, #2]
 8005b08:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3d9      	bcc.n	8005ac2 <hagl_blit_xy+0x66>
        ) {
 8005b0e:	e035      	b.n	8005b7c <hagl_blit_xy+0x120>
                }
            }
        } else {
            /* Inside of bounds, can use HAL provided blit. */
            surface->blit(&surface, x0, y0, source);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	69dc      	ldr	r4, [r3, #28]
 8005b14:	8979      	ldrh	r1, [r7, #10]
 8005b16:	893a      	ldrh	r2, [r7, #8]
 8005b18:	f107 0014 	add.w	r0, r7, #20
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	47a0      	blx	r4
                color = *(ptr++);
                hagl_put_pixel(surface, x0 + x, y0 + y, color);
            }
        }
    }
};
 8005b20:	e02c      	b.n	8005b7c <hagl_blit_xy+0x120>
        hagl_color_t *ptr = (hagl_color_t *) source->buffer;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b26:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint16_t y = 0; y < source->height; y++) {
 8005b28:	2300      	movs	r3, #0
 8005b2a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b2c:	e020      	b.n	8005b70 <hagl_blit_xy+0x114>
            for (uint16_t x = 0; x < source->width; x++) {
 8005b2e:	2300      	movs	r3, #0
 8005b30:	843b      	strh	r3, [r7, #32]
 8005b32:	e015      	b.n	8005b60 <hagl_blit_xy+0x104>
                color = *(ptr++);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	61fb      	str	r3, [r7, #28]
                hagl_put_pixel(surface, x0 + x, y0 + y, color);
 8005b3e:	6978      	ldr	r0, [r7, #20]
 8005b40:	897a      	ldrh	r2, [r7, #10]
 8005b42:	8c3b      	ldrh	r3, [r7, #32]
 8005b44:	4413      	add	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b219      	sxth	r1, r3
 8005b4a:	893a      	ldrh	r2, [r7, #8]
 8005b4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b4e:	4413      	add	r3, r2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f000 fb82 	bl	800625e <hagl_put_pixel>
            for (uint16_t x = 0; x < source->width; x++) {
 8005b5a:	8c3b      	ldrh	r3, [r7, #32]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	843b      	strh	r3, [r7, #32]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	8c3a      	ldrh	r2, [r7, #32]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3e4      	bcc.n	8005b34 <hagl_blit_xy+0xd8>
        for (uint16_t y = 0; y < source->height; y++) {
 8005b6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	885b      	ldrh	r3, [r3, #2]
 8005b74:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d3d9      	bcc.n	8005b2e <hagl_blit_xy+0xd2>
};
 8005b7a:	e7ff      	b.n	8005b7c <hagl_blit_xy+0x120>
 8005b7c:	bf00      	nop
 8005b7e:	3734      	adds	r7, #52	@ 0x34
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd90      	pop	{r4, r7, pc}

08005b84 <hagl_blit>:
 * @param y0
 * @param source pointer to a bitmap
 */
static void inline
hagl_blit(void const *surface, int16_t x0, int16_t y0, hagl_bitmap_t *source)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	817b      	strh	r3, [r7, #10]
 8005b92:	4613      	mov	r3, r2
 8005b94:	813b      	strh	r3, [r7, #8]
    hagl_blit_xy(surface, x0, y0, source);
 8005b96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005b9a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ff5b 	bl	8005a5c <hagl_blit_xy>
};
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <hagl_put_char>:
    return 0;
}

uint8_t
hagl_put_char(void const *_surface, wchar_t code, int16_t x0, int16_t y0, hagl_color_t color, const uint8_t *font)
{
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b09b      	sub	sp, #108	@ 0x6c
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	80fb      	strh	r3, [r7, #6]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80bb      	strh	r3, [r7, #4]
    static uint8_t *buffer = NULL;
    const hagl_surface_t *surface = _surface;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	657b      	str	r3, [r7, #84]	@ 0x54
    uint8_t set, status;
    hagl_bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8005bca:	f107 0310 	add.w	r3, r7, #16
 8005bce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fb5b 	bl	800528e <fontx_glyph>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

    if (0 != status) {
 8005bde:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <hagl_put_char+0x3a>
        return 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e06a      	b.n	8005cc0 <hagl_put_char+0x110>
    }

    /* Initialize character buffer when first called. */
    if (NULL == buffer) {
 8005bea:	4b37      	ldr	r3, [pc, #220]	@ (8005cc8 <hagl_put_char+0x118>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <hagl_put_char+0x52>
        buffer = calloc(HAGL_CHAR_BUFFER_SIZE, sizeof(uint8_t));
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	206c      	movs	r0, #108	@ 0x6c
 8005bf6:	f000 fc69 	bl	80064cc <calloc>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4b32      	ldr	r3, [pc, #200]	@ (8005cc8 <hagl_put_char+0x118>)
 8005c00:	601a      	str	r2, [r3, #0]
    }

    hagl_bitmap_init(&bitmap,  glyph.width, glyph.height, surface->depth, (uint8_t *)buffer);
 8005c02:	7c3b      	ldrb	r3, [r7, #16]
 8005c04:	b219      	sxth	r1, r3
 8005c06:	7c7b      	ldrb	r3, [r7, #17]
 8005c08:	461c      	mov	r4, r3
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0c:	791a      	ldrb	r2, [r3, #4]
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc8 <hagl_put_char+0x118>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f107 0018 	add.w	r0, r7, #24
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	f7ff feba 	bl	8005994 <hagl_bitmap_init>

    hagl_color_t *ptr = (hagl_color_t *) bitmap.buffer;
 8005c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c22:	65fb      	str	r3, [r7, #92]	@ 0x5c

    for (uint8_t y = 0; y < glyph.height; y++) {
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8005c2a:	e039      	b.n	8005ca0 <hagl_put_char+0xf0>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8005c32:	e027      	b.n	8005c84 <hagl_put_char+0xd4>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8005c3a:	08d2      	lsrs	r2, r2, #3
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	4413      	add	r3, r2
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b25a      	sxtb	r2, r3
 8005c44:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	2180      	movs	r1, #128	@ 0x80
 8005c4e:	fa41 f303 	asr.w	r3, r1, r3
 8005c52:	b25b      	sxtb	r3, r3
 8005c54:	4013      	ands	r3, r2
 8005c56:	b25b      	sxtb	r3, r3
 8005c58:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (set) {
 8005c5c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <hagl_put_char+0xc0>
                *(ptr++) = color;
 8005c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c6a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e004      	b.n	8005c7a <hagl_put_char+0xca>
            } else {
                *(ptr++) = 0x0000;
 8005c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005c7a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8005c84:	7c3b      	ldrb	r3, [r7, #16]
 8005c86:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d3d2      	bcc.n	8005c34 <hagl_put_char+0x84>
            }
        }
        glyph.buffer += glyph.pitch;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	7cfa      	ldrb	r2, [r7, #19]
 8005c92:	4413      	add	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8005c96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8005ca0:	7c7b      	ldrb	r3, [r7, #17]
 8005ca2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3c0      	bcc.n	8005c2c <hagl_put_char+0x7c>
    }

    hagl_blit(surface, x0, y0, &bitmap);
 8005caa:	f107 0318 	add.w	r3, r7, #24
 8005cae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005cb2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005cb6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005cb8:	f7ff ff64 	bl	8005b84 <hagl_blit>

    return bitmap.width;
 8005cbc:	8b3b      	ldrh	r3, [r7, #24]
 8005cbe:	b2db      	uxtb	r3, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3764      	adds	r7, #100	@ 0x64
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd90      	pop	{r4, r7, pc}
 8005cc8:	2000a330 	.word	0x2000a330

08005ccc <hagl_put_text>:
 * continue from the next line.
 */

uint16_t
hagl_put_text(void const *surface, const wchar_t *str, int16_t x0, int16_t y0, hagl_color_t color, const unsigned char *font)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	460b      	mov	r3, r1
 8005cdc:	80fb      	strh	r3, [r7, #6]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80bb      	strh	r3, [r7, #4]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff faae 	bl	800524e <fontx_meta>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8005cf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <hagl_put_text+0x38>
        return 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e02e      	b.n	8005d62 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1d1a      	adds	r2, r3, #4
 8005d08:	60ba      	str	r2, [r7, #8]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	2b0d      	cmp	r3, #13
 8005d12:	d002      	beq.n	8005d1a <hagl_put_text+0x4e>
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2b0a      	cmp	r3, #10
 8005d18:	d108      	bne.n	8005d2c <hagl_put_text+0x60>
            x0 = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	80fb      	strh	r3, [r7, #6]
            y0 += meta.height;
 8005d1e:	7fbb      	ldrb	r3, [r7, #30]
 8005d20:	461a      	mov	r2, r3
 8005d22:	88bb      	ldrh	r3, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	80bb      	strh	r3, [r7, #4]
 8005d2a:	e012      	b.n	8005d52 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(surface, temp, x0, y0, color, font);
 8005d2c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	6a39      	ldr	r1, [r7, #32]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff ff35 	bl	8005bb0 <hagl_put_char>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	80fb      	strh	r3, [r7, #6]
        }
    } while (*str != 0);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1d4      	bne.n	8005d04 <hagl_put_text+0x38>

    return x0 - original;
 8005d5a:	88fa      	ldrh	r2, [r7, #6]
 8005d5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	b29b      	uxth	r3, r3
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3728      	adds	r7, #40	@ 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <code>:
static const uint8_t TOP = 0b1000;

static
uint8_t
code(int16_t x0, int16_t y0, hagl_window_t window)
{
 8005d6a:	b490      	push	{r4, r7}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	1d39      	adds	r1, r7, #4
 8005d76:	e881 000c 	stmia.w	r1, {r2, r3}
 8005d7a:	4623      	mov	r3, r4
 8005d7c:	81fb      	strh	r3, [r7, #14]
 8005d7e:	4603      	mov	r3, r0
 8005d80:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005d86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d8a:	88ba      	ldrh	r2, [r7, #4]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	da04      	bge.n	8005d9a <code+0x30>
        code |= LEFT;
 8005d90:	2201      	movs	r2, #1
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	75fb      	strb	r3, [r7, #23]
 8005d98:	e008      	b.n	8005dac <code+0x42>
    } else if (x0 > window.x1) {
 8005d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d9e:	893a      	ldrh	r2, [r7, #8]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	dd03      	ble.n	8005dac <code+0x42>
        code |= RIGHT;
 8005da4:	2202      	movs	r2, #2
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	75fb      	strb	r3, [r7, #23]
    }
    if (y0 < window.y0) {
 8005dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	4293      	cmp	r3, r2
 8005db4:	da04      	bge.n	8005dc0 <code+0x56>
        code |= BOTTOM;
 8005db6:	2204      	movs	r2, #4
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	75fb      	strb	r3, [r7, #23]
 8005dbe:	e008      	b.n	8005dd2 <code+0x68>
    } else if (y0 > window.y1) {
 8005dc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005dc4:	897a      	ldrh	r2, [r7, #10]
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	dd03      	ble.n	8005dd2 <code+0x68>
        code |= TOP;
 8005dca:	2208      	movs	r2, #8
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc90      	pop	{r4, r7}
 8005ddc:	4770      	bx	lr

08005dde <hagl_clip_line>:

bool
hagl_clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, hagl_window_t window)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b088      	sub	sp, #32
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005df8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dfc:	cb0c      	ldmia	r3, {r2, r3}
 8005dfe:	f7ff ffb4 	bl	8005d6a <code>
 8005e02:	4603      	mov	r3, r0
 8005e04:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e16:	cb0c      	ldmia	r3, {r2, r3}
 8005e18:	f7ff ffa7 	bl	8005d6a <code>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005e20:	2300      	movs	r3, #0
 8005e22:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005e24:	7ffa      	ldrb	r2, [r7, #31]
 8005e26:	7fbb      	ldrb	r3, [r7, #30]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <hagl_clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005e30:	2301      	movs	r3, #1
 8005e32:	777b      	strb	r3, [r7, #29]
            break;
 8005e34:	e0e9      	b.n	800600a <hagl_clip_line+0x22c>
        } else if (code0 & code1) {
 8005e36:	7ffa      	ldrb	r2, [r7, #31]
 8005e38:	7fbb      	ldrb	r3, [r7, #30]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 80e2 	bne.w	8006008 <hagl_clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <hagl_clip_line+0x78>
 8005e52:	7ffb      	ldrb	r3, [r7, #31]
 8005e54:	e000      	b.n	8005e58 <hagl_clip_line+0x7a>
 8005e56:	7fbb      	ldrb	r3, [r7, #30]
 8005e58:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d024      	beq.n	8005eb0 <hagl_clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e74:	4619      	mov	r1, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7c:	1acb      	subs	r3, r1, r3
 8005e7e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8005e80:	4608      	mov	r0, r1
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005e88:	1a41      	subs	r1, r0, r1
 8005e8a:	fb03 f101 	mul.w	r1, r3, r1
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e94:	4618      	mov	r0, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e9c:	1ac3      	subs	r3, r0, r3
 8005e9e:	fb91 f3f3 	sdiv	r3, r1, r3
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005eaa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005eac:	833b      	strh	r3, [r7, #24]
 8005eae:	e07f      	b.n	8005fb0 <hagl_clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d024      	beq.n	8005f06 <hagl_clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed2:	1acb      	subs	r3, r1, r3
 8005ed4:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005ede:	1a41      	subs	r1, r0, r1
 8005ee0:	fb03 f101 	mul.w	r1, r3, r1
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eea:	4618      	mov	r0, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef2:	1ac3      	subs	r3, r0, r3
 8005ef4:	fb91 f3f3 	sdiv	r3, r1, r3
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	4413      	add	r3, r2
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8005f00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f02:	833b      	strh	r3, [r7, #24]
 8005f04:	e054      	b.n	8005fb0 <hagl_clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8005f06:	2202      	movs	r2, #2
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d024      	beq.n	8005f5c <hagl_clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f20:	4619      	mov	r1, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f28:	1acb      	subs	r3, r1, r3
 8005f2a:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005f34:	1a41      	subs	r1, r0, r1
 8005f36:	fb03 f101 	mul.w	r1, r3, r1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f40:	4618      	mov	r0, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f48:	1ac3      	subs	r3, r0, r3
 8005f4a:	fb91 f3f3 	sdiv	r3, r1, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8005f56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f58:	837b      	strh	r3, [r7, #26]
 8005f5a:	e029      	b.n	8005fb0 <hagl_clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	4013      	ands	r3, r2
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d023      	beq.n	8005fb0 <hagl_clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f76:	4619      	mov	r1, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f7e:	1acb      	subs	r3, r1, r3
 8005f80:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8005f82:	4608      	mov	r0, r1
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005f8a:	1a41      	subs	r1, r0, r1
 8005f8c:	fb03 f101 	mul.w	r1, r3, r1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f96:	4618      	mov	r0, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f9e:	1ac3      	subs	r3, r0, r3
 8005fa0:	fb91 f3f3 	sdiv	r3, r1, r3
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8005fac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fae:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8005fb0:	7dfa      	ldrb	r2, [r7, #23]
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d113      	bne.n	8005fe0 <hagl_clip_line+0x202>
                *x0 = x;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8b7a      	ldrh	r2, [r7, #26]
 8005fbc:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	8b3a      	ldrh	r2, [r7, #24]
 8005fc2:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005fd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005fd4:	cb0c      	ldmia	r3, {r2, r3}
 8005fd6:	f7ff fec8 	bl	8005d6a <code>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e721      	b.n	8005e24 <hagl_clip_line+0x46>
            } else {
                *x1 = x;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8b7a      	ldrh	r2, [r7, #26]
 8005fe4:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	8b3a      	ldrh	r2, [r7, #24]
 8005fea:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005ff8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ffc:	cb0c      	ldmia	r3, {r2, r3}
 8005ffe:	f7ff feb4 	bl	8005d6a <code>
 8006002:	4603      	mov	r3, r0
 8006004:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006006:	e70d      	b.n	8005e24 <hagl_clip_line+0x46>
            break;
 8006008:	bf00      	nop
            }
        }
    }

    return accept;
 800600a:	7f7b      	ldrb	r3, [r7, #29]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <hagl_draw_hline_xyw>:
#include "hagl/line.h"
#include "hagl/surface.h"

void
hagl_draw_hline_xyw(void const *_surface, int16_t x0, int16_t y0, uint16_t w, hagl_color_t color)
{
 8006014:	b5b0      	push	{r4, r5, r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4603      	mov	r3, r0
 8006024:	817b      	strh	r3, [r7, #10]
 8006026:	460b      	mov	r3, r1
 8006028:	813b      	strh	r3, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	613b      	str	r3, [r7, #16]

    if (surface->hline) {
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d04a      	beq.n	80060d0 <hagl_draw_hline_xyw+0xbc>
        int16_t width = w;
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	82fb      	strh	r3, [r7, #22]

        /* x0 or y0 is over the edge, nothing to do. */
        if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1) || (y0 < surface->clip.y0))  {
 800603e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	8952      	ldrh	r2, [r2, #10]
 8006046:	4293      	cmp	r3, r2
 8006048:	dc57      	bgt.n	80060fa <hagl_draw_hline_xyw+0xe6>
 800604a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	8992      	ldrh	r2, [r2, #12]
 8006052:	4293      	cmp	r3, r2
 8006054:	dc51      	bgt.n	80060fa <hagl_draw_hline_xyw+0xe6>
 8006056:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	8912      	ldrh	r2, [r2, #8]
 800605e:	4293      	cmp	r3, r2
 8006060:	db4b      	blt.n	80060fa <hagl_draw_hline_xyw+0xe6>
            return;
        }

        /* x0 is left of clip window, ignore start part. */
        if (x0 < surface->clip.x0) {
 8006062:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	88d2      	ldrh	r2, [r2, #6]
 800606a:	4293      	cmp	r3, r2
 800606c:	da07      	bge.n	800607e <hagl_draw_hline_xyw+0x6a>
            width = width + x0;
 800606e:	8afa      	ldrh	r2, [r7, #22]
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	4413      	add	r3, r2
 8006074:	b29b      	uxth	r3, r3
 8006076:	82fb      	strh	r3, [r7, #22]
            x0 = surface->clip.x0;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	88db      	ldrh	r3, [r3, #6]
 800607c:	817b      	strh	r3, [r7, #10]
        }

        /* Everything outside clip window, nothing to do. */
        if (width <= 0)  {
 800607e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006082:	2b00      	cmp	r3, #0
 8006084:	dd3b      	ble.n	80060fe <hagl_draw_hline_xyw+0xea>
            return;
        }

        /* Cut anything going over right edge of clip window. */
        if (((x0 + width) > surface->clip.x1)) {
 8006086:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800608a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800608e:	4413      	add	r3, r2
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	8952      	ldrh	r2, [r2, #10]
 8006094:	4293      	cmp	r3, r2
 8006096:	dd0d      	ble.n	80060b4 <hagl_draw_hline_xyw+0xa0>
            width = width - (x0 + width - 1 - surface->clip.x1);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	895a      	ldrh	r2, [r3, #10]
 800609c:	8979      	ldrh	r1, [r7, #10]
 800609e:	8afb      	ldrh	r3, [r7, #22]
 80060a0:	440b      	add	r3, r1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	8afb      	ldrh	r3, [r7, #22]
 80060aa:	4413      	add	r3, r2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3301      	adds	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	82fb      	strh	r3, [r7, #22]
        }

        surface->hline(&surface, x0, y0, width, color);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80060b8:	8afd      	ldrh	r5, [r7, #22]
 80060ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80060be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80060c2:	f107 0010 	add.w	r0, r7, #16
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	462b      	mov	r3, r5
 80060cc:	47a0      	blx	r4
 80060ce:	e017      	b.n	8006100 <hagl_draw_hline_xyw+0xec>
    } else {
        hagl_draw_line(surface, x0, y0, x0 + w - 1, y0, color);
 80060d0:	6938      	ldr	r0, [r7, #16]
 80060d2:	897a      	ldrh	r2, [r7, #10]
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	4413      	add	r3, r2
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29b      	uxth	r3, r3
 80060de:	b21c      	sxth	r4, r3
 80060e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80060e4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	4623      	mov	r3, r4
 80060f4:	f000 f807 	bl	8006106 <hagl_draw_line>
 80060f8:	e002      	b.n	8006100 <hagl_draw_hline_xyw+0xec>
            return;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <hagl_draw_hline_xyw+0xec>
            return;
 80060fe:	bf00      	nop
    }
}
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bdb0      	pop	{r4, r5, r7, pc}

08006106 <hagl_draw_line>:
#include "hagl/clip.h"
#include "hagl.h"

void
hagl_draw_line(void const *_surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 8006106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006108:	b08d      	sub	sp, #52	@ 0x34
 800610a:	af02      	add	r7, sp, #8
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	4608      	mov	r0, r1
 8006110:	4611      	mov	r1, r2
 8006112:	461a      	mov	r2, r3
 8006114:	4603      	mov	r3, r0
 8006116:	817b      	strh	r3, [r7, #10]
 8006118:	460b      	mov	r3, r1
 800611a:	813b      	strh	r3, [r7, #8]
 800611c:	4613      	mov	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	623b      	str	r3, [r7, #32]

    /* Clip coordinates to fit clip window. */
    if (false == hagl_clip_line(&x0, &y0, &x1, &y1, surface->clip)) {
 8006124:	1dbe      	adds	r6, r7, #6
 8006126:	f107 0508 	add.w	r5, r7, #8
 800612a:	f107 040a 	add.w	r4, r7, #10
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	466b      	mov	r3, sp
 8006132:	3206      	adds	r2, #6
 8006134:	6810      	ldr	r0, [r2, #0]
 8006136:	6851      	ldr	r1, [r2, #4]
 8006138:	c303      	stmia	r3!, {r0, r1}
 800613a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800613e:	4632      	mov	r2, r6
 8006140:	4629      	mov	r1, r5
 8006142:	4620      	mov	r0, r4
 8006144:	f7ff fe4b 	bl	8005dde <hagl_clip_line>
 8006148:	4603      	mov	r3, r0
 800614a:	f083 0301 	eor.w	r3, r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d17e      	bne.n	8006252 <hagl_draw_line+0x14c>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006158:	461a      	mov	r2, r3
 800615a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfb8      	it	lt
 8006164:	425b      	neglt	r3, r3
 8006166:	83fb      	strh	r3, [r7, #30]
    sx = x0 < x1 ? 1 : -1;
 8006168:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800616c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006170:	429a      	cmp	r2, r3
 8006172:	da01      	bge.n	8006178 <hagl_draw_line+0x72>
 8006174:	2301      	movs	r3, #1
 8006176:	e001      	b.n	800617c <hagl_draw_line+0x76>
 8006178:	f04f 33ff 	mov.w	r3, #4294967295
 800617c:	83bb      	strh	r3, [r7, #28]
    dy = ABS(y1 - y0);
 800617e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8006182:	461a      	mov	r2, r3
 8006184:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfb8      	it	lt
 800618e:	425b      	neglt	r3, r3
 8006190:	837b      	strh	r3, [r7, #26]
    sy = y0 < y1 ? 1 : -1;
 8006192:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006196:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800619a:	429a      	cmp	r2, r3
 800619c:	da01      	bge.n	80061a2 <hagl_draw_line+0x9c>
 800619e:	2301      	movs	r3, #1
 80061a0:	e001      	b.n	80061a6 <hagl_draw_line+0xa0>
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	833b      	strh	r3, [r7, #24]
    err = (dx > dy ? dx : -dy) / 2;
 80061a8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80061ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	dd06      	ble.n	80061c2 <hagl_draw_line+0xbc>
 80061b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80061b8:	0fda      	lsrs	r2, r3, #31
 80061ba:	4413      	add	r3, r2
 80061bc:	105b      	asrs	r3, r3, #1
 80061be:	b21b      	sxth	r3, r3
 80061c0:	e006      	b.n	80061d0 <hagl_draw_line+0xca>
 80061c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80061c6:	0fda      	lsrs	r2, r3, #31
 80061c8:	4413      	add	r3, r2
 80061ca:	105b      	asrs	r3, r3, #1
 80061cc:	425b      	negs	r3, r3
 80061ce:	b21b      	sxth	r3, r3
 80061d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    while (1) {
        hagl_put_pixel(surface, x0, y0, color);
 80061d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80061d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80061da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061dc:	6a38      	ldr	r0, [r7, #32]
 80061de:	f000 f83e 	bl	800625e <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80061e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80061e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d105      	bne.n	80061fa <hagl_draw_line+0xf4>
 80061ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80061f2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d02d      	beq.n	8006256 <hagl_draw_line+0x150>
            break;
        };

        e2 = err + err;
 80061fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	b29b      	uxth	r3, r3
 8006200:	82fb      	strh	r3, [r7, #22]

        if (e2 > -dx) {
 8006202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006206:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800620a:	425b      	negs	r3, r3
 800620c:	429a      	cmp	r2, r3
 800620e:	dd0c      	ble.n	800622a <hagl_draw_line+0x124>
            err -= dy;
 8006210:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	b29b      	uxth	r3, r3
 8006218:	84fb      	strh	r3, [r7, #38]	@ 0x26
            x0 += sx;
 800621a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800621e:	b29a      	uxth	r2, r3
 8006220:	8bbb      	ldrh	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	b29b      	uxth	r3, r3
 8006226:	b21b      	sxth	r3, r3
 8006228:	817b      	strh	r3, [r7, #10]
        }

        if (e2 < dy) {
 800622a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800622e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006232:	429a      	cmp	r2, r3
 8006234:	dacd      	bge.n	80061d2 <hagl_draw_line+0xcc>
            err += dx;
 8006236:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006238:	8bfb      	ldrh	r3, [r7, #30]
 800623a:	4413      	add	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            y0 += sy;
 8006240:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006244:	b29a      	uxth	r2, r3
 8006246:	8b3b      	ldrh	r3, [r7, #24]
 8006248:	4413      	add	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	b21b      	sxth	r3, r3
 800624e:	813b      	strh	r3, [r7, #8]
        hagl_put_pixel(surface, x0, y0, color);
 8006250:	e7bf      	b.n	80061d2 <hagl_draw_line+0xcc>
        return;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <hagl_draw_line+0x152>
            break;
 8006256:	bf00      	nop
        }
    }
}
 8006258:	372c      	adds	r7, #44	@ 0x2c
 800625a:	46bd      	mov	sp, r7
 800625c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800625e <hagl_put_pixel>:
#include "hagl/color.h"
#include "hagl/surface.h"

void
hagl_put_pixel(void const *_surface, int16_t x0, int16_t y0, hagl_color_t color)
{
 800625e:	b590      	push	{r4, r7, lr}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	817b      	strh	r3, [r7, #10]
 800626c:	4613      	mov	r3, r2
 800626e:	813b      	strh	r3, [r7, #8]
    const hagl_surface_t *surface = _surface;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	617b      	str	r3, [r7, #20]

    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < surface->clip.x0) || (y0 < surface->clip.y0))  {
 8006274:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	88d2      	ldrh	r2, [r2, #6]
 800627c:	4293      	cmp	r3, r2
 800627e:	db1c      	blt.n	80062ba <hagl_put_pixel+0x5c>
 8006280:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	8912      	ldrh	r2, [r2, #8]
 8006288:	4293      	cmp	r3, r2
 800628a:	db16      	blt.n	80062ba <hagl_put_pixel+0x5c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1)) {
 800628c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	8952      	ldrh	r2, [r2, #10]
 8006294:	4293      	cmp	r3, r2
 8006296:	dc12      	bgt.n	80062be <hagl_put_pixel+0x60>
 8006298:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	8992      	ldrh	r2, [r2, #12]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	dc0c      	bgt.n	80062be <hagl_put_pixel+0x60>
        return;
    }

    /* If still in bounds set the pixel. */
    surface->put_pixel(&surface, x0, y0, color);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	691c      	ldr	r4, [r3, #16]
 80062a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80062ac:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80062b0:	f107 0014 	add.w	r0, r7, #20
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	47a0      	blx	r4
 80062b8:	e002      	b.n	80062c0 <hagl_put_pixel+0x62>
        return;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <hagl_put_pixel+0x62>
        return;
 80062be:	bf00      	nop
}
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}

080062c6 <hagl_draw_hline>:
 * @param color
 */

static inline void
hagl_draw_hline(void const *surface, int16_t x0, int16_t y0, uint16_t width, hagl_color_t color)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	461a      	mov	r2, r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	817b      	strh	r3, [r7, #10]
 80062d8:	460b      	mov	r3, r1
 80062da:	813b      	strh	r3, [r7, #8]
 80062dc:	4613      	mov	r3, r2
 80062de:	80fb      	strh	r3, [r7, #6]
    hagl_draw_hline_xyw(surface, x0, y0, width, color);
 80062e0:	88f8      	ldrh	r0, [r7, #6]
 80062e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80062e6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	4603      	mov	r3, r0
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff fe8f 	bl	8006014 <hagl_draw_hline_xyw>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <hagl_fill_rectangle_xyxy>:
    hagl_draw_vline(surface, x1, y0, height, color);
}

void
hagl_fill_rectangle_xyxy(void const *_surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 80062fe:	b5b0      	push	{r4, r5, r7, lr}
 8006300:	b08a      	sub	sp, #40	@ 0x28
 8006302:	af02      	add	r7, sp, #8
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	4608      	mov	r0, r1
 8006308:	4611      	mov	r1, r2
 800630a:	461a      	mov	r2, r3
 800630c:	4603      	mov	r3, r0
 800630e:	817b      	strh	r3, [r7, #10]
 8006310:	460b      	mov	r3, r1
 8006312:	813b      	strh	r3, [r7, #8]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	617b      	str	r3, [r7, #20]

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800631c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006324:	429a      	cmp	r2, r3
 8006326:	dd0e      	ble.n	8006346 <hagl_fill_rectangle_xyxy+0x48>
        x0 = x0 + x1;
 8006328:	897a      	ldrh	r2, [r7, #10]
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	4413      	add	r3, r2
 800632e:	b29b      	uxth	r3, r3
 8006330:	817b      	strh	r3, [r7, #10]
        x1 = x0 - x1;
 8006332:	897a      	ldrh	r2, [r7, #10]
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	b29b      	uxth	r3, r3
 800633a:	80fb      	strh	r3, [r7, #6]
        x0 = x0 - x1;
 800633c:	897a      	ldrh	r2, [r7, #10]
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	b29b      	uxth	r3, r3
 8006344:	817b      	strh	r3, [r7, #10]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006346:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800634a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800634e:	429a      	cmp	r2, r3
 8006350:	dd0e      	ble.n	8006370 <hagl_fill_rectangle_xyxy+0x72>
        y0 = y0 + y1;
 8006352:	893a      	ldrh	r2, [r7, #8]
 8006354:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006356:	4413      	add	r3, r2
 8006358:	b29b      	uxth	r3, r3
 800635a:	813b      	strh	r3, [r7, #8]
        y1 = y0 - y1;
 800635c:	893a      	ldrh	r2, [r7, #8]
 800635e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	b29b      	uxth	r3, r3
 8006364:	863b      	strh	r3, [r7, #48]	@ 0x30
        y0 = y0 - y1;
 8006366:	893a      	ldrh	r2, [r7, #8]
 8006368:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	b29b      	uxth	r3, r3
 800636e:	813b      	strh	r3, [r7, #8]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < surface->clip.x0) || (y1 < surface->clip.y0))  {
 8006370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	88d2      	ldrh	r2, [r2, #6]
 8006378:	4293      	cmp	r3, r2
 800637a:	db6f      	blt.n	800645c <hagl_fill_rectangle_xyxy+0x15e>
 800637c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	8912      	ldrh	r2, [r2, #8]
 8006384:	4293      	cmp	r3, r2
 8006386:	db69      	blt.n	800645c <hagl_fill_rectangle_xyxy+0x15e>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1)) {
 8006388:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	8952      	ldrh	r2, [r2, #10]
 8006390:	4293      	cmp	r3, r2
 8006392:	dc65      	bgt.n	8006460 <hagl_fill_rectangle_xyxy+0x162>
 8006394:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	8992      	ldrh	r2, [r2, #12]
 800639c:	4293      	cmp	r3, r2
 800639e:	dc5f      	bgt.n	8006460 <hagl_fill_rectangle_xyxy+0x162>
        return;
    }

    x0 = MAX(x0, surface->clip.x0);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	88db      	ldrh	r3, [r3, #6]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80063aa:	4293      	cmp	r3, r2
 80063ac:	bfb8      	it	lt
 80063ae:	4613      	movlt	r3, r2
 80063b0:	817b      	strh	r3, [r7, #10]
    y0 = MAX(y0, surface->clip.y0);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	891b      	ldrh	r3, [r3, #8]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80063bc:	4293      	cmp	r3, r2
 80063be:	bfb8      	it	lt
 80063c0:	4613      	movlt	r3, r2
 80063c2:	813b      	strh	r3, [r7, #8]
    x1 = MIN(x1, surface->clip.x1);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	895b      	ldrh	r3, [r3, #10]
 80063c8:	461a      	mov	r2, r3
 80063ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bfa8      	it	ge
 80063d2:	4613      	movge	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
    y1 = MIN(y1, surface->clip.y1);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	899b      	ldrh	r3, [r3, #12]
 80063da:	461a      	mov	r2, r3
 80063dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80063e0:	4293      	cmp	r3, r2
 80063e2:	bfa8      	it	ge
 80063e4:	4613      	movge	r3, r2
 80063e6:	863b      	strh	r3, [r7, #48]	@ 0x30

    uint16_t width = x1 - x0 + 1;
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	897b      	ldrh	r3, [r7, #10]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	83bb      	strh	r3, [r7, #28]
    uint16_t height = y1 - y0 + 1;
 80063f4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80063f6:	893b      	ldrh	r3, [r7, #8]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3301      	adds	r3, #1
 80063fe:	837b      	strh	r3, [r7, #26]

    for (uint16_t i = 0; i < height; i++) {
 8006400:	2300      	movs	r3, #0
 8006402:	83fb      	strh	r3, [r7, #30]
 8006404:	e025      	b.n	8006452 <hagl_fill_rectangle_xyxy+0x154>
        if (surface->hline) {
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d010      	beq.n	8006430 <hagl_fill_rectangle_xyxy+0x132>
            /* Already clipped so can call HAL directly. */
            surface->hline(&surface, x0, y0 + i, width, color);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006412:	893a      	ldrh	r2, [r7, #8]
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	4413      	add	r3, r2
 8006418:	b29b      	uxth	r3, r3
 800641a:	b21a      	sxth	r2, r3
 800641c:	8bbd      	ldrh	r5, [r7, #28]
 800641e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006422:	f107 0014 	add.w	r0, r7, #20
 8006426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	462b      	mov	r3, r5
 800642c:	47a0      	blx	r4
 800642e:	e00d      	b.n	800644c <hagl_fill_rectangle_xyxy+0x14e>
        } else {
            hagl_draw_hline(surface, x0, y0 + i, width, color);
 8006430:	6978      	ldr	r0, [r7, #20]
 8006432:	893a      	ldrh	r2, [r7, #8]
 8006434:	8bfb      	ldrh	r3, [r7, #30]
 8006436:	4413      	add	r3, r2
 8006438:	b29b      	uxth	r3, r3
 800643a:	b21a      	sxth	r2, r3
 800643c:	8bbc      	ldrh	r4, [r7, #28]
 800643e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4623      	mov	r3, r4
 8006448:	f7ff ff3d 	bl	80062c6 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800644c:	8bfb      	ldrh	r3, [r7, #30]
 800644e:	3301      	adds	r3, #1
 8006450:	83fb      	strh	r3, [r7, #30]
 8006452:	8bfa      	ldrh	r2, [r7, #30]
 8006454:	8b7b      	ldrh	r3, [r7, #26]
 8006456:	429a      	cmp	r2, r3
 8006458:	d3d5      	bcc.n	8006406 <hagl_fill_rectangle_xyxy+0x108>
 800645a:	e002      	b.n	8006462 <hagl_fill_rectangle_xyxy+0x164>
        return;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <hagl_fill_rectangle_xyxy+0x164>
        return;
 8006460:	bf00      	nop
        }
    }
}
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bdb0      	pop	{r4, r5, r7, pc}

08006468 <rgb565>:

#include "rgb565.h"

uint16_t
rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	460b      	mov	r3, r1
 8006474:	71bb      	strb	r3, [r7, #6]
 8006476:	4613      	mov	r3, r2
 8006478:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	b21b      	sxth	r3, r3
 8006480:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006484:	f023 0307 	bic.w	r3, r3, #7
 8006488:	b21a      	sxth	r2, r3
 800648a:	79bb      	ldrb	r3, [r7, #6]
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	b21b      	sxth	r3, r3
 8006490:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8006494:	b21b      	sxth	r3, r3
 8006496:	4313      	orrs	r3, r2
 8006498:	b21a      	sxth	r2, r3
 800649a:	797b      	ldrb	r3, [r7, #5]
 800649c:	08db      	lsrs	r3, r3, #3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	b21b      	sxth	r3, r3
 80064a2:	4313      	orrs	r3, r2
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	b21a      	sxth	r2, r3
 80064ae:	89fb      	ldrh	r3, [r7, #14]
 80064b0:	0a1b      	lsrs	r3, r3, #8
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	b21b      	sxth	r3, r3
 80064b6:	4313      	orrs	r3, r2
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	81fb      	strh	r3, [r7, #14]

    return rgb;
 80064bc:	89fb      	ldrh	r3, [r7, #14]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <calloc>:
 80064cc:	4b02      	ldr	r3, [pc, #8]	@ (80064d8 <calloc+0xc>)
 80064ce:	460a      	mov	r2, r1
 80064d0:	4601      	mov	r1, r0
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	f000 b802 	b.w	80064dc <_calloc_r>
 80064d8:	20000018 	.word	0x20000018

080064dc <_calloc_r>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	fba1 5402 	umull	r5, r4, r1, r2
 80064e2:	b93c      	cbnz	r4, 80064f4 <_calloc_r+0x18>
 80064e4:	4629      	mov	r1, r5
 80064e6:	f000 f82f 	bl	8006548 <_malloc_r>
 80064ea:	4606      	mov	r6, r0
 80064ec:	b928      	cbnz	r0, 80064fa <_calloc_r+0x1e>
 80064ee:	2600      	movs	r6, #0
 80064f0:	4630      	mov	r0, r6
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	220c      	movs	r2, #12
 80064f6:	6002      	str	r2, [r0, #0]
 80064f8:	e7f9      	b.n	80064ee <_calloc_r+0x12>
 80064fa:	462a      	mov	r2, r5
 80064fc:	4621      	mov	r1, r4
 80064fe:	f000 feff 	bl	8007300 <memset>
 8006502:	e7f5      	b.n	80064f0 <_calloc_r+0x14>

08006504 <sbrk_aligned>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4e0f      	ldr	r6, [pc, #60]	@ (8006544 <sbrk_aligned+0x40>)
 8006508:	460c      	mov	r4, r1
 800650a:	6831      	ldr	r1, [r6, #0]
 800650c:	4605      	mov	r5, r0
 800650e:	b911      	cbnz	r1, 8006516 <sbrk_aligned+0x12>
 8006510:	f000 ff36 	bl	8007380 <_sbrk_r>
 8006514:	6030      	str	r0, [r6, #0]
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 ff31 	bl	8007380 <_sbrk_r>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d103      	bne.n	800652a <sbrk_aligned+0x26>
 8006522:	f04f 34ff 	mov.w	r4, #4294967295
 8006526:	4620      	mov	r0, r4
 8006528:	bd70      	pop	{r4, r5, r6, pc}
 800652a:	1cc4      	adds	r4, r0, #3
 800652c:	f024 0403 	bic.w	r4, r4, #3
 8006530:	42a0      	cmp	r0, r4
 8006532:	d0f8      	beq.n	8006526 <sbrk_aligned+0x22>
 8006534:	1a21      	subs	r1, r4, r0
 8006536:	4628      	mov	r0, r5
 8006538:	f000 ff22 	bl	8007380 <_sbrk_r>
 800653c:	3001      	adds	r0, #1
 800653e:	d1f2      	bne.n	8006526 <sbrk_aligned+0x22>
 8006540:	e7ef      	b.n	8006522 <sbrk_aligned+0x1e>
 8006542:	bf00      	nop
 8006544:	2000a334 	.word	0x2000a334

08006548 <_malloc_r>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	1ccd      	adds	r5, r1, #3
 800654e:	f025 0503 	bic.w	r5, r5, #3
 8006552:	3508      	adds	r5, #8
 8006554:	2d0c      	cmp	r5, #12
 8006556:	bf38      	it	cc
 8006558:	250c      	movcc	r5, #12
 800655a:	2d00      	cmp	r5, #0
 800655c:	4606      	mov	r6, r0
 800655e:	db01      	blt.n	8006564 <_malloc_r+0x1c>
 8006560:	42a9      	cmp	r1, r5
 8006562:	d904      	bls.n	800656e <_malloc_r+0x26>
 8006564:	230c      	movs	r3, #12
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	2000      	movs	r0, #0
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006644 <_malloc_r+0xfc>
 8006572:	f000 f869 	bl	8006648 <__malloc_lock>
 8006576:	f8d8 3000 	ldr.w	r3, [r8]
 800657a:	461c      	mov	r4, r3
 800657c:	bb44      	cbnz	r4, 80065d0 <_malloc_r+0x88>
 800657e:	4629      	mov	r1, r5
 8006580:	4630      	mov	r0, r6
 8006582:	f7ff ffbf 	bl	8006504 <sbrk_aligned>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	4604      	mov	r4, r0
 800658a:	d158      	bne.n	800663e <_malloc_r+0xf6>
 800658c:	f8d8 4000 	ldr.w	r4, [r8]
 8006590:	4627      	mov	r7, r4
 8006592:	2f00      	cmp	r7, #0
 8006594:	d143      	bne.n	800661e <_malloc_r+0xd6>
 8006596:	2c00      	cmp	r4, #0
 8006598:	d04b      	beq.n	8006632 <_malloc_r+0xea>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	4639      	mov	r1, r7
 800659e:	4630      	mov	r0, r6
 80065a0:	eb04 0903 	add.w	r9, r4, r3
 80065a4:	f000 feec 	bl	8007380 <_sbrk_r>
 80065a8:	4581      	cmp	r9, r0
 80065aa:	d142      	bne.n	8006632 <_malloc_r+0xea>
 80065ac:	6821      	ldr	r1, [r4, #0]
 80065ae:	1a6d      	subs	r5, r5, r1
 80065b0:	4629      	mov	r1, r5
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff ffa6 	bl	8006504 <sbrk_aligned>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d03a      	beq.n	8006632 <_malloc_r+0xea>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	442b      	add	r3, r5
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	f8d8 3000 	ldr.w	r3, [r8]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	bb62      	cbnz	r2, 8006624 <_malloc_r+0xdc>
 80065ca:	f8c8 7000 	str.w	r7, [r8]
 80065ce:	e00f      	b.n	80065f0 <_malloc_r+0xa8>
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	1b52      	subs	r2, r2, r5
 80065d4:	d420      	bmi.n	8006618 <_malloc_r+0xd0>
 80065d6:	2a0b      	cmp	r2, #11
 80065d8:	d917      	bls.n	800660a <_malloc_r+0xc2>
 80065da:	1961      	adds	r1, r4, r5
 80065dc:	42a3      	cmp	r3, r4
 80065de:	6025      	str	r5, [r4, #0]
 80065e0:	bf18      	it	ne
 80065e2:	6059      	strne	r1, [r3, #4]
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	bf08      	it	eq
 80065e8:	f8c8 1000 	streq.w	r1, [r8]
 80065ec:	5162      	str	r2, [r4, r5]
 80065ee:	604b      	str	r3, [r1, #4]
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f82f 	bl	8006654 <__malloc_unlock>
 80065f6:	f104 000b 	add.w	r0, r4, #11
 80065fa:	1d23      	adds	r3, r4, #4
 80065fc:	f020 0007 	bic.w	r0, r0, #7
 8006600:	1ac2      	subs	r2, r0, r3
 8006602:	bf1c      	itt	ne
 8006604:	1a1b      	subne	r3, r3, r0
 8006606:	50a3      	strne	r3, [r4, r2]
 8006608:	e7af      	b.n	800656a <_malloc_r+0x22>
 800660a:	6862      	ldr	r2, [r4, #4]
 800660c:	42a3      	cmp	r3, r4
 800660e:	bf0c      	ite	eq
 8006610:	f8c8 2000 	streq.w	r2, [r8]
 8006614:	605a      	strne	r2, [r3, #4]
 8006616:	e7eb      	b.n	80065f0 <_malloc_r+0xa8>
 8006618:	4623      	mov	r3, r4
 800661a:	6864      	ldr	r4, [r4, #4]
 800661c:	e7ae      	b.n	800657c <_malloc_r+0x34>
 800661e:	463c      	mov	r4, r7
 8006620:	687f      	ldr	r7, [r7, #4]
 8006622:	e7b6      	b.n	8006592 <_malloc_r+0x4a>
 8006624:	461a      	mov	r2, r3
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	42a3      	cmp	r3, r4
 800662a:	d1fb      	bne.n	8006624 <_malloc_r+0xdc>
 800662c:	2300      	movs	r3, #0
 800662e:	6053      	str	r3, [r2, #4]
 8006630:	e7de      	b.n	80065f0 <_malloc_r+0xa8>
 8006632:	230c      	movs	r3, #12
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	4630      	mov	r0, r6
 8006638:	f000 f80c 	bl	8006654 <__malloc_unlock>
 800663c:	e794      	b.n	8006568 <_malloc_r+0x20>
 800663e:	6005      	str	r5, [r0, #0]
 8006640:	e7d6      	b.n	80065f0 <_malloc_r+0xa8>
 8006642:	bf00      	nop
 8006644:	2000a338 	.word	0x2000a338

08006648 <__malloc_lock>:
 8006648:	4801      	ldr	r0, [pc, #4]	@ (8006650 <__malloc_lock+0x8>)
 800664a:	f000 bee6 	b.w	800741a <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	2000a47c 	.word	0x2000a47c

08006654 <__malloc_unlock>:
 8006654:	4801      	ldr	r0, [pc, #4]	@ (800665c <__malloc_unlock+0x8>)
 8006656:	f000 bee1 	b.w	800741c <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	2000a47c 	.word	0x2000a47c

08006660 <__cvt>:
 8006660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	ec57 6b10 	vmov	r6, r7, d0
 8006668:	2f00      	cmp	r7, #0
 800666a:	460c      	mov	r4, r1
 800666c:	4619      	mov	r1, r3
 800666e:	463b      	mov	r3, r7
 8006670:	bfbb      	ittet	lt
 8006672:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006676:	461f      	movlt	r7, r3
 8006678:	2300      	movge	r3, #0
 800667a:	232d      	movlt	r3, #45	@ 0x2d
 800667c:	700b      	strb	r3, [r1, #0]
 800667e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006680:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006684:	4691      	mov	r9, r2
 8006686:	f023 0820 	bic.w	r8, r3, #32
 800668a:	bfbc      	itt	lt
 800668c:	4632      	movlt	r2, r6
 800668e:	4616      	movlt	r6, r2
 8006690:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006694:	d005      	beq.n	80066a2 <__cvt+0x42>
 8006696:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800669a:	d100      	bne.n	800669e <__cvt+0x3e>
 800669c:	3401      	adds	r4, #1
 800669e:	2102      	movs	r1, #2
 80066a0:	e000      	b.n	80066a4 <__cvt+0x44>
 80066a2:	2103      	movs	r1, #3
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	ab02      	add	r3, sp, #8
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	ec47 6b10 	vmov	d0, r6, r7
 80066b0:	4653      	mov	r3, sl
 80066b2:	4622      	mov	r2, r4
 80066b4:	f000 ff4c 	bl	8007550 <_dtoa_r>
 80066b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066bc:	4605      	mov	r5, r0
 80066be:	d119      	bne.n	80066f4 <__cvt+0x94>
 80066c0:	f019 0f01 	tst.w	r9, #1
 80066c4:	d00e      	beq.n	80066e4 <__cvt+0x84>
 80066c6:	eb00 0904 	add.w	r9, r0, r4
 80066ca:	2200      	movs	r2, #0
 80066cc:	2300      	movs	r3, #0
 80066ce:	4630      	mov	r0, r6
 80066d0:	4639      	mov	r1, r7
 80066d2:	f7fa f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d6:	b108      	cbz	r0, 80066dc <__cvt+0x7c>
 80066d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80066dc:	2230      	movs	r2, #48	@ 0x30
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	454b      	cmp	r3, r9
 80066e2:	d31e      	bcc.n	8006722 <__cvt+0xc2>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066e8:	1b5b      	subs	r3, r3, r5
 80066ea:	4628      	mov	r0, r5
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	b004      	add	sp, #16
 80066f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066f8:	eb00 0904 	add.w	r9, r0, r4
 80066fc:	d1e5      	bne.n	80066ca <__cvt+0x6a>
 80066fe:	7803      	ldrb	r3, [r0, #0]
 8006700:	2b30      	cmp	r3, #48	@ 0x30
 8006702:	d10a      	bne.n	800671a <__cvt+0xba>
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	4630      	mov	r0, r6
 800670a:	4639      	mov	r1, r7
 800670c:	f7fa f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006710:	b918      	cbnz	r0, 800671a <__cvt+0xba>
 8006712:	f1c4 0401 	rsb	r4, r4, #1
 8006716:	f8ca 4000 	str.w	r4, [sl]
 800671a:	f8da 3000 	ldr.w	r3, [sl]
 800671e:	4499      	add	r9, r3
 8006720:	e7d3      	b.n	80066ca <__cvt+0x6a>
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	9103      	str	r1, [sp, #12]
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	e7d9      	b.n	80066de <__cvt+0x7e>

0800672a <__exponent>:
 800672a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800672c:	2900      	cmp	r1, #0
 800672e:	bfba      	itte	lt
 8006730:	4249      	neglt	r1, r1
 8006732:	232d      	movlt	r3, #45	@ 0x2d
 8006734:	232b      	movge	r3, #43	@ 0x2b
 8006736:	2909      	cmp	r1, #9
 8006738:	7002      	strb	r2, [r0, #0]
 800673a:	7043      	strb	r3, [r0, #1]
 800673c:	dd29      	ble.n	8006792 <__exponent+0x68>
 800673e:	f10d 0307 	add.w	r3, sp, #7
 8006742:	461d      	mov	r5, r3
 8006744:	270a      	movs	r7, #10
 8006746:	461a      	mov	r2, r3
 8006748:	fbb1 f6f7 	udiv	r6, r1, r7
 800674c:	fb07 1416 	mls	r4, r7, r6, r1
 8006750:	3430      	adds	r4, #48	@ 0x30
 8006752:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006756:	460c      	mov	r4, r1
 8006758:	2c63      	cmp	r4, #99	@ 0x63
 800675a:	f103 33ff 	add.w	r3, r3, #4294967295
 800675e:	4631      	mov	r1, r6
 8006760:	dcf1      	bgt.n	8006746 <__exponent+0x1c>
 8006762:	3130      	adds	r1, #48	@ 0x30
 8006764:	1e94      	subs	r4, r2, #2
 8006766:	f803 1c01 	strb.w	r1, [r3, #-1]
 800676a:	1c41      	adds	r1, r0, #1
 800676c:	4623      	mov	r3, r4
 800676e:	42ab      	cmp	r3, r5
 8006770:	d30a      	bcc.n	8006788 <__exponent+0x5e>
 8006772:	f10d 0309 	add.w	r3, sp, #9
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ac      	cmp	r4, r5
 800677a:	bf88      	it	hi
 800677c:	2300      	movhi	r3, #0
 800677e:	3302      	adds	r3, #2
 8006780:	4403      	add	r3, r0
 8006782:	1a18      	subs	r0, r3, r0
 8006784:	b003      	add	sp, #12
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	f813 6b01 	ldrb.w	r6, [r3], #1
 800678c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006790:	e7ed      	b.n	800676e <__exponent+0x44>
 8006792:	2330      	movs	r3, #48	@ 0x30
 8006794:	3130      	adds	r1, #48	@ 0x30
 8006796:	7083      	strb	r3, [r0, #2]
 8006798:	70c1      	strb	r1, [r0, #3]
 800679a:	1d03      	adds	r3, r0, #4
 800679c:	e7f1      	b.n	8006782 <__exponent+0x58>
	...

080067a0 <_printf_float>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	b08d      	sub	sp, #52	@ 0x34
 80067a6:	460c      	mov	r4, r1
 80067a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067ac:	4616      	mov	r6, r2
 80067ae:	461f      	mov	r7, r3
 80067b0:	4605      	mov	r5, r0
 80067b2:	f000 fdad 	bl	8007310 <_localeconv_r>
 80067b6:	6803      	ldr	r3, [r0, #0]
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7f9 fd58 	bl	8000270 <strlen>
 80067c0:	2300      	movs	r3, #0
 80067c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067c4:	f8d8 3000 	ldr.w	r3, [r8]
 80067c8:	9005      	str	r0, [sp, #20]
 80067ca:	3307      	adds	r3, #7
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	f103 0208 	add.w	r2, r3, #8
 80067d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80067d8:	f8d4 b000 	ldr.w	fp, [r4]
 80067dc:	f8c8 2000 	str.w	r2, [r8]
 80067e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80067e8:	9307      	str	r3, [sp, #28]
 80067ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80067ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80067f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006a68 <_printf_float+0x2c8>)
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	f7fa f996 	bl	8000b2c <__aeabi_dcmpun>
 8006800:	bb70      	cbnz	r0, 8006860 <_printf_float+0xc0>
 8006802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006806:	4b98      	ldr	r3, [pc, #608]	@ (8006a68 <_printf_float+0x2c8>)
 8006808:	f04f 32ff 	mov.w	r2, #4294967295
 800680c:	f7fa f970 	bl	8000af0 <__aeabi_dcmple>
 8006810:	bb30      	cbnz	r0, 8006860 <_printf_float+0xc0>
 8006812:	2200      	movs	r2, #0
 8006814:	2300      	movs	r3, #0
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7fa f95f 	bl	8000adc <__aeabi_dcmplt>
 800681e:	b110      	cbz	r0, 8006826 <_printf_float+0x86>
 8006820:	232d      	movs	r3, #45	@ 0x2d
 8006822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006826:	4a91      	ldr	r2, [pc, #580]	@ (8006a6c <_printf_float+0x2cc>)
 8006828:	4b91      	ldr	r3, [pc, #580]	@ (8006a70 <_printf_float+0x2d0>)
 800682a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800682e:	bf94      	ite	ls
 8006830:	4690      	movls	r8, r2
 8006832:	4698      	movhi	r8, r3
 8006834:	2303      	movs	r3, #3
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	f02b 0304 	bic.w	r3, fp, #4
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	f04f 0900 	mov.w	r9, #0
 8006842:	9700      	str	r7, [sp, #0]
 8006844:	4633      	mov	r3, r6
 8006846:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f9d2 	bl	8006bf4 <_printf_common>
 8006850:	3001      	adds	r0, #1
 8006852:	f040 808d 	bne.w	8006970 <_printf_float+0x1d0>
 8006856:	f04f 30ff 	mov.w	r0, #4294967295
 800685a:	b00d      	add	sp, #52	@ 0x34
 800685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006860:	4642      	mov	r2, r8
 8006862:	464b      	mov	r3, r9
 8006864:	4640      	mov	r0, r8
 8006866:	4649      	mov	r1, r9
 8006868:	f7fa f960 	bl	8000b2c <__aeabi_dcmpun>
 800686c:	b140      	cbz	r0, 8006880 <_printf_float+0xe0>
 800686e:	464b      	mov	r3, r9
 8006870:	2b00      	cmp	r3, #0
 8006872:	bfbc      	itt	lt
 8006874:	232d      	movlt	r3, #45	@ 0x2d
 8006876:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800687a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a74 <_printf_float+0x2d4>)
 800687c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a78 <_printf_float+0x2d8>)
 800687e:	e7d4      	b.n	800682a <_printf_float+0x8a>
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006886:	9206      	str	r2, [sp, #24]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	d13b      	bne.n	8006904 <_printf_float+0x164>
 800688c:	2306      	movs	r3, #6
 800688e:	6063      	str	r3, [r4, #4]
 8006890:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006894:	2300      	movs	r3, #0
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	ab0a      	add	r3, sp, #40	@ 0x28
 800689c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068a0:	ab09      	add	r3, sp, #36	@ 0x24
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	6861      	ldr	r1, [r4, #4]
 80068a6:	ec49 8b10 	vmov	d0, r8, r9
 80068aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068ae:	4628      	mov	r0, r5
 80068b0:	f7ff fed6 	bl	8006660 <__cvt>
 80068b4:	9b06      	ldr	r3, [sp, #24]
 80068b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068b8:	2b47      	cmp	r3, #71	@ 0x47
 80068ba:	4680      	mov	r8, r0
 80068bc:	d129      	bne.n	8006912 <_printf_float+0x172>
 80068be:	1cc8      	adds	r0, r1, #3
 80068c0:	db02      	blt.n	80068c8 <_printf_float+0x128>
 80068c2:	6863      	ldr	r3, [r4, #4]
 80068c4:	4299      	cmp	r1, r3
 80068c6:	dd41      	ble.n	800694c <_printf_float+0x1ac>
 80068c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80068cc:	fa5f fa8a 	uxtb.w	sl, sl
 80068d0:	3901      	subs	r1, #1
 80068d2:	4652      	mov	r2, sl
 80068d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80068d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80068da:	f7ff ff26 	bl	800672a <__exponent>
 80068de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068e0:	1813      	adds	r3, r2, r0
 80068e2:	2a01      	cmp	r2, #1
 80068e4:	4681      	mov	r9, r0
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	dc02      	bgt.n	80068f0 <_printf_float+0x150>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	07d2      	lsls	r2, r2, #31
 80068ee:	d501      	bpl.n	80068f4 <_printf_float+0x154>
 80068f0:	3301      	adds	r3, #1
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0a2      	beq.n	8006842 <_printf_float+0xa2>
 80068fc:	232d      	movs	r3, #45	@ 0x2d
 80068fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006902:	e79e      	b.n	8006842 <_printf_float+0xa2>
 8006904:	9a06      	ldr	r2, [sp, #24]
 8006906:	2a47      	cmp	r2, #71	@ 0x47
 8006908:	d1c2      	bne.n	8006890 <_printf_float+0xf0>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1c0      	bne.n	8006890 <_printf_float+0xf0>
 800690e:	2301      	movs	r3, #1
 8006910:	e7bd      	b.n	800688e <_printf_float+0xee>
 8006912:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006916:	d9db      	bls.n	80068d0 <_printf_float+0x130>
 8006918:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800691c:	d118      	bne.n	8006950 <_printf_float+0x1b0>
 800691e:	2900      	cmp	r1, #0
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	dd0b      	ble.n	800693c <_printf_float+0x19c>
 8006924:	6121      	str	r1, [r4, #16]
 8006926:	b913      	cbnz	r3, 800692e <_printf_float+0x18e>
 8006928:	6822      	ldr	r2, [r4, #0]
 800692a:	07d0      	lsls	r0, r2, #31
 800692c:	d502      	bpl.n	8006934 <_printf_float+0x194>
 800692e:	3301      	adds	r3, #1
 8006930:	440b      	add	r3, r1
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006936:	f04f 0900 	mov.w	r9, #0
 800693a:	e7db      	b.n	80068f4 <_printf_float+0x154>
 800693c:	b913      	cbnz	r3, 8006944 <_printf_float+0x1a4>
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	07d2      	lsls	r2, r2, #31
 8006942:	d501      	bpl.n	8006948 <_printf_float+0x1a8>
 8006944:	3302      	adds	r3, #2
 8006946:	e7f4      	b.n	8006932 <_printf_float+0x192>
 8006948:	2301      	movs	r3, #1
 800694a:	e7f2      	b.n	8006932 <_printf_float+0x192>
 800694c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006952:	4299      	cmp	r1, r3
 8006954:	db05      	blt.n	8006962 <_printf_float+0x1c2>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	6121      	str	r1, [r4, #16]
 800695a:	07d8      	lsls	r0, r3, #31
 800695c:	d5ea      	bpl.n	8006934 <_printf_float+0x194>
 800695e:	1c4b      	adds	r3, r1, #1
 8006960:	e7e7      	b.n	8006932 <_printf_float+0x192>
 8006962:	2900      	cmp	r1, #0
 8006964:	bfd4      	ite	le
 8006966:	f1c1 0202 	rsble	r2, r1, #2
 800696a:	2201      	movgt	r2, #1
 800696c:	4413      	add	r3, r2
 800696e:	e7e0      	b.n	8006932 <_printf_float+0x192>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	055a      	lsls	r2, r3, #21
 8006974:	d407      	bmi.n	8006986 <_printf_float+0x1e6>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	4642      	mov	r2, r8
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	d12b      	bne.n	80069dc <_printf_float+0x23c>
 8006984:	e767      	b.n	8006856 <_printf_float+0xb6>
 8006986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800698a:	f240 80dd 	bls.w	8006b48 <_printf_float+0x3a8>
 800698e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	f7fa f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800699a:	2800      	cmp	r0, #0
 800699c:	d033      	beq.n	8006a06 <_printf_float+0x266>
 800699e:	4a37      	ldr	r2, [pc, #220]	@ (8006a7c <_printf_float+0x2dc>)
 80069a0:	2301      	movs	r3, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f af54 	beq.w	8006856 <_printf_float+0xb6>
 80069ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069b2:	4543      	cmp	r3, r8
 80069b4:	db02      	blt.n	80069bc <_printf_float+0x21c>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	07d8      	lsls	r0, r3, #31
 80069ba:	d50f      	bpl.n	80069dc <_printf_float+0x23c>
 80069bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c0:	4631      	mov	r1, r6
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b8      	blx	r7
 80069c6:	3001      	adds	r0, #1
 80069c8:	f43f af45 	beq.w	8006856 <_printf_float+0xb6>
 80069cc:	f04f 0900 	mov.w	r9, #0
 80069d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80069d4:	f104 0a1a 	add.w	sl, r4, #26
 80069d8:	45c8      	cmp	r8, r9
 80069da:	dc09      	bgt.n	80069f0 <_printf_float+0x250>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	079b      	lsls	r3, r3, #30
 80069e0:	f100 8103 	bmi.w	8006bea <_printf_float+0x44a>
 80069e4:	68e0      	ldr	r0, [r4, #12]
 80069e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069e8:	4298      	cmp	r0, r3
 80069ea:	bfb8      	it	lt
 80069ec:	4618      	movlt	r0, r3
 80069ee:	e734      	b.n	800685a <_printf_float+0xba>
 80069f0:	2301      	movs	r3, #1
 80069f2:	4652      	mov	r2, sl
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f af2b 	beq.w	8006856 <_printf_float+0xb6>
 8006a00:	f109 0901 	add.w	r9, r9, #1
 8006a04:	e7e8      	b.n	80069d8 <_printf_float+0x238>
 8006a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc39      	bgt.n	8006a80 <_printf_float+0x2e0>
 8006a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a7c <_printf_float+0x2dc>)
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f af1d 	beq.w	8006856 <_printf_float+0xb6>
 8006a1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a20:	ea59 0303 	orrs.w	r3, r9, r3
 8006a24:	d102      	bne.n	8006a2c <_printf_float+0x28c>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	07d9      	lsls	r1, r3, #31
 8006a2a:	d5d7      	bpl.n	80069dc <_printf_float+0x23c>
 8006a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f af0d 	beq.w	8006856 <_printf_float+0xb6>
 8006a3c:	f04f 0a00 	mov.w	sl, #0
 8006a40:	f104 0b1a 	add.w	fp, r4, #26
 8006a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a46:	425b      	negs	r3, r3
 8006a48:	4553      	cmp	r3, sl
 8006a4a:	dc01      	bgt.n	8006a50 <_printf_float+0x2b0>
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	e793      	b.n	8006978 <_printf_float+0x1d8>
 8006a50:	2301      	movs	r3, #1
 8006a52:	465a      	mov	r2, fp
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f aefb 	beq.w	8006856 <_printf_float+0xb6>
 8006a60:	f10a 0a01 	add.w	sl, sl, #1
 8006a64:	e7ee      	b.n	8006a44 <_printf_float+0x2a4>
 8006a66:	bf00      	nop
 8006a68:	7fefffff 	.word	0x7fefffff
 8006a6c:	0800cda8 	.word	0x0800cda8
 8006a70:	0800cdac 	.word	0x0800cdac
 8006a74:	0800cdb0 	.word	0x0800cdb0
 8006a78:	0800cdb4 	.word	0x0800cdb4
 8006a7c:	0800cdb8 	.word	0x0800cdb8
 8006a80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a86:	4553      	cmp	r3, sl
 8006a88:	bfa8      	it	ge
 8006a8a:	4653      	movge	r3, sl
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	4699      	mov	r9, r3
 8006a90:	dc36      	bgt.n	8006b00 <_printf_float+0x360>
 8006a92:	f04f 0b00 	mov.w	fp, #0
 8006a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9a:	f104 021a 	add.w	r2, r4, #26
 8006a9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006aa0:	9306      	str	r3, [sp, #24]
 8006aa2:	eba3 0309 	sub.w	r3, r3, r9
 8006aa6:	455b      	cmp	r3, fp
 8006aa8:	dc31      	bgt.n	8006b0e <_printf_float+0x36e>
 8006aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aac:	459a      	cmp	sl, r3
 8006aae:	dc3a      	bgt.n	8006b26 <_printf_float+0x386>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	07da      	lsls	r2, r3, #31
 8006ab4:	d437      	bmi.n	8006b26 <_printf_float+0x386>
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	ebaa 0903 	sub.w	r9, sl, r3
 8006abc:	9b06      	ldr	r3, [sp, #24]
 8006abe:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac2:	4599      	cmp	r9, r3
 8006ac4:	bfa8      	it	ge
 8006ac6:	4699      	movge	r9, r3
 8006ac8:	f1b9 0f00 	cmp.w	r9, #0
 8006acc:	dc33      	bgt.n	8006b36 <_printf_float+0x396>
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ad6:	f104 0b1a 	add.w	fp, r4, #26
 8006ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006adc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ae0:	eba3 0309 	sub.w	r3, r3, r9
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	f77f af79 	ble.w	80069dc <_printf_float+0x23c>
 8006aea:	2301      	movs	r3, #1
 8006aec:	465a      	mov	r2, fp
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	f43f aeae 	beq.w	8006856 <_printf_float+0xb6>
 8006afa:	f108 0801 	add.w	r8, r8, #1
 8006afe:	e7ec      	b.n	8006ada <_printf_float+0x33a>
 8006b00:	4642      	mov	r2, r8
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d1c2      	bne.n	8006a92 <_printf_float+0x2f2>
 8006b0c:	e6a3      	b.n	8006856 <_printf_float+0xb6>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	9206      	str	r2, [sp, #24]
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae9c 	beq.w	8006856 <_printf_float+0xb6>
 8006b1e:	9a06      	ldr	r2, [sp, #24]
 8006b20:	f10b 0b01 	add.w	fp, fp, #1
 8006b24:	e7bb      	b.n	8006a9e <_printf_float+0x2fe>
 8006b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	d1c0      	bne.n	8006ab6 <_printf_float+0x316>
 8006b34:	e68f      	b.n	8006856 <_printf_float+0xb6>
 8006b36:	9a06      	ldr	r2, [sp, #24]
 8006b38:	464b      	mov	r3, r9
 8006b3a:	4442      	add	r2, r8
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	d1c3      	bne.n	8006ace <_printf_float+0x32e>
 8006b46:	e686      	b.n	8006856 <_printf_float+0xb6>
 8006b48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b4c:	f1ba 0f01 	cmp.w	sl, #1
 8006b50:	dc01      	bgt.n	8006b56 <_printf_float+0x3b6>
 8006b52:	07db      	lsls	r3, r3, #31
 8006b54:	d536      	bpl.n	8006bc4 <_printf_float+0x424>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4642      	mov	r2, r8
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	47b8      	blx	r7
 8006b60:	3001      	adds	r0, #1
 8006b62:	f43f ae78 	beq.w	8006856 <_printf_float+0xb6>
 8006b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	f43f ae70 	beq.w	8006856 <_printf_float+0xb6>
 8006b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b82:	f7f9 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b86:	b9c0      	cbnz	r0, 8006bba <_printf_float+0x41a>
 8006b88:	4653      	mov	r3, sl
 8006b8a:	f108 0201 	add.w	r2, r8, #1
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	d10c      	bne.n	8006bb2 <_printf_float+0x412>
 8006b98:	e65d      	b.n	8006856 <_printf_float+0xb6>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	465a      	mov	r2, fp
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f43f ae56 	beq.w	8006856 <_printf_float+0xb6>
 8006baa:	f108 0801 	add.w	r8, r8, #1
 8006bae:	45d0      	cmp	r8, sl
 8006bb0:	dbf3      	blt.n	8006b9a <_printf_float+0x3fa>
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bb8:	e6df      	b.n	800697a <_printf_float+0x1da>
 8006bba:	f04f 0800 	mov.w	r8, #0
 8006bbe:	f104 0b1a 	add.w	fp, r4, #26
 8006bc2:	e7f4      	b.n	8006bae <_printf_float+0x40e>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	e7e1      	b.n	8006b8e <_printf_float+0x3ee>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	464a      	mov	r2, r9
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f43f ae3e 	beq.w	8006856 <_printf_float+0xb6>
 8006bda:	f108 0801 	add.w	r8, r8, #1
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006be2:	1a5b      	subs	r3, r3, r1
 8006be4:	4543      	cmp	r3, r8
 8006be6:	dcf0      	bgt.n	8006bca <_printf_float+0x42a>
 8006be8:	e6fc      	b.n	80069e4 <_printf_float+0x244>
 8006bea:	f04f 0800 	mov.w	r8, #0
 8006bee:	f104 0919 	add.w	r9, r4, #25
 8006bf2:	e7f4      	b.n	8006bde <_printf_float+0x43e>

08006bf4 <_printf_common>:
 8006bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	4698      	mov	r8, r3
 8006bfc:	688a      	ldr	r2, [r1, #8]
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c04:	4293      	cmp	r3, r2
 8006c06:	bfb8      	it	lt
 8006c08:	4613      	movlt	r3, r2
 8006c0a:	6033      	str	r3, [r6, #0]
 8006c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c10:	4607      	mov	r7, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	b10a      	cbz	r2, 8006c1a <_printf_common+0x26>
 8006c16:	3301      	adds	r3, #1
 8006c18:	6033      	str	r3, [r6, #0]
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	0699      	lsls	r1, r3, #26
 8006c1e:	bf42      	ittt	mi
 8006c20:	6833      	ldrmi	r3, [r6, #0]
 8006c22:	3302      	addmi	r3, #2
 8006c24:	6033      	strmi	r3, [r6, #0]
 8006c26:	6825      	ldr	r5, [r4, #0]
 8006c28:	f015 0506 	ands.w	r5, r5, #6
 8006c2c:	d106      	bne.n	8006c3c <_printf_common+0x48>
 8006c2e:	f104 0a19 	add.w	sl, r4, #25
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	6832      	ldr	r2, [r6, #0]
 8006c36:	1a9b      	subs	r3, r3, r2
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dc26      	bgt.n	8006c8a <_printf_common+0x96>
 8006c3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c40:	6822      	ldr	r2, [r4, #0]
 8006c42:	3b00      	subs	r3, #0
 8006c44:	bf18      	it	ne
 8006c46:	2301      	movne	r3, #1
 8006c48:	0692      	lsls	r2, r2, #26
 8006c4a:	d42b      	bmi.n	8006ca4 <_printf_common+0xb0>
 8006c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c50:	4641      	mov	r1, r8
 8006c52:	4638      	mov	r0, r7
 8006c54:	47c8      	blx	r9
 8006c56:	3001      	adds	r0, #1
 8006c58:	d01e      	beq.n	8006c98 <_printf_common+0xa4>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	6922      	ldr	r2, [r4, #16]
 8006c5e:	f003 0306 	and.w	r3, r3, #6
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	bf02      	ittt	eq
 8006c66:	68e5      	ldreq	r5, [r4, #12]
 8006c68:	6833      	ldreq	r3, [r6, #0]
 8006c6a:	1aed      	subeq	r5, r5, r3
 8006c6c:	68a3      	ldr	r3, [r4, #8]
 8006c6e:	bf0c      	ite	eq
 8006c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c74:	2500      	movne	r5, #0
 8006c76:	4293      	cmp	r3, r2
 8006c78:	bfc4      	itt	gt
 8006c7a:	1a9b      	subgt	r3, r3, r2
 8006c7c:	18ed      	addgt	r5, r5, r3
 8006c7e:	2600      	movs	r6, #0
 8006c80:	341a      	adds	r4, #26
 8006c82:	42b5      	cmp	r5, r6
 8006c84:	d11a      	bne.n	8006cbc <_printf_common+0xc8>
 8006c86:	2000      	movs	r0, #0
 8006c88:	e008      	b.n	8006c9c <_printf_common+0xa8>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4652      	mov	r2, sl
 8006c8e:	4641      	mov	r1, r8
 8006c90:	4638      	mov	r0, r7
 8006c92:	47c8      	blx	r9
 8006c94:	3001      	adds	r0, #1
 8006c96:	d103      	bne.n	8006ca0 <_printf_common+0xac>
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca0:	3501      	adds	r5, #1
 8006ca2:	e7c6      	b.n	8006c32 <_printf_common+0x3e>
 8006ca4:	18e1      	adds	r1, r4, r3
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	2030      	movs	r0, #48	@ 0x30
 8006caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cae:	4422      	add	r2, r4
 8006cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cb8:	3302      	adds	r3, #2
 8006cba:	e7c7      	b.n	8006c4c <_printf_common+0x58>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	47c8      	blx	r9
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d0e6      	beq.n	8006c98 <_printf_common+0xa4>
 8006cca:	3601      	adds	r6, #1
 8006ccc:	e7d9      	b.n	8006c82 <_printf_common+0x8e>
	...

08006cd0 <_printf_i>:
 8006cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	7e0f      	ldrb	r7, [r1, #24]
 8006cd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cd8:	2f78      	cmp	r7, #120	@ 0x78
 8006cda:	4691      	mov	r9, r2
 8006cdc:	4680      	mov	r8, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	469a      	mov	sl, r3
 8006ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ce6:	d807      	bhi.n	8006cf8 <_printf_i+0x28>
 8006ce8:	2f62      	cmp	r7, #98	@ 0x62
 8006cea:	d80a      	bhi.n	8006d02 <_printf_i+0x32>
 8006cec:	2f00      	cmp	r7, #0
 8006cee:	f000 80d2 	beq.w	8006e96 <_printf_i+0x1c6>
 8006cf2:	2f58      	cmp	r7, #88	@ 0x58
 8006cf4:	f000 80b9 	beq.w	8006e6a <_printf_i+0x19a>
 8006cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d00:	e03a      	b.n	8006d78 <_printf_i+0xa8>
 8006d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d06:	2b15      	cmp	r3, #21
 8006d08:	d8f6      	bhi.n	8006cf8 <_printf_i+0x28>
 8006d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d10 <_printf_i+0x40>)
 8006d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d10:	08006d69 	.word	0x08006d69
 8006d14:	08006d7d 	.word	0x08006d7d
 8006d18:	08006cf9 	.word	0x08006cf9
 8006d1c:	08006cf9 	.word	0x08006cf9
 8006d20:	08006cf9 	.word	0x08006cf9
 8006d24:	08006cf9 	.word	0x08006cf9
 8006d28:	08006d7d 	.word	0x08006d7d
 8006d2c:	08006cf9 	.word	0x08006cf9
 8006d30:	08006cf9 	.word	0x08006cf9
 8006d34:	08006cf9 	.word	0x08006cf9
 8006d38:	08006cf9 	.word	0x08006cf9
 8006d3c:	08006e7d 	.word	0x08006e7d
 8006d40:	08006da7 	.word	0x08006da7
 8006d44:	08006e37 	.word	0x08006e37
 8006d48:	08006cf9 	.word	0x08006cf9
 8006d4c:	08006cf9 	.word	0x08006cf9
 8006d50:	08006e9f 	.word	0x08006e9f
 8006d54:	08006cf9 	.word	0x08006cf9
 8006d58:	08006da7 	.word	0x08006da7
 8006d5c:	08006cf9 	.word	0x08006cf9
 8006d60:	08006cf9 	.word	0x08006cf9
 8006d64:	08006e3f 	.word	0x08006e3f
 8006d68:	6833      	ldr	r3, [r6, #0]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6032      	str	r2, [r6, #0]
 8006d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e09d      	b.n	8006eb8 <_printf_i+0x1e8>
 8006d7c:	6833      	ldr	r3, [r6, #0]
 8006d7e:	6820      	ldr	r0, [r4, #0]
 8006d80:	1d19      	adds	r1, r3, #4
 8006d82:	6031      	str	r1, [r6, #0]
 8006d84:	0606      	lsls	r6, r0, #24
 8006d86:	d501      	bpl.n	8006d8c <_printf_i+0xbc>
 8006d88:	681d      	ldr	r5, [r3, #0]
 8006d8a:	e003      	b.n	8006d94 <_printf_i+0xc4>
 8006d8c:	0645      	lsls	r5, r0, #25
 8006d8e:	d5fb      	bpl.n	8006d88 <_printf_i+0xb8>
 8006d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	da03      	bge.n	8006da0 <_printf_i+0xd0>
 8006d98:	232d      	movs	r3, #45	@ 0x2d
 8006d9a:	426d      	negs	r5, r5
 8006d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006da0:	4859      	ldr	r0, [pc, #356]	@ (8006f08 <_printf_i+0x238>)
 8006da2:	230a      	movs	r3, #10
 8006da4:	e011      	b.n	8006dca <_printf_i+0xfa>
 8006da6:	6821      	ldr	r1, [r4, #0]
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	0608      	lsls	r0, r1, #24
 8006dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006db0:	d402      	bmi.n	8006db8 <_printf_i+0xe8>
 8006db2:	0649      	lsls	r1, r1, #25
 8006db4:	bf48      	it	mi
 8006db6:	b2ad      	uxthmi	r5, r5
 8006db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dba:	4853      	ldr	r0, [pc, #332]	@ (8006f08 <_printf_i+0x238>)
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	bf14      	ite	ne
 8006dc0:	230a      	movne	r3, #10
 8006dc2:	2308      	moveq	r3, #8
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dca:	6866      	ldr	r6, [r4, #4]
 8006dcc:	60a6      	str	r6, [r4, #8]
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	bfa2      	ittt	ge
 8006dd2:	6821      	ldrge	r1, [r4, #0]
 8006dd4:	f021 0104 	bicge.w	r1, r1, #4
 8006dd8:	6021      	strge	r1, [r4, #0]
 8006dda:	b90d      	cbnz	r5, 8006de0 <_printf_i+0x110>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	d04b      	beq.n	8006e78 <_printf_i+0x1a8>
 8006de0:	4616      	mov	r6, r2
 8006de2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006de6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dea:	5dc7      	ldrb	r7, [r0, r7]
 8006dec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006df0:	462f      	mov	r7, r5
 8006df2:	42bb      	cmp	r3, r7
 8006df4:	460d      	mov	r5, r1
 8006df6:	d9f4      	bls.n	8006de2 <_printf_i+0x112>
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d10b      	bne.n	8006e14 <_printf_i+0x144>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	07df      	lsls	r7, r3, #31
 8006e00:	d508      	bpl.n	8006e14 <_printf_i+0x144>
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	6861      	ldr	r1, [r4, #4]
 8006e06:	4299      	cmp	r1, r3
 8006e08:	bfde      	ittt	le
 8006e0a:	2330      	movle	r3, #48	@ 0x30
 8006e0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e14:	1b92      	subs	r2, r2, r6
 8006e16:	6122      	str	r2, [r4, #16]
 8006e18:	f8cd a000 	str.w	sl, [sp]
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	aa03      	add	r2, sp, #12
 8006e20:	4621      	mov	r1, r4
 8006e22:	4640      	mov	r0, r8
 8006e24:	f7ff fee6 	bl	8006bf4 <_printf_common>
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d14a      	bne.n	8006ec2 <_printf_i+0x1f2>
 8006e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e30:	b004      	add	sp, #16
 8006e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	f043 0320 	orr.w	r3, r3, #32
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	4833      	ldr	r0, [pc, #204]	@ (8006f0c <_printf_i+0x23c>)
 8006e40:	2778      	movs	r7, #120	@ 0x78
 8006e42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	6831      	ldr	r1, [r6, #0]
 8006e4a:	061f      	lsls	r7, r3, #24
 8006e4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e50:	d402      	bmi.n	8006e58 <_printf_i+0x188>
 8006e52:	065f      	lsls	r7, r3, #25
 8006e54:	bf48      	it	mi
 8006e56:	b2ad      	uxthmi	r5, r5
 8006e58:	6031      	str	r1, [r6, #0]
 8006e5a:	07d9      	lsls	r1, r3, #31
 8006e5c:	bf44      	itt	mi
 8006e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e62:	6023      	strmi	r3, [r4, #0]
 8006e64:	b11d      	cbz	r5, 8006e6e <_printf_i+0x19e>
 8006e66:	2310      	movs	r3, #16
 8006e68:	e7ac      	b.n	8006dc4 <_printf_i+0xf4>
 8006e6a:	4827      	ldr	r0, [pc, #156]	@ (8006f08 <_printf_i+0x238>)
 8006e6c:	e7e9      	b.n	8006e42 <_printf_i+0x172>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f023 0320 	bic.w	r3, r3, #32
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	e7f6      	b.n	8006e66 <_printf_i+0x196>
 8006e78:	4616      	mov	r6, r2
 8006e7a:	e7bd      	b.n	8006df8 <_printf_i+0x128>
 8006e7c:	6833      	ldr	r3, [r6, #0]
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	6961      	ldr	r1, [r4, #20]
 8006e82:	1d18      	adds	r0, r3, #4
 8006e84:	6030      	str	r0, [r6, #0]
 8006e86:	062e      	lsls	r6, r5, #24
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	d501      	bpl.n	8006e90 <_printf_i+0x1c0>
 8006e8c:	6019      	str	r1, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <_printf_i+0x1c6>
 8006e90:	0668      	lsls	r0, r5, #25
 8006e92:	d5fb      	bpl.n	8006e8c <_printf_i+0x1bc>
 8006e94:	8019      	strh	r1, [r3, #0]
 8006e96:	2300      	movs	r3, #0
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	4616      	mov	r6, r2
 8006e9c:	e7bc      	b.n	8006e18 <_printf_i+0x148>
 8006e9e:	6833      	ldr	r3, [r6, #0]
 8006ea0:	1d1a      	adds	r2, r3, #4
 8006ea2:	6032      	str	r2, [r6, #0]
 8006ea4:	681e      	ldr	r6, [r3, #0]
 8006ea6:	6862      	ldr	r2, [r4, #4]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7f9 f990 	bl	80001d0 <memchr>
 8006eb0:	b108      	cbz	r0, 8006eb6 <_printf_i+0x1e6>
 8006eb2:	1b80      	subs	r0, r0, r6
 8006eb4:	6060      	str	r0, [r4, #4]
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ec0:	e7aa      	b.n	8006e18 <_printf_i+0x148>
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	47d0      	blx	sl
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d0ad      	beq.n	8006e2c <_printf_i+0x15c>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	079b      	lsls	r3, r3, #30
 8006ed4:	d413      	bmi.n	8006efe <_printf_i+0x22e>
 8006ed6:	68e0      	ldr	r0, [r4, #12]
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	4298      	cmp	r0, r3
 8006edc:	bfb8      	it	lt
 8006ede:	4618      	movlt	r0, r3
 8006ee0:	e7a6      	b.n	8006e30 <_printf_i+0x160>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4640      	mov	r0, r8
 8006eea:	47d0      	blx	sl
 8006eec:	3001      	adds	r0, #1
 8006eee:	d09d      	beq.n	8006e2c <_printf_i+0x15c>
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	9903      	ldr	r1, [sp, #12]
 8006ef6:	1a5b      	subs	r3, r3, r1
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dcf2      	bgt.n	8006ee2 <_printf_i+0x212>
 8006efc:	e7eb      	b.n	8006ed6 <_printf_i+0x206>
 8006efe:	2500      	movs	r5, #0
 8006f00:	f104 0619 	add.w	r6, r4, #25
 8006f04:	e7f5      	b.n	8006ef2 <_printf_i+0x222>
 8006f06:	bf00      	nop
 8006f08:	0800cdba 	.word	0x0800cdba
 8006f0c:	0800cdcb 	.word	0x0800cdcb

08006f10 <__sflush_r>:
 8006f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f18:	0716      	lsls	r6, r2, #28
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	d454      	bmi.n	8006fca <__sflush_r+0xba>
 8006f20:	684b      	ldr	r3, [r1, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dc02      	bgt.n	8006f2c <__sflush_r+0x1c>
 8006f26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dd48      	ble.n	8006fbe <__sflush_r+0xae>
 8006f2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	d045      	beq.n	8006fbe <__sflush_r+0xae>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f38:	682f      	ldr	r7, [r5, #0]
 8006f3a:	6a21      	ldr	r1, [r4, #32]
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	d030      	beq.n	8006fa2 <__sflush_r+0x92>
 8006f40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	0759      	lsls	r1, r3, #29
 8006f46:	d505      	bpl.n	8006f54 <__sflush_r+0x44>
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f4e:	b10b      	cbz	r3, 8006f54 <__sflush_r+0x44>
 8006f50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f58:	6a21      	ldr	r1, [r4, #32]
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	47b0      	blx	r6
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	d106      	bne.n	8006f72 <__sflush_r+0x62>
 8006f64:	6829      	ldr	r1, [r5, #0]
 8006f66:	291d      	cmp	r1, #29
 8006f68:	d82b      	bhi.n	8006fc2 <__sflush_r+0xb2>
 8006f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007014 <__sflush_r+0x104>)
 8006f6c:	410a      	asrs	r2, r1
 8006f6e:	07d6      	lsls	r6, r2, #31
 8006f70:	d427      	bmi.n	8006fc2 <__sflush_r+0xb2>
 8006f72:	2200      	movs	r2, #0
 8006f74:	6062      	str	r2, [r4, #4]
 8006f76:	04d9      	lsls	r1, r3, #19
 8006f78:	6922      	ldr	r2, [r4, #16]
 8006f7a:	6022      	str	r2, [r4, #0]
 8006f7c:	d504      	bpl.n	8006f88 <__sflush_r+0x78>
 8006f7e:	1c42      	adds	r2, r0, #1
 8006f80:	d101      	bne.n	8006f86 <__sflush_r+0x76>
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	b903      	cbnz	r3, 8006f88 <__sflush_r+0x78>
 8006f86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f8a:	602f      	str	r7, [r5, #0]
 8006f8c:	b1b9      	cbz	r1, 8006fbe <__sflush_r+0xae>
 8006f8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f92:	4299      	cmp	r1, r3
 8006f94:	d002      	beq.n	8006f9c <__sflush_r+0x8c>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f001 f89e 	bl	80080d8 <_free_r>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fa0:	e00d      	b.n	8006fbe <__sflush_r+0xae>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b0      	blx	r6
 8006fa8:	4602      	mov	r2, r0
 8006faa:	1c50      	adds	r0, r2, #1
 8006fac:	d1c9      	bne.n	8006f42 <__sflush_r+0x32>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0c6      	beq.n	8006f42 <__sflush_r+0x32>
 8006fb4:	2b1d      	cmp	r3, #29
 8006fb6:	d001      	beq.n	8006fbc <__sflush_r+0xac>
 8006fb8:	2b16      	cmp	r3, #22
 8006fba:	d11e      	bne.n	8006ffa <__sflush_r+0xea>
 8006fbc:	602f      	str	r7, [r5, #0]
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e022      	b.n	8007008 <__sflush_r+0xf8>
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fc6:	b21b      	sxth	r3, r3
 8006fc8:	e01b      	b.n	8007002 <__sflush_r+0xf2>
 8006fca:	690f      	ldr	r7, [r1, #16]
 8006fcc:	2f00      	cmp	r7, #0
 8006fce:	d0f6      	beq.n	8006fbe <__sflush_r+0xae>
 8006fd0:	0793      	lsls	r3, r2, #30
 8006fd2:	680e      	ldr	r6, [r1, #0]
 8006fd4:	bf08      	it	eq
 8006fd6:	694b      	ldreq	r3, [r1, #20]
 8006fd8:	600f      	str	r7, [r1, #0]
 8006fda:	bf18      	it	ne
 8006fdc:	2300      	movne	r3, #0
 8006fde:	eba6 0807 	sub.w	r8, r6, r7
 8006fe2:	608b      	str	r3, [r1, #8]
 8006fe4:	f1b8 0f00 	cmp.w	r8, #0
 8006fe8:	dde9      	ble.n	8006fbe <__sflush_r+0xae>
 8006fea:	6a21      	ldr	r1, [r4, #32]
 8006fec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fee:	4643      	mov	r3, r8
 8006ff0:	463a      	mov	r2, r7
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b0      	blx	r6
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	dc08      	bgt.n	800700c <__sflush_r+0xfc>
 8006ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	4407      	add	r7, r0
 800700e:	eba8 0800 	sub.w	r8, r8, r0
 8007012:	e7e7      	b.n	8006fe4 <__sflush_r+0xd4>
 8007014:	dfbffffe 	.word	0xdfbffffe

08007018 <_fflush_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	690b      	ldr	r3, [r1, #16]
 800701c:	4605      	mov	r5, r0
 800701e:	460c      	mov	r4, r1
 8007020:	b913      	cbnz	r3, 8007028 <_fflush_r+0x10>
 8007022:	2500      	movs	r5, #0
 8007024:	4628      	mov	r0, r5
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	b118      	cbz	r0, 8007032 <_fflush_r+0x1a>
 800702a:	6a03      	ldr	r3, [r0, #32]
 800702c:	b90b      	cbnz	r3, 8007032 <_fflush_r+0x1a>
 800702e:	f000 f8a7 	bl	8007180 <__sinit>
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f3      	beq.n	8007022 <_fflush_r+0xa>
 800703a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800703c:	07d0      	lsls	r0, r2, #31
 800703e:	d404      	bmi.n	800704a <_fflush_r+0x32>
 8007040:	0599      	lsls	r1, r3, #22
 8007042:	d402      	bmi.n	800704a <_fflush_r+0x32>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f000 f9e8 	bl	800741a <__retarget_lock_acquire_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	4621      	mov	r1, r4
 800704e:	f7ff ff5f 	bl	8006f10 <__sflush_r>
 8007052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007054:	07da      	lsls	r2, r3, #31
 8007056:	4605      	mov	r5, r0
 8007058:	d4e4      	bmi.n	8007024 <_fflush_r+0xc>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	059b      	lsls	r3, r3, #22
 800705e:	d4e1      	bmi.n	8007024 <_fflush_r+0xc>
 8007060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007062:	f000 f9db 	bl	800741c <__retarget_lock_release_recursive>
 8007066:	e7dd      	b.n	8007024 <_fflush_r+0xc>

08007068 <std>:
 8007068:	2300      	movs	r3, #0
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	e9c0 3300 	strd	r3, r3, [r0]
 8007072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007076:	6083      	str	r3, [r0, #8]
 8007078:	8181      	strh	r1, [r0, #12]
 800707a:	6643      	str	r3, [r0, #100]	@ 0x64
 800707c:	81c2      	strh	r2, [r0, #14]
 800707e:	6183      	str	r3, [r0, #24]
 8007080:	4619      	mov	r1, r3
 8007082:	2208      	movs	r2, #8
 8007084:	305c      	adds	r0, #92	@ 0x5c
 8007086:	f000 f93b 	bl	8007300 <memset>
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <std+0x58>)
 800708c:	6263      	str	r3, [r4, #36]	@ 0x24
 800708e:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <std+0x5c>)
 8007090:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <std+0x60>)
 8007094:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <std+0x64>)
 8007098:	6323      	str	r3, [r4, #48]	@ 0x30
 800709a:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <std+0x68>)
 800709c:	6224      	str	r4, [r4, #32]
 800709e:	429c      	cmp	r4, r3
 80070a0:	d006      	beq.n	80070b0 <std+0x48>
 80070a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070a6:	4294      	cmp	r4, r2
 80070a8:	d002      	beq.n	80070b0 <std+0x48>
 80070aa:	33d0      	adds	r3, #208	@ 0xd0
 80070ac:	429c      	cmp	r4, r3
 80070ae:	d105      	bne.n	80070bc <std+0x54>
 80070b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b8:	f000 b9ae 	b.w	8007418 <__retarget_lock_init_recursive>
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	bf00      	nop
 80070c0:	08007211 	.word	0x08007211
 80070c4:	08007233 	.word	0x08007233
 80070c8:	0800726b 	.word	0x0800726b
 80070cc:	0800728f 	.word	0x0800728f
 80070d0:	2000a33c 	.word	0x2000a33c

080070d4 <stdio_exit_handler>:
 80070d4:	4a02      	ldr	r2, [pc, #8]	@ (80070e0 <stdio_exit_handler+0xc>)
 80070d6:	4903      	ldr	r1, [pc, #12]	@ (80070e4 <stdio_exit_handler+0x10>)
 80070d8:	4803      	ldr	r0, [pc, #12]	@ (80070e8 <stdio_exit_handler+0x14>)
 80070da:	f000 b869 	b.w	80071b0 <_fwalk_sglue>
 80070de:	bf00      	nop
 80070e0:	2000000c 	.word	0x2000000c
 80070e4:	08007019 	.word	0x08007019
 80070e8:	2000001c 	.word	0x2000001c

080070ec <cleanup_stdio>:
 80070ec:	6841      	ldr	r1, [r0, #4]
 80070ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007120 <cleanup_stdio+0x34>)
 80070f0:	4299      	cmp	r1, r3
 80070f2:	b510      	push	{r4, lr}
 80070f4:	4604      	mov	r4, r0
 80070f6:	d001      	beq.n	80070fc <cleanup_stdio+0x10>
 80070f8:	f7ff ff8e 	bl	8007018 <_fflush_r>
 80070fc:	68a1      	ldr	r1, [r4, #8]
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <cleanup_stdio+0x38>)
 8007100:	4299      	cmp	r1, r3
 8007102:	d002      	beq.n	800710a <cleanup_stdio+0x1e>
 8007104:	4620      	mov	r0, r4
 8007106:	f7ff ff87 	bl	8007018 <_fflush_r>
 800710a:	68e1      	ldr	r1, [r4, #12]
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <cleanup_stdio+0x3c>)
 800710e:	4299      	cmp	r1, r3
 8007110:	d004      	beq.n	800711c <cleanup_stdio+0x30>
 8007112:	4620      	mov	r0, r4
 8007114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007118:	f7ff bf7e 	b.w	8007018 <_fflush_r>
 800711c:	bd10      	pop	{r4, pc}
 800711e:	bf00      	nop
 8007120:	2000a33c 	.word	0x2000a33c
 8007124:	2000a3a4 	.word	0x2000a3a4
 8007128:	2000a40c 	.word	0x2000a40c

0800712c <global_stdio_init.part.0>:
 800712c:	b510      	push	{r4, lr}
 800712e:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <global_stdio_init.part.0+0x30>)
 8007130:	4c0b      	ldr	r4, [pc, #44]	@ (8007160 <global_stdio_init.part.0+0x34>)
 8007132:	4a0c      	ldr	r2, [pc, #48]	@ (8007164 <global_stdio_init.part.0+0x38>)
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	4620      	mov	r0, r4
 8007138:	2200      	movs	r2, #0
 800713a:	2104      	movs	r1, #4
 800713c:	f7ff ff94 	bl	8007068 <std>
 8007140:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007144:	2201      	movs	r2, #1
 8007146:	2109      	movs	r1, #9
 8007148:	f7ff ff8e 	bl	8007068 <std>
 800714c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007150:	2202      	movs	r2, #2
 8007152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007156:	2112      	movs	r1, #18
 8007158:	f7ff bf86 	b.w	8007068 <std>
 800715c:	2000a474 	.word	0x2000a474
 8007160:	2000a33c 	.word	0x2000a33c
 8007164:	080070d5 	.word	0x080070d5

08007168 <__sfp_lock_acquire>:
 8007168:	4801      	ldr	r0, [pc, #4]	@ (8007170 <__sfp_lock_acquire+0x8>)
 800716a:	f000 b956 	b.w	800741a <__retarget_lock_acquire_recursive>
 800716e:	bf00      	nop
 8007170:	2000a47d 	.word	0x2000a47d

08007174 <__sfp_lock_release>:
 8007174:	4801      	ldr	r0, [pc, #4]	@ (800717c <__sfp_lock_release+0x8>)
 8007176:	f000 b951 	b.w	800741c <__retarget_lock_release_recursive>
 800717a:	bf00      	nop
 800717c:	2000a47d 	.word	0x2000a47d

08007180 <__sinit>:
 8007180:	b510      	push	{r4, lr}
 8007182:	4604      	mov	r4, r0
 8007184:	f7ff fff0 	bl	8007168 <__sfp_lock_acquire>
 8007188:	6a23      	ldr	r3, [r4, #32]
 800718a:	b11b      	cbz	r3, 8007194 <__sinit+0x14>
 800718c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007190:	f7ff bff0 	b.w	8007174 <__sfp_lock_release>
 8007194:	4b04      	ldr	r3, [pc, #16]	@ (80071a8 <__sinit+0x28>)
 8007196:	6223      	str	r3, [r4, #32]
 8007198:	4b04      	ldr	r3, [pc, #16]	@ (80071ac <__sinit+0x2c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f5      	bne.n	800718c <__sinit+0xc>
 80071a0:	f7ff ffc4 	bl	800712c <global_stdio_init.part.0>
 80071a4:	e7f2      	b.n	800718c <__sinit+0xc>
 80071a6:	bf00      	nop
 80071a8:	080070ed 	.word	0x080070ed
 80071ac:	2000a474 	.word	0x2000a474

080071b0 <_fwalk_sglue>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	4607      	mov	r7, r0
 80071b6:	4688      	mov	r8, r1
 80071b8:	4614      	mov	r4, r2
 80071ba:	2600      	movs	r6, #0
 80071bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071c0:	f1b9 0901 	subs.w	r9, r9, #1
 80071c4:	d505      	bpl.n	80071d2 <_fwalk_sglue+0x22>
 80071c6:	6824      	ldr	r4, [r4, #0]
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d1f7      	bne.n	80071bc <_fwalk_sglue+0xc>
 80071cc:	4630      	mov	r0, r6
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d907      	bls.n	80071e8 <_fwalk_sglue+0x38>
 80071d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071dc:	3301      	adds	r3, #1
 80071de:	d003      	beq.n	80071e8 <_fwalk_sglue+0x38>
 80071e0:	4629      	mov	r1, r5
 80071e2:	4638      	mov	r0, r7
 80071e4:	47c0      	blx	r8
 80071e6:	4306      	orrs	r6, r0
 80071e8:	3568      	adds	r5, #104	@ 0x68
 80071ea:	e7e9      	b.n	80071c0 <_fwalk_sglue+0x10>

080071ec <iprintf>:
 80071ec:	b40f      	push	{r0, r1, r2, r3}
 80071ee:	b507      	push	{r0, r1, r2, lr}
 80071f0:	4906      	ldr	r1, [pc, #24]	@ (800720c <iprintf+0x20>)
 80071f2:	ab04      	add	r3, sp, #16
 80071f4:	6808      	ldr	r0, [r1, #0]
 80071f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fa:	6881      	ldr	r1, [r0, #8]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	f001 fb69 	bl	80088d4 <_vfiprintf_r>
 8007202:	b003      	add	sp, #12
 8007204:	f85d eb04 	ldr.w	lr, [sp], #4
 8007208:	b004      	add	sp, #16
 800720a:	4770      	bx	lr
 800720c:	20000018 	.word	0x20000018

08007210 <__sread>:
 8007210:	b510      	push	{r4, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	f000 f8a0 	bl	800735c <_read_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	bfab      	itete	ge
 8007220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007222:	89a3      	ldrhlt	r3, [r4, #12]
 8007224:	181b      	addge	r3, r3, r0
 8007226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800722a:	bfac      	ite	ge
 800722c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800722e:	81a3      	strhlt	r3, [r4, #12]
 8007230:	bd10      	pop	{r4, pc}

08007232 <__swrite>:
 8007232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	461f      	mov	r7, r3
 8007238:	898b      	ldrh	r3, [r1, #12]
 800723a:	05db      	lsls	r3, r3, #23
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	4616      	mov	r6, r2
 8007242:	d505      	bpl.n	8007250 <__swrite+0x1e>
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	2302      	movs	r3, #2
 800724a:	2200      	movs	r2, #0
 800724c:	f000 f874 	bl	8007338 <_lseek_r>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	4632      	mov	r2, r6
 800725e:	463b      	mov	r3, r7
 8007260:	4628      	mov	r0, r5
 8007262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	f000 b89b 	b.w	80073a0 <_write_r>

0800726a <__sseek>:
 800726a:	b510      	push	{r4, lr}
 800726c:	460c      	mov	r4, r1
 800726e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007272:	f000 f861 	bl	8007338 <_lseek_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	bf15      	itete	ne
 800727c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800727e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007286:	81a3      	strheq	r3, [r4, #12]
 8007288:	bf18      	it	ne
 800728a:	81a3      	strhne	r3, [r4, #12]
 800728c:	bd10      	pop	{r4, pc}

0800728e <__sclose>:
 800728e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007292:	f000 b841 	b.w	8007318 <_close_r>
	...

08007298 <swprintf>:
 8007298:	b40c      	push	{r2, r3}
 800729a:	b530      	push	{r4, r5, lr}
 800729c:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <swprintf+0x64>)
 800729e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80072a2:	681d      	ldr	r5, [r3, #0]
 80072a4:	b09d      	sub	sp, #116	@ 0x74
 80072a6:	460c      	mov	r4, r1
 80072a8:	d216      	bcs.n	80072d8 <swprintf+0x40>
 80072aa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072ae:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072b2:	9002      	str	r0, [sp, #8]
 80072b4:	9006      	str	r0, [sp, #24]
 80072b6:	b1c1      	cbz	r1, 80072ea <swprintf+0x52>
 80072b8:	1e4b      	subs	r3, r1, #1
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072ca:	ab21      	add	r3, sp, #132	@ 0x84
 80072cc:	a902      	add	r1, sp, #8
 80072ce:	4628      	mov	r0, r5
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	f001 fcf1 	bl	8008cb8 <_svfwprintf_r>
 80072d6:	b954      	cbnz	r4, 80072ee <swprintf+0x56>
 80072d8:	238b      	movs	r3, #139	@ 0x8b
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	b01d      	add	sp, #116	@ 0x74
 80072e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e6:	b002      	add	sp, #8
 80072e8:	4770      	bx	lr
 80072ea:	460b      	mov	r3, r1
 80072ec:	e7e6      	b.n	80072bc <swprintf+0x24>
 80072ee:	9b02      	ldr	r3, [sp, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	42a0      	cmp	r0, r4
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	d3f3      	bcc.n	80072e0 <swprintf+0x48>
 80072f8:	e7ee      	b.n	80072d8 <swprintf+0x40>
 80072fa:	bf00      	nop
 80072fc:	20000018 	.word	0x20000018

08007300 <memset>:
 8007300:	4402      	add	r2, r0
 8007302:	4603      	mov	r3, r0
 8007304:	4293      	cmp	r3, r2
 8007306:	d100      	bne.n	800730a <memset+0xa>
 8007308:	4770      	bx	lr
 800730a:	f803 1b01 	strb.w	r1, [r3], #1
 800730e:	e7f9      	b.n	8007304 <memset+0x4>

08007310 <_localeconv_r>:
 8007310:	4800      	ldr	r0, [pc, #0]	@ (8007314 <_localeconv_r+0x4>)
 8007312:	4770      	bx	lr
 8007314:	20000158 	.word	0x20000158

08007318 <_close_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d06      	ldr	r5, [pc, #24]	@ (8007334 <_close_r+0x1c>)
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	f7fa fb47 	bl	80019b6 <_close>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_close_r+0x1a>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_close_r+0x1a>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	2000a478 	.word	0x2000a478

08007338 <_lseek_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d07      	ldr	r5, [pc, #28]	@ (8007358 <_lseek_r+0x20>)
 800733c:	4604      	mov	r4, r0
 800733e:	4608      	mov	r0, r1
 8007340:	4611      	mov	r1, r2
 8007342:	2200      	movs	r2, #0
 8007344:	602a      	str	r2, [r5, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	f7fa fb5c 	bl	8001a04 <_lseek>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_lseek_r+0x1e>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	b103      	cbz	r3, 8007356 <_lseek_r+0x1e>
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	2000a478 	.word	0x2000a478

0800735c <_read_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d07      	ldr	r5, [pc, #28]	@ (800737c <_read_r+0x20>)
 8007360:	4604      	mov	r4, r0
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	2200      	movs	r2, #0
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	f7fa faea 	bl	8001944 <_read>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_read_r+0x1e>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_read_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	2000a478 	.word	0x2000a478

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	@ (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7fa fb48 	bl	8001a20 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	2000a478 	.word	0x2000a478

080073a0 <_write_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d07      	ldr	r5, [pc, #28]	@ (80073c0 <_write_r+0x20>)
 80073a4:	4604      	mov	r4, r0
 80073a6:	4608      	mov	r0, r1
 80073a8:	4611      	mov	r1, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	602a      	str	r2, [r5, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f7fa fae5 	bl	800197e <_write>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_write_r+0x1e>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_write_r+0x1e>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	2000a478 	.word	0x2000a478

080073c4 <__errno>:
 80073c4:	4b01      	ldr	r3, [pc, #4]	@ (80073cc <__errno+0x8>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000018 	.word	0x20000018

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	@ (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007414 <__libc_init_array+0x44>)
 80073e4:	f002 fc32 	bl	8009c4c <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	0800d2cc 	.word	0x0800d2cc
 800740c:	0800d2cc 	.word	0x0800d2cc
 8007410:	0800d2cc 	.word	0x0800d2cc
 8007414:	0800d2d0 	.word	0x0800d2d0

08007418 <__retarget_lock_init_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_acquire_recursive>:
 800741a:	4770      	bx	lr

0800741c <__retarget_lock_release_recursive>:
 800741c:	4770      	bx	lr

0800741e <memcpy>:
 800741e:	440a      	add	r2, r1
 8007420:	4291      	cmp	r1, r2
 8007422:	f100 33ff 	add.w	r3, r0, #4294967295
 8007426:	d100      	bne.n	800742a <memcpy+0xc>
 8007428:	4770      	bx	lr
 800742a:	b510      	push	{r4, lr}
 800742c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007434:	4291      	cmp	r1, r2
 8007436:	d1f9      	bne.n	800742c <memcpy+0xe>
 8007438:	bd10      	pop	{r4, pc}

0800743a <quorem>:
 800743a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743e:	6903      	ldr	r3, [r0, #16]
 8007440:	690c      	ldr	r4, [r1, #16]
 8007442:	42a3      	cmp	r3, r4
 8007444:	4607      	mov	r7, r0
 8007446:	db7e      	blt.n	8007546 <quorem+0x10c>
 8007448:	3c01      	subs	r4, #1
 800744a:	f101 0814 	add.w	r8, r1, #20
 800744e:	00a3      	lsls	r3, r4, #2
 8007450:	f100 0514 	add.w	r5, r0, #20
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007464:	3301      	adds	r3, #1
 8007466:	429a      	cmp	r2, r3
 8007468:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800746c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007470:	d32e      	bcc.n	80074d0 <quorem+0x96>
 8007472:	f04f 0a00 	mov.w	sl, #0
 8007476:	46c4      	mov	ip, r8
 8007478:	46ae      	mov	lr, r5
 800747a:	46d3      	mov	fp, sl
 800747c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007480:	b298      	uxth	r0, r3
 8007482:	fb06 a000 	mla	r0, r6, r0, sl
 8007486:	0c02      	lsrs	r2, r0, #16
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	fb06 2303 	mla	r3, r6, r3, r2
 800748e:	f8de 2000 	ldr.w	r2, [lr]
 8007492:	b280      	uxth	r0, r0
 8007494:	b292      	uxth	r2, r2
 8007496:	1a12      	subs	r2, r2, r0
 8007498:	445a      	add	r2, fp
 800749a:	f8de 0000 	ldr.w	r0, [lr]
 800749e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80074a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074ac:	b292      	uxth	r2, r2
 80074ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80074b2:	45e1      	cmp	r9, ip
 80074b4:	f84e 2b04 	str.w	r2, [lr], #4
 80074b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80074bc:	d2de      	bcs.n	800747c <quorem+0x42>
 80074be:	9b00      	ldr	r3, [sp, #0]
 80074c0:	58eb      	ldr	r3, [r5, r3]
 80074c2:	b92b      	cbnz	r3, 80074d0 <quorem+0x96>
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	3b04      	subs	r3, #4
 80074c8:	429d      	cmp	r5, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	d32f      	bcc.n	800752e <quorem+0xf4>
 80074ce:	613c      	str	r4, [r7, #16]
 80074d0:	4638      	mov	r0, r7
 80074d2:	f001 f8cd 	bl	8008670 <__mcmp>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	db25      	blt.n	8007526 <quorem+0xec>
 80074da:	4629      	mov	r1, r5
 80074dc:	2000      	movs	r0, #0
 80074de:	f858 2b04 	ldr.w	r2, [r8], #4
 80074e2:	f8d1 c000 	ldr.w	ip, [r1]
 80074e6:	fa1f fe82 	uxth.w	lr, r2
 80074ea:	fa1f f38c 	uxth.w	r3, ip
 80074ee:	eba3 030e 	sub.w	r3, r3, lr
 80074f2:	4403      	add	r3, r0
 80074f4:	0c12      	lsrs	r2, r2, #16
 80074f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80074fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80074fe:	b29b      	uxth	r3, r3
 8007500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007504:	45c1      	cmp	r9, r8
 8007506:	f841 3b04 	str.w	r3, [r1], #4
 800750a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800750e:	d2e6      	bcs.n	80074de <quorem+0xa4>
 8007510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007518:	b922      	cbnz	r2, 8007524 <quorem+0xea>
 800751a:	3b04      	subs	r3, #4
 800751c:	429d      	cmp	r5, r3
 800751e:	461a      	mov	r2, r3
 8007520:	d30b      	bcc.n	800753a <quorem+0x100>
 8007522:	613c      	str	r4, [r7, #16]
 8007524:	3601      	adds	r6, #1
 8007526:	4630      	mov	r0, r6
 8007528:	b003      	add	sp, #12
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	6812      	ldr	r2, [r2, #0]
 8007530:	3b04      	subs	r3, #4
 8007532:	2a00      	cmp	r2, #0
 8007534:	d1cb      	bne.n	80074ce <quorem+0x94>
 8007536:	3c01      	subs	r4, #1
 8007538:	e7c6      	b.n	80074c8 <quorem+0x8e>
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	3b04      	subs	r3, #4
 800753e:	2a00      	cmp	r2, #0
 8007540:	d1ef      	bne.n	8007522 <quorem+0xe8>
 8007542:	3c01      	subs	r4, #1
 8007544:	e7ea      	b.n	800751c <quorem+0xe2>
 8007546:	2000      	movs	r0, #0
 8007548:	e7ee      	b.n	8007528 <quorem+0xee>
 800754a:	0000      	movs	r0, r0
 800754c:	0000      	movs	r0, r0
	...

08007550 <_dtoa_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	69c7      	ldr	r7, [r0, #28]
 8007556:	b099      	sub	sp, #100	@ 0x64
 8007558:	ed8d 0b02 	vstr	d0, [sp, #8]
 800755c:	ec55 4b10 	vmov	r4, r5, d0
 8007560:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007562:	9109      	str	r1, [sp, #36]	@ 0x24
 8007564:	4683      	mov	fp, r0
 8007566:	920e      	str	r2, [sp, #56]	@ 0x38
 8007568:	9313      	str	r3, [sp, #76]	@ 0x4c
 800756a:	b97f      	cbnz	r7, 800758c <_dtoa_r+0x3c>
 800756c:	2010      	movs	r0, #16
 800756e:	f000 fdfd 	bl	800816c <malloc>
 8007572:	4602      	mov	r2, r0
 8007574:	f8cb 001c 	str.w	r0, [fp, #28]
 8007578:	b920      	cbnz	r0, 8007584 <_dtoa_r+0x34>
 800757a:	4ba7      	ldr	r3, [pc, #668]	@ (8007818 <_dtoa_r+0x2c8>)
 800757c:	21ef      	movs	r1, #239	@ 0xef
 800757e:	48a7      	ldr	r0, [pc, #668]	@ (800781c <_dtoa_r+0x2cc>)
 8007580:	f002 f9ec 	bl	800995c <__assert_func>
 8007584:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007588:	6007      	str	r7, [r0, #0]
 800758a:	60c7      	str	r7, [r0, #12]
 800758c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007590:	6819      	ldr	r1, [r3, #0]
 8007592:	b159      	cbz	r1, 80075ac <_dtoa_r+0x5c>
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	604a      	str	r2, [r1, #4]
 8007598:	2301      	movs	r3, #1
 800759a:	4093      	lsls	r3, r2
 800759c:	608b      	str	r3, [r1, #8]
 800759e:	4658      	mov	r0, fp
 80075a0:	f000 fe2c 	bl	80081fc <_Bfree>
 80075a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	1e2b      	subs	r3, r5, #0
 80075ae:	bfb9      	ittee	lt
 80075b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80075b4:	9303      	strlt	r3, [sp, #12]
 80075b6:	2300      	movge	r3, #0
 80075b8:	6033      	strge	r3, [r6, #0]
 80075ba:	9f03      	ldr	r7, [sp, #12]
 80075bc:	4b98      	ldr	r3, [pc, #608]	@ (8007820 <_dtoa_r+0x2d0>)
 80075be:	bfbc      	itt	lt
 80075c0:	2201      	movlt	r2, #1
 80075c2:	6032      	strlt	r2, [r6, #0]
 80075c4:	43bb      	bics	r3, r7
 80075c6:	d112      	bne.n	80075ee <_dtoa_r+0x9e>
 80075c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075d4:	4323      	orrs	r3, r4
 80075d6:	f000 854d 	beq.w	8008074 <_dtoa_r+0xb24>
 80075da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007834 <_dtoa_r+0x2e4>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 854f 	beq.w	8008084 <_dtoa_r+0xb34>
 80075e6:	f10a 0303 	add.w	r3, sl, #3
 80075ea:	f000 bd49 	b.w	8008080 <_dtoa_r+0xb30>
 80075ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	ec51 0b17 	vmov	r0, r1, d7
 80075f8:	2300      	movs	r3, #0
 80075fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80075fe:	f7f9 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007602:	4680      	mov	r8, r0
 8007604:	b158      	cbz	r0, 800761e <_dtoa_r+0xce>
 8007606:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007608:	2301      	movs	r3, #1
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800760e:	b113      	cbz	r3, 8007616 <_dtoa_r+0xc6>
 8007610:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007612:	4b84      	ldr	r3, [pc, #528]	@ (8007824 <_dtoa_r+0x2d4>)
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007838 <_dtoa_r+0x2e8>
 800761a:	f000 bd33 	b.w	8008084 <_dtoa_r+0xb34>
 800761e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007622:	aa16      	add	r2, sp, #88	@ 0x58
 8007624:	a917      	add	r1, sp, #92	@ 0x5c
 8007626:	4658      	mov	r0, fp
 8007628:	f001 f8d2 	bl	80087d0 <__d2b>
 800762c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007630:	4681      	mov	r9, r0
 8007632:	2e00      	cmp	r6, #0
 8007634:	d077      	beq.n	8007726 <_dtoa_r+0x1d6>
 8007636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007638:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800763c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007644:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007648:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800764c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007650:	4619      	mov	r1, r3
 8007652:	2200      	movs	r2, #0
 8007654:	4b74      	ldr	r3, [pc, #464]	@ (8007828 <_dtoa_r+0x2d8>)
 8007656:	f7f8 fe17 	bl	8000288 <__aeabi_dsub>
 800765a:	a369      	add	r3, pc, #420	@ (adr r3, 8007800 <_dtoa_r+0x2b0>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f8 ffca 	bl	80005f8 <__aeabi_dmul>
 8007664:	a368      	add	r3, pc, #416	@ (adr r3, 8007808 <_dtoa_r+0x2b8>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f7f8 fe0f 	bl	800028c <__adddf3>
 800766e:	4604      	mov	r4, r0
 8007670:	4630      	mov	r0, r6
 8007672:	460d      	mov	r5, r1
 8007674:	f7f8 ff56 	bl	8000524 <__aeabi_i2d>
 8007678:	a365      	add	r3, pc, #404	@ (adr r3, 8007810 <_dtoa_r+0x2c0>)
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f7f8 ffbb 	bl	80005f8 <__aeabi_dmul>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f8 fdff 	bl	800028c <__adddf3>
 800768e:	4604      	mov	r4, r0
 8007690:	460d      	mov	r5, r1
 8007692:	f7f9 fa61 	bl	8000b58 <__aeabi_d2iz>
 8007696:	2200      	movs	r2, #0
 8007698:	4607      	mov	r7, r0
 800769a:	2300      	movs	r3, #0
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f7f9 fa1c 	bl	8000adc <__aeabi_dcmplt>
 80076a4:	b140      	cbz	r0, 80076b8 <_dtoa_r+0x168>
 80076a6:	4638      	mov	r0, r7
 80076a8:	f7f8 ff3c 	bl	8000524 <__aeabi_i2d>
 80076ac:	4622      	mov	r2, r4
 80076ae:	462b      	mov	r3, r5
 80076b0:	f7f9 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b4:	b900      	cbnz	r0, 80076b8 <_dtoa_r+0x168>
 80076b6:	3f01      	subs	r7, #1
 80076b8:	2f16      	cmp	r7, #22
 80076ba:	d851      	bhi.n	8007760 <_dtoa_r+0x210>
 80076bc:	4b5b      	ldr	r3, [pc, #364]	@ (800782c <_dtoa_r+0x2dc>)
 80076be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076ca:	f7f9 fa07 	bl	8000adc <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d048      	beq.n	8007764 <_dtoa_r+0x214>
 80076d2:	3f01      	subs	r7, #1
 80076d4:	2300      	movs	r3, #0
 80076d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80076d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076da:	1b9b      	subs	r3, r3, r6
 80076dc:	1e5a      	subs	r2, r3, #1
 80076de:	bf44      	itt	mi
 80076e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80076e4:	2300      	movmi	r3, #0
 80076e6:	9208      	str	r2, [sp, #32]
 80076e8:	bf54      	ite	pl
 80076ea:	f04f 0800 	movpl.w	r8, #0
 80076ee:	9308      	strmi	r3, [sp, #32]
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	db39      	blt.n	8007768 <_dtoa_r+0x218>
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80076f8:	443b      	add	r3, r7
 80076fa:	9308      	str	r3, [sp, #32]
 80076fc:	2300      	movs	r3, #0
 80076fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007702:	2b09      	cmp	r3, #9
 8007704:	d864      	bhi.n	80077d0 <_dtoa_r+0x280>
 8007706:	2b05      	cmp	r3, #5
 8007708:	bfc4      	itt	gt
 800770a:	3b04      	subgt	r3, #4
 800770c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800770e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007710:	f1a3 0302 	sub.w	r3, r3, #2
 8007714:	bfcc      	ite	gt
 8007716:	2400      	movgt	r4, #0
 8007718:	2401      	movle	r4, #1
 800771a:	2b03      	cmp	r3, #3
 800771c:	d863      	bhi.n	80077e6 <_dtoa_r+0x296>
 800771e:	e8df f003 	tbb	[pc, r3]
 8007722:	372a      	.short	0x372a
 8007724:	5535      	.short	0x5535
 8007726:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800772a:	441e      	add	r6, r3
 800772c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007730:	2b20      	cmp	r3, #32
 8007732:	bfc1      	itttt	gt
 8007734:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007738:	409f      	lslgt	r7, r3
 800773a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800773e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007742:	bfd6      	itet	le
 8007744:	f1c3 0320 	rsble	r3, r3, #32
 8007748:	ea47 0003 	orrgt.w	r0, r7, r3
 800774c:	fa04 f003 	lslle.w	r0, r4, r3
 8007750:	f7f8 fed8 	bl	8000504 <__aeabi_ui2d>
 8007754:	2201      	movs	r2, #1
 8007756:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800775a:	3e01      	subs	r6, #1
 800775c:	9214      	str	r2, [sp, #80]	@ 0x50
 800775e:	e777      	b.n	8007650 <_dtoa_r+0x100>
 8007760:	2301      	movs	r3, #1
 8007762:	e7b8      	b.n	80076d6 <_dtoa_r+0x186>
 8007764:	9012      	str	r0, [sp, #72]	@ 0x48
 8007766:	e7b7      	b.n	80076d8 <_dtoa_r+0x188>
 8007768:	427b      	negs	r3, r7
 800776a:	930a      	str	r3, [sp, #40]	@ 0x28
 800776c:	2300      	movs	r3, #0
 800776e:	eba8 0807 	sub.w	r8, r8, r7
 8007772:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007774:	e7c4      	b.n	8007700 <_dtoa_r+0x1b0>
 8007776:	2300      	movs	r3, #0
 8007778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800777a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800777c:	2b00      	cmp	r3, #0
 800777e:	dc35      	bgt.n	80077ec <_dtoa_r+0x29c>
 8007780:	2301      	movs	r3, #1
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	461a      	mov	r2, r3
 8007788:	920e      	str	r2, [sp, #56]	@ 0x38
 800778a:	e00b      	b.n	80077a4 <_dtoa_r+0x254>
 800778c:	2301      	movs	r3, #1
 800778e:	e7f3      	b.n	8007778 <_dtoa_r+0x228>
 8007790:	2300      	movs	r3, #0
 8007792:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	2b01      	cmp	r3, #1
 800779e:	9307      	str	r3, [sp, #28]
 80077a0:	bfb8      	it	lt
 80077a2:	2301      	movlt	r3, #1
 80077a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80077a8:	2100      	movs	r1, #0
 80077aa:	2204      	movs	r2, #4
 80077ac:	f102 0514 	add.w	r5, r2, #20
 80077b0:	429d      	cmp	r5, r3
 80077b2:	d91f      	bls.n	80077f4 <_dtoa_r+0x2a4>
 80077b4:	6041      	str	r1, [r0, #4]
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 fce0 	bl	800817c <_Balloc>
 80077bc:	4682      	mov	sl, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	d13c      	bne.n	800783c <_dtoa_r+0x2ec>
 80077c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007830 <_dtoa_r+0x2e0>)
 80077c4:	4602      	mov	r2, r0
 80077c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80077ca:	e6d8      	b.n	800757e <_dtoa_r+0x2e>
 80077cc:	2301      	movs	r3, #1
 80077ce:	e7e0      	b.n	8007792 <_dtoa_r+0x242>
 80077d0:	2401      	movs	r4, #1
 80077d2:	2300      	movs	r3, #0
 80077d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077d8:	f04f 33ff 	mov.w	r3, #4294967295
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	9307      	str	r3, [sp, #28]
 80077e0:	2200      	movs	r2, #0
 80077e2:	2312      	movs	r3, #18
 80077e4:	e7d0      	b.n	8007788 <_dtoa_r+0x238>
 80077e6:	2301      	movs	r3, #1
 80077e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077ea:	e7f5      	b.n	80077d8 <_dtoa_r+0x288>
 80077ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	9307      	str	r3, [sp, #28]
 80077f2:	e7d7      	b.n	80077a4 <_dtoa_r+0x254>
 80077f4:	3101      	adds	r1, #1
 80077f6:	0052      	lsls	r2, r2, #1
 80077f8:	e7d8      	b.n	80077ac <_dtoa_r+0x25c>
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w
 8007800:	636f4361 	.word	0x636f4361
 8007804:	3fd287a7 	.word	0x3fd287a7
 8007808:	8b60c8b3 	.word	0x8b60c8b3
 800780c:	3fc68a28 	.word	0x3fc68a28
 8007810:	509f79fb 	.word	0x509f79fb
 8007814:	3fd34413 	.word	0x3fd34413
 8007818:	0800cde9 	.word	0x0800cde9
 800781c:	0800ce00 	.word	0x0800ce00
 8007820:	7ff00000 	.word	0x7ff00000
 8007824:	0800cdb9 	.word	0x0800cdb9
 8007828:	3ff80000 	.word	0x3ff80000
 800782c:	0800cef8 	.word	0x0800cef8
 8007830:	0800ce58 	.word	0x0800ce58
 8007834:	0800cde5 	.word	0x0800cde5
 8007838:	0800cdb8 	.word	0x0800cdb8
 800783c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	9b07      	ldr	r3, [sp, #28]
 8007844:	2b0e      	cmp	r3, #14
 8007846:	f200 80a4 	bhi.w	8007992 <_dtoa_r+0x442>
 800784a:	2c00      	cmp	r4, #0
 800784c:	f000 80a1 	beq.w	8007992 <_dtoa_r+0x442>
 8007850:	2f00      	cmp	r7, #0
 8007852:	dd33      	ble.n	80078bc <_dtoa_r+0x36c>
 8007854:	4bad      	ldr	r3, [pc, #692]	@ (8007b0c <_dtoa_r+0x5bc>)
 8007856:	f007 020f 	and.w	r2, r7, #15
 800785a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800785e:	ed93 7b00 	vldr	d7, [r3]
 8007862:	05f8      	lsls	r0, r7, #23
 8007864:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007868:	ea4f 1427 	mov.w	r4, r7, asr #4
 800786c:	d516      	bpl.n	800789c <_dtoa_r+0x34c>
 800786e:	4ba8      	ldr	r3, [pc, #672]	@ (8007b10 <_dtoa_r+0x5c0>)
 8007870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007878:	f7f8 ffe8 	bl	800084c <__aeabi_ddiv>
 800787c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007880:	f004 040f 	and.w	r4, r4, #15
 8007884:	2603      	movs	r6, #3
 8007886:	4da2      	ldr	r5, [pc, #648]	@ (8007b10 <_dtoa_r+0x5c0>)
 8007888:	b954      	cbnz	r4, 80078a0 <_dtoa_r+0x350>
 800788a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800788e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007892:	f7f8 ffdb 	bl	800084c <__aeabi_ddiv>
 8007896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800789a:	e028      	b.n	80078ee <_dtoa_r+0x39e>
 800789c:	2602      	movs	r6, #2
 800789e:	e7f2      	b.n	8007886 <_dtoa_r+0x336>
 80078a0:	07e1      	lsls	r1, r4, #31
 80078a2:	d508      	bpl.n	80078b6 <_dtoa_r+0x366>
 80078a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078ac:	f7f8 fea4 	bl	80005f8 <__aeabi_dmul>
 80078b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078b4:	3601      	adds	r6, #1
 80078b6:	1064      	asrs	r4, r4, #1
 80078b8:	3508      	adds	r5, #8
 80078ba:	e7e5      	b.n	8007888 <_dtoa_r+0x338>
 80078bc:	f000 80d2 	beq.w	8007a64 <_dtoa_r+0x514>
 80078c0:	427c      	negs	r4, r7
 80078c2:	4b92      	ldr	r3, [pc, #584]	@ (8007b0c <_dtoa_r+0x5bc>)
 80078c4:	4d92      	ldr	r5, [pc, #584]	@ (8007b10 <_dtoa_r+0x5c0>)
 80078c6:	f004 020f 	and.w	r2, r4, #15
 80078ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078d6:	f7f8 fe8f 	bl	80005f8 <__aeabi_dmul>
 80078da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078de:	1124      	asrs	r4, r4, #4
 80078e0:	2300      	movs	r3, #0
 80078e2:	2602      	movs	r6, #2
 80078e4:	2c00      	cmp	r4, #0
 80078e6:	f040 80b2 	bne.w	8007a4e <_dtoa_r+0x4fe>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1d3      	bne.n	8007896 <_dtoa_r+0x346>
 80078ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 80b7 	beq.w	8007a68 <_dtoa_r+0x518>
 80078fa:	4b86      	ldr	r3, [pc, #536]	@ (8007b14 <_dtoa_r+0x5c4>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	f000 80ae 	beq.w	8007a68 <_dtoa_r+0x518>
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80aa 	beq.w	8007a68 <_dtoa_r+0x518>
 8007914:	9b00      	ldr	r3, [sp, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	dd37      	ble.n	800798a <_dtoa_r+0x43a>
 800791a:	1e7b      	subs	r3, r7, #1
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	4620      	mov	r0, r4
 8007920:	4b7d      	ldr	r3, [pc, #500]	@ (8007b18 <_dtoa_r+0x5c8>)
 8007922:	2200      	movs	r2, #0
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 fe67 	bl	80005f8 <__aeabi_dmul>
 800792a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800792e:	9c00      	ldr	r4, [sp, #0]
 8007930:	3601      	adds	r6, #1
 8007932:	4630      	mov	r0, r6
 8007934:	f7f8 fdf6 	bl	8000524 <__aeabi_i2d>
 8007938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800793c:	f7f8 fe5c 	bl	80005f8 <__aeabi_dmul>
 8007940:	4b76      	ldr	r3, [pc, #472]	@ (8007b1c <_dtoa_r+0x5cc>)
 8007942:	2200      	movs	r2, #0
 8007944:	f7f8 fca2 	bl	800028c <__adddf3>
 8007948:	4605      	mov	r5, r0
 800794a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800794e:	2c00      	cmp	r4, #0
 8007950:	f040 808d 	bne.w	8007a6e <_dtoa_r+0x51e>
 8007954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007958:	4b71      	ldr	r3, [pc, #452]	@ (8007b20 <_dtoa_r+0x5d0>)
 800795a:	2200      	movs	r2, #0
 800795c:	f7f8 fc94 	bl	8000288 <__aeabi_dsub>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007968:	462a      	mov	r2, r5
 800796a:	4633      	mov	r3, r6
 800796c:	f7f9 f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 8007970:	2800      	cmp	r0, #0
 8007972:	f040 828b 	bne.w	8007e8c <_dtoa_r+0x93c>
 8007976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797a:	462a      	mov	r2, r5
 800797c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007980:	f7f9 f8ac 	bl	8000adc <__aeabi_dcmplt>
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 8128 	bne.w	8007bda <_dtoa_r+0x68a>
 800798a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800798e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007992:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f2c0 815a 	blt.w	8007c4e <_dtoa_r+0x6fe>
 800799a:	2f0e      	cmp	r7, #14
 800799c:	f300 8157 	bgt.w	8007c4e <_dtoa_r+0x6fe>
 80079a0:	4b5a      	ldr	r3, [pc, #360]	@ (8007b0c <_dtoa_r+0x5bc>)
 80079a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079a6:	ed93 7b00 	vldr	d7, [r3]
 80079aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	ed8d 7b00 	vstr	d7, [sp]
 80079b2:	da03      	bge.n	80079bc <_dtoa_r+0x46c>
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f340 8101 	ble.w	8007bbe <_dtoa_r+0x66e>
 80079bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079c0:	4656      	mov	r6, sl
 80079c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079c6:	4620      	mov	r0, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	f7f8 ff3f 	bl	800084c <__aeabi_ddiv>
 80079ce:	f7f9 f8c3 	bl	8000b58 <__aeabi_d2iz>
 80079d2:	4680      	mov	r8, r0
 80079d4:	f7f8 fda6 	bl	8000524 <__aeabi_i2d>
 80079d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079dc:	f7f8 fe0c 	bl	80005f8 <__aeabi_dmul>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4620      	mov	r0, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80079ec:	f7f8 fc4c 	bl	8000288 <__aeabi_dsub>
 80079f0:	f806 4b01 	strb.w	r4, [r6], #1
 80079f4:	9d07      	ldr	r5, [sp, #28]
 80079f6:	eba6 040a 	sub.w	r4, r6, sl
 80079fa:	42a5      	cmp	r5, r4
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	f040 8117 	bne.w	8007c32 <_dtoa_r+0x6e2>
 8007a04:	f7f8 fc42 	bl	800028c <__adddf3>
 8007a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	460d      	mov	r5, r1
 8007a10:	f7f9 f882 	bl	8000b18 <__aeabi_dcmpgt>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f040 80f9 	bne.w	8007c0c <_dtoa_r+0x6bc>
 8007a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f9 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a26:	b118      	cbz	r0, 8007a30 <_dtoa_r+0x4e0>
 8007a28:	f018 0f01 	tst.w	r8, #1
 8007a2c:	f040 80ee 	bne.w	8007c0c <_dtoa_r+0x6bc>
 8007a30:	4649      	mov	r1, r9
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fbe2 	bl	80081fc <_Bfree>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	7033      	strb	r3, [r6, #0]
 8007a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a3e:	3701      	adds	r7, #1
 8007a40:	601f      	str	r7, [r3, #0]
 8007a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 831d 	beq.w	8008084 <_dtoa_r+0xb34>
 8007a4a:	601e      	str	r6, [r3, #0]
 8007a4c:	e31a      	b.n	8008084 <_dtoa_r+0xb34>
 8007a4e:	07e2      	lsls	r2, r4, #31
 8007a50:	d505      	bpl.n	8007a5e <_dtoa_r+0x50e>
 8007a52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	3601      	adds	r6, #1
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	1064      	asrs	r4, r4, #1
 8007a60:	3508      	adds	r5, #8
 8007a62:	e73f      	b.n	80078e4 <_dtoa_r+0x394>
 8007a64:	2602      	movs	r6, #2
 8007a66:	e742      	b.n	80078ee <_dtoa_r+0x39e>
 8007a68:	9c07      	ldr	r4, [sp, #28]
 8007a6a:	9704      	str	r7, [sp, #16]
 8007a6c:	e761      	b.n	8007932 <_dtoa_r+0x3e2>
 8007a6e:	4b27      	ldr	r3, [pc, #156]	@ (8007b0c <_dtoa_r+0x5bc>)
 8007a70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a7a:	4454      	add	r4, sl
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	d053      	beq.n	8007b28 <_dtoa_r+0x5d8>
 8007a80:	4928      	ldr	r1, [pc, #160]	@ (8007b24 <_dtoa_r+0x5d4>)
 8007a82:	2000      	movs	r0, #0
 8007a84:	f7f8 fee2 	bl	800084c <__aeabi_ddiv>
 8007a88:	4633      	mov	r3, r6
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	f7f8 fbfc 	bl	8000288 <__aeabi_dsub>
 8007a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a94:	4656      	mov	r6, sl
 8007a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a9a:	f7f9 f85d 	bl	8000b58 <__aeabi_d2iz>
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	f7f8 fd40 	bl	8000524 <__aeabi_i2d>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aac:	f7f8 fbec 	bl	8000288 <__aeabi_dsub>
 8007ab0:	3530      	adds	r5, #48	@ 0x30
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007aba:	f806 5b01 	strb.w	r5, [r6], #1
 8007abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ac2:	f7f9 f80b 	bl	8000adc <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d171      	bne.n	8007bae <_dtoa_r+0x65e>
 8007aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ace:	4911      	ldr	r1, [pc, #68]	@ (8007b14 <_dtoa_r+0x5c4>)
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f7f8 fbd9 	bl	8000288 <__aeabi_dsub>
 8007ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ada:	f7f8 ffff 	bl	8000adc <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f040 8095 	bne.w	8007c0e <_dtoa_r+0x6be>
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	f43f af50 	beq.w	800798a <_dtoa_r+0x43a>
 8007aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007aee:	4b0a      	ldr	r3, [pc, #40]	@ (8007b18 <_dtoa_r+0x5c8>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <_dtoa_r+0x5c8>)
 8007af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007afc:	2200      	movs	r2, #0
 8007afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b02:	f7f8 fd79 	bl	80005f8 <__aeabi_dmul>
 8007b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b0a:	e7c4      	b.n	8007a96 <_dtoa_r+0x546>
 8007b0c:	0800cef8 	.word	0x0800cef8
 8007b10:	0800ced0 	.word	0x0800ced0
 8007b14:	3ff00000 	.word	0x3ff00000
 8007b18:	40240000 	.word	0x40240000
 8007b1c:	401c0000 	.word	0x401c0000
 8007b20:	40140000 	.word	0x40140000
 8007b24:	3fe00000 	.word	0x3fe00000
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b34:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b36:	4656      	mov	r6, sl
 8007b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3c:	f7f9 f80c 	bl	8000b58 <__aeabi_d2iz>
 8007b40:	4605      	mov	r5, r0
 8007b42:	f7f8 fcef 	bl	8000524 <__aeabi_i2d>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4e:	f7f8 fb9b 	bl	8000288 <__aeabi_dsub>
 8007b52:	3530      	adds	r5, #48	@ 0x30
 8007b54:	f806 5b01 	strb.w	r5, [r6], #1
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	42a6      	cmp	r6, r4
 8007b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	d124      	bne.n	8007bb2 <_dtoa_r+0x662>
 8007b68:	4bac      	ldr	r3, [pc, #688]	@ (8007e1c <_dtoa_r+0x8cc>)
 8007b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b6e:	f7f8 fb8d 	bl	800028c <__adddf3>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b7a:	f7f8 ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d145      	bne.n	8007c0e <_dtoa_r+0x6be>
 8007b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b86:	49a5      	ldr	r1, [pc, #660]	@ (8007e1c <_dtoa_r+0x8cc>)
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7f8 fb7d 	bl	8000288 <__aeabi_dsub>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b96:	f7f8 ffa1 	bl	8000adc <__aeabi_dcmplt>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	f43f aef5 	beq.w	800798a <_dtoa_r+0x43a>
 8007ba0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007ba2:	1e73      	subs	r3, r6, #1
 8007ba4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ba6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007baa:	2b30      	cmp	r3, #48	@ 0x30
 8007bac:	d0f8      	beq.n	8007ba0 <_dtoa_r+0x650>
 8007bae:	9f04      	ldr	r7, [sp, #16]
 8007bb0:	e73e      	b.n	8007a30 <_dtoa_r+0x4e0>
 8007bb2:	4b9b      	ldr	r3, [pc, #620]	@ (8007e20 <_dtoa_r+0x8d0>)
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bbc:	e7bc      	b.n	8007b38 <_dtoa_r+0x5e8>
 8007bbe:	d10c      	bne.n	8007bda <_dtoa_r+0x68a>
 8007bc0:	4b98      	ldr	r3, [pc, #608]	@ (8007e24 <_dtoa_r+0x8d4>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc8:	f7f8 fd16 	bl	80005f8 <__aeabi_dmul>
 8007bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd0:	f7f8 ff98 	bl	8000b04 <__aeabi_dcmpge>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f000 8157 	beq.w	8007e88 <_dtoa_r+0x938>
 8007bda:	2400      	movs	r4, #0
 8007bdc:	4625      	mov	r5, r4
 8007bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be0:	43db      	mvns	r3, r3
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	4656      	mov	r6, sl
 8007be6:	2700      	movs	r7, #0
 8007be8:	4621      	mov	r1, r4
 8007bea:	4658      	mov	r0, fp
 8007bec:	f000 fb06 	bl	80081fc <_Bfree>
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	d0dc      	beq.n	8007bae <_dtoa_r+0x65e>
 8007bf4:	b12f      	cbz	r7, 8007c02 <_dtoa_r+0x6b2>
 8007bf6:	42af      	cmp	r7, r5
 8007bf8:	d003      	beq.n	8007c02 <_dtoa_r+0x6b2>
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	4658      	mov	r0, fp
 8007bfe:	f000 fafd 	bl	80081fc <_Bfree>
 8007c02:	4629      	mov	r1, r5
 8007c04:	4658      	mov	r0, fp
 8007c06:	f000 faf9 	bl	80081fc <_Bfree>
 8007c0a:	e7d0      	b.n	8007bae <_dtoa_r+0x65e>
 8007c0c:	9704      	str	r7, [sp, #16]
 8007c0e:	4633      	mov	r3, r6
 8007c10:	461e      	mov	r6, r3
 8007c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c16:	2a39      	cmp	r2, #57	@ 0x39
 8007c18:	d107      	bne.n	8007c2a <_dtoa_r+0x6da>
 8007c1a:	459a      	cmp	sl, r3
 8007c1c:	d1f8      	bne.n	8007c10 <_dtoa_r+0x6c0>
 8007c1e:	9a04      	ldr	r2, [sp, #16]
 8007c20:	3201      	adds	r2, #1
 8007c22:	9204      	str	r2, [sp, #16]
 8007c24:	2230      	movs	r2, #48	@ 0x30
 8007c26:	f88a 2000 	strb.w	r2, [sl]
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e7bd      	b.n	8007bae <_dtoa_r+0x65e>
 8007c32:	4b7b      	ldr	r3, [pc, #492]	@ (8007e20 <_dtoa_r+0x8d0>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	f7f8 fcdf 	bl	80005f8 <__aeabi_dmul>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	460d      	mov	r5, r1
 8007c42:	f7f8 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f43f aebb 	beq.w	80079c2 <_dtoa_r+0x472>
 8007c4c:	e6f0      	b.n	8007a30 <_dtoa_r+0x4e0>
 8007c4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	f000 80db 	beq.w	8007e0c <_dtoa_r+0x8bc>
 8007c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c58:	2a01      	cmp	r2, #1
 8007c5a:	f300 80bf 	bgt.w	8007ddc <_dtoa_r+0x88c>
 8007c5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	f000 80b7 	beq.w	8007dd4 <_dtoa_r+0x884>
 8007c66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c6c:	4646      	mov	r6, r8
 8007c6e:	9a08      	ldr	r2, [sp, #32]
 8007c70:	2101      	movs	r1, #1
 8007c72:	441a      	add	r2, r3
 8007c74:	4658      	mov	r0, fp
 8007c76:	4498      	add	r8, r3
 8007c78:	9208      	str	r2, [sp, #32]
 8007c7a:	f000 fb73 	bl	8008364 <__i2b>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b15e      	cbz	r6, 8007c9a <_dtoa_r+0x74a>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dd08      	ble.n	8007c9a <_dtoa_r+0x74a>
 8007c88:	42b3      	cmp	r3, r6
 8007c8a:	9a08      	ldr	r2, [sp, #32]
 8007c8c:	bfa8      	it	ge
 8007c8e:	4633      	movge	r3, r6
 8007c90:	eba8 0803 	sub.w	r8, r8, r3
 8007c94:	1af6      	subs	r6, r6, r3
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c9c:	b1f3      	cbz	r3, 8007cdc <_dtoa_r+0x78c>
 8007c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80b7 	beq.w	8007e14 <_dtoa_r+0x8c4>
 8007ca6:	b18c      	cbz	r4, 8007ccc <_dtoa_r+0x77c>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4622      	mov	r2, r4
 8007cac:	4658      	mov	r0, fp
 8007cae:	f000 fc19 	bl	80084e4 <__pow5mult>
 8007cb2:	464a      	mov	r2, r9
 8007cb4:	4601      	mov	r1, r0
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	4658      	mov	r0, fp
 8007cba:	f000 fb69 	bl	8008390 <__multiply>
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	9004      	str	r0, [sp, #16]
 8007cc2:	4658      	mov	r0, fp
 8007cc4:	f000 fa9a 	bl	80081fc <_Bfree>
 8007cc8:	9b04      	ldr	r3, [sp, #16]
 8007cca:	4699      	mov	r9, r3
 8007ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cce:	1b1a      	subs	r2, r3, r4
 8007cd0:	d004      	beq.n	8007cdc <_dtoa_r+0x78c>
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4658      	mov	r0, fp
 8007cd6:	f000 fc05 	bl	80084e4 <__pow5mult>
 8007cda:	4681      	mov	r9, r0
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4658      	mov	r0, fp
 8007ce0:	f000 fb40 	bl	8008364 <__i2b>
 8007ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 81cf 	beq.w	800808c <_dtoa_r+0xb3c>
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	f000 fbf6 	bl	80084e4 <__pow5mult>
 8007cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	f300 8095 	bgt.w	8007e2c <_dtoa_r+0x8dc>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 8087 	bne.w	8007e18 <_dtoa_r+0x8c8>
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 8089 	bne.w	8007e28 <_dtoa_r+0x8d8>
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d1c:	0d1b      	lsrs	r3, r3, #20
 8007d1e:	051b      	lsls	r3, r3, #20
 8007d20:	b12b      	cbz	r3, 8007d2e <_dtoa_r+0x7de>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	3301      	adds	r3, #1
 8007d26:	9308      	str	r3, [sp, #32]
 8007d28:	f108 0801 	add.w	r8, r8, #1
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 81b0 	beq.w	8008098 <_dtoa_r+0xb48>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d3e:	6918      	ldr	r0, [r3, #16]
 8007d40:	f000 fac4 	bl	80082cc <__hi0bits>
 8007d44:	f1c0 0020 	rsb	r0, r0, #32
 8007d48:	9b08      	ldr	r3, [sp, #32]
 8007d4a:	4418      	add	r0, r3
 8007d4c:	f010 001f 	ands.w	r0, r0, #31
 8007d50:	d077      	beq.n	8007e42 <_dtoa_r+0x8f2>
 8007d52:	f1c0 0320 	rsb	r3, r0, #32
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	dd6b      	ble.n	8007e32 <_dtoa_r+0x8e2>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	f1c0 001c 	rsb	r0, r0, #28
 8007d60:	4403      	add	r3, r0
 8007d62:	4480      	add	r8, r0
 8007d64:	4406      	add	r6, r0
 8007d66:	9308      	str	r3, [sp, #32]
 8007d68:	f1b8 0f00 	cmp.w	r8, #0
 8007d6c:	dd05      	ble.n	8007d7a <_dtoa_r+0x82a>
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4642      	mov	r2, r8
 8007d72:	4658      	mov	r0, fp
 8007d74:	f000 fc10 	bl	8008598 <__lshift>
 8007d78:	4681      	mov	r9, r0
 8007d7a:	9b08      	ldr	r3, [sp, #32]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	dd05      	ble.n	8007d8c <_dtoa_r+0x83c>
 8007d80:	4621      	mov	r1, r4
 8007d82:	461a      	mov	r2, r3
 8007d84:	4658      	mov	r0, fp
 8007d86:	f000 fc07 	bl	8008598 <__lshift>
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d059      	beq.n	8007e46 <_dtoa_r+0x8f6>
 8007d92:	4621      	mov	r1, r4
 8007d94:	4648      	mov	r0, r9
 8007d96:	f000 fc6b 	bl	8008670 <__mcmp>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	da53      	bge.n	8007e46 <_dtoa_r+0x8f6>
 8007d9e:	1e7b      	subs	r3, r7, #1
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	4649      	mov	r1, r9
 8007da4:	2300      	movs	r3, #0
 8007da6:	220a      	movs	r2, #10
 8007da8:	4658      	mov	r0, fp
 8007daa:	f000 fa49 	bl	8008240 <__multadd>
 8007dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007db0:	4681      	mov	r9, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 8172 	beq.w	800809c <_dtoa_r+0xb4c>
 8007db8:	2300      	movs	r3, #0
 8007dba:	4629      	mov	r1, r5
 8007dbc:	220a      	movs	r2, #10
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f000 fa3e 	bl	8008240 <__multadd>
 8007dc4:	9b00      	ldr	r3, [sp, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	4605      	mov	r5, r0
 8007dca:	dc67      	bgt.n	8007e9c <_dtoa_r+0x94c>
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	dc41      	bgt.n	8007e56 <_dtoa_r+0x906>
 8007dd2:	e063      	b.n	8007e9c <_dtoa_r+0x94c>
 8007dd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007dd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007dda:	e746      	b.n	8007c6a <_dtoa_r+0x71a>
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	1e5c      	subs	r4, r3, #1
 8007de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	bfbf      	itttt	lt
 8007de6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007de8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007dea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007dec:	1ae3      	sublt	r3, r4, r3
 8007dee:	bfb4      	ite	lt
 8007df0:	18d2      	addlt	r2, r2, r3
 8007df2:	1b1c      	subge	r4, r3, r4
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	bfbc      	itt	lt
 8007df8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007dfa:	2400      	movlt	r4, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfb5      	itete	lt
 8007e00:	eba8 0603 	sublt.w	r6, r8, r3
 8007e04:	9b07      	ldrge	r3, [sp, #28]
 8007e06:	2300      	movlt	r3, #0
 8007e08:	4646      	movge	r6, r8
 8007e0a:	e730      	b.n	8007c6e <_dtoa_r+0x71e>
 8007e0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e10:	4646      	mov	r6, r8
 8007e12:	e735      	b.n	8007c80 <_dtoa_r+0x730>
 8007e14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e16:	e75c      	b.n	8007cd2 <_dtoa_r+0x782>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e788      	b.n	8007d2e <_dtoa_r+0x7de>
 8007e1c:	3fe00000 	.word	0x3fe00000
 8007e20:	40240000 	.word	0x40240000
 8007e24:	40140000 	.word	0x40140000
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	e780      	b.n	8007d2e <_dtoa_r+0x7de>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e30:	e782      	b.n	8007d38 <_dtoa_r+0x7e8>
 8007e32:	d099      	beq.n	8007d68 <_dtoa_r+0x818>
 8007e34:	9a08      	ldr	r2, [sp, #32]
 8007e36:	331c      	adds	r3, #28
 8007e38:	441a      	add	r2, r3
 8007e3a:	4498      	add	r8, r3
 8007e3c:	441e      	add	r6, r3
 8007e3e:	9208      	str	r2, [sp, #32]
 8007e40:	e792      	b.n	8007d68 <_dtoa_r+0x818>
 8007e42:	4603      	mov	r3, r0
 8007e44:	e7f6      	b.n	8007e34 <_dtoa_r+0x8e4>
 8007e46:	9b07      	ldr	r3, [sp, #28]
 8007e48:	9704      	str	r7, [sp, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dc20      	bgt.n	8007e90 <_dtoa_r+0x940>
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	dd1e      	ble.n	8007e94 <_dtoa_r+0x944>
 8007e56:	9b00      	ldr	r3, [sp, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f aec0 	bne.w	8007bde <_dtoa_r+0x68e>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	2205      	movs	r2, #5
 8007e62:	4658      	mov	r0, fp
 8007e64:	f000 f9ec 	bl	8008240 <__multadd>
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f000 fbff 	bl	8008670 <__mcmp>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f77f aeb3 	ble.w	8007bde <_dtoa_r+0x68e>
 8007e78:	4656      	mov	r6, sl
 8007e7a:	2331      	movs	r3, #49	@ 0x31
 8007e7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	3301      	adds	r3, #1
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	e6ae      	b.n	8007be6 <_dtoa_r+0x696>
 8007e88:	9c07      	ldr	r4, [sp, #28]
 8007e8a:	9704      	str	r7, [sp, #16]
 8007e8c:	4625      	mov	r5, r4
 8007e8e:	e7f3      	b.n	8007e78 <_dtoa_r+0x928>
 8007e90:	9b07      	ldr	r3, [sp, #28]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8104 	beq.w	80080a4 <_dtoa_r+0xb54>
 8007e9c:	2e00      	cmp	r6, #0
 8007e9e:	dd05      	ble.n	8007eac <_dtoa_r+0x95c>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fb77 	bl	8008598 <__lshift>
 8007eaa:	4605      	mov	r5, r0
 8007eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d05a      	beq.n	8007f68 <_dtoa_r+0xa18>
 8007eb2:	6869      	ldr	r1, [r5, #4]
 8007eb4:	4658      	mov	r0, fp
 8007eb6:	f000 f961 	bl	800817c <_Balloc>
 8007eba:	4606      	mov	r6, r0
 8007ebc:	b928      	cbnz	r0, 8007eca <_dtoa_r+0x97a>
 8007ebe:	4b84      	ldr	r3, [pc, #528]	@ (80080d0 <_dtoa_r+0xb80>)
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ec6:	f7ff bb5a 	b.w	800757e <_dtoa_r+0x2e>
 8007eca:	692a      	ldr	r2, [r5, #16]
 8007ecc:	3202      	adds	r2, #2
 8007ece:	0092      	lsls	r2, r2, #2
 8007ed0:	f105 010c 	add.w	r1, r5, #12
 8007ed4:	300c      	adds	r0, #12
 8007ed6:	f7ff faa2 	bl	800741e <memcpy>
 8007eda:	2201      	movs	r2, #1
 8007edc:	4631      	mov	r1, r6
 8007ede:	4658      	mov	r0, fp
 8007ee0:	f000 fb5a 	bl	8008598 <__lshift>
 8007ee4:	f10a 0301 	add.w	r3, sl, #1
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	9b00      	ldr	r3, [sp, #0]
 8007eec:	4453      	add	r3, sl
 8007eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	462f      	mov	r7, r5
 8007ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007efa:	4605      	mov	r5, r0
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	4621      	mov	r1, r4
 8007f00:	3b01      	subs	r3, #1
 8007f02:	4648      	mov	r0, r9
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	f7ff fa98 	bl	800743a <quorem>
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	9002      	str	r0, [sp, #8]
 8007f0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f12:	4648      	mov	r0, r9
 8007f14:	f000 fbac 	bl	8008670 <__mcmp>
 8007f18:	462a      	mov	r2, r5
 8007f1a:	9008      	str	r0, [sp, #32]
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4658      	mov	r0, fp
 8007f20:	f000 fbc2 	bl	80086a8 <__mdiff>
 8007f24:	68c2      	ldr	r2, [r0, #12]
 8007f26:	4606      	mov	r6, r0
 8007f28:	bb02      	cbnz	r2, 8007f6c <_dtoa_r+0xa1c>
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4648      	mov	r0, r9
 8007f2e:	f000 fb9f 	bl	8008670 <__mcmp>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4631      	mov	r1, r6
 8007f36:	4658      	mov	r0, fp
 8007f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f3a:	f000 f95f 	bl	80081fc <_Bfree>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f42:	9e07      	ldr	r6, [sp, #28]
 8007f44:	ea43 0102 	orr.w	r1, r3, r2
 8007f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4a:	4319      	orrs	r1, r3
 8007f4c:	d110      	bne.n	8007f70 <_dtoa_r+0xa20>
 8007f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f52:	d029      	beq.n	8007fa8 <_dtoa_r+0xa58>
 8007f54:	9b08      	ldr	r3, [sp, #32]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dd02      	ble.n	8007f60 <_dtoa_r+0xa10>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	f883 8000 	strb.w	r8, [r3]
 8007f66:	e63f      	b.n	8007be8 <_dtoa_r+0x698>
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e7bb      	b.n	8007ee4 <_dtoa_r+0x994>
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	e7e1      	b.n	8007f34 <_dtoa_r+0x9e4>
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db04      	blt.n	8007f80 <_dtoa_r+0xa30>
 8007f76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	d120      	bne.n	8007fc2 <_dtoa_r+0xa72>
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	dded      	ble.n	8007f60 <_dtoa_r+0xa10>
 8007f84:	4649      	mov	r1, r9
 8007f86:	2201      	movs	r2, #1
 8007f88:	4658      	mov	r0, fp
 8007f8a:	f000 fb05 	bl	8008598 <__lshift>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4681      	mov	r9, r0
 8007f92:	f000 fb6d 	bl	8008670 <__mcmp>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	dc03      	bgt.n	8007fa2 <_dtoa_r+0xa52>
 8007f9a:	d1e1      	bne.n	8007f60 <_dtoa_r+0xa10>
 8007f9c:	f018 0f01 	tst.w	r8, #1
 8007fa0:	d0de      	beq.n	8007f60 <_dtoa_r+0xa10>
 8007fa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fa6:	d1d8      	bne.n	8007f5a <_dtoa_r+0xa0a>
 8007fa8:	9a00      	ldr	r2, [sp, #0]
 8007faa:	2339      	movs	r3, #57	@ 0x39
 8007fac:	7013      	strb	r3, [r2, #0]
 8007fae:	4633      	mov	r3, r6
 8007fb0:	461e      	mov	r6, r3
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007fb8:	2a39      	cmp	r2, #57	@ 0x39
 8007fba:	d052      	beq.n	8008062 <_dtoa_r+0xb12>
 8007fbc:	3201      	adds	r2, #1
 8007fbe:	701a      	strb	r2, [r3, #0]
 8007fc0:	e612      	b.n	8007be8 <_dtoa_r+0x698>
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	dd07      	ble.n	8007fd6 <_dtoa_r+0xa86>
 8007fc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fca:	d0ed      	beq.n	8007fa8 <_dtoa_r+0xa58>
 8007fcc:	9a00      	ldr	r2, [sp, #0]
 8007fce:	f108 0301 	add.w	r3, r8, #1
 8007fd2:	7013      	strb	r3, [r2, #0]
 8007fd4:	e608      	b.n	8007be8 <_dtoa_r+0x698>
 8007fd6:	9b07      	ldr	r3, [sp, #28]
 8007fd8:	9a07      	ldr	r2, [sp, #28]
 8007fda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d028      	beq.n	8008036 <_dtoa_r+0xae6>
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 f928 	bl	8008240 <__multadd>
 8007ff0:	42af      	cmp	r7, r5
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	f04f 020a 	mov.w	r2, #10
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	4658      	mov	r0, fp
 8008000:	d107      	bne.n	8008012 <_dtoa_r+0xac2>
 8008002:	f000 f91d 	bl	8008240 <__multadd>
 8008006:	4607      	mov	r7, r0
 8008008:	4605      	mov	r5, r0
 800800a:	9b07      	ldr	r3, [sp, #28]
 800800c:	3301      	adds	r3, #1
 800800e:	9307      	str	r3, [sp, #28]
 8008010:	e774      	b.n	8007efc <_dtoa_r+0x9ac>
 8008012:	f000 f915 	bl	8008240 <__multadd>
 8008016:	4629      	mov	r1, r5
 8008018:	4607      	mov	r7, r0
 800801a:	2300      	movs	r3, #0
 800801c:	220a      	movs	r2, #10
 800801e:	4658      	mov	r0, fp
 8008020:	f000 f90e 	bl	8008240 <__multadd>
 8008024:	4605      	mov	r5, r0
 8008026:	e7f0      	b.n	800800a <_dtoa_r+0xaba>
 8008028:	9b00      	ldr	r3, [sp, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfcc      	ite	gt
 800802e:	461e      	movgt	r6, r3
 8008030:	2601      	movle	r6, #1
 8008032:	4456      	add	r6, sl
 8008034:	2700      	movs	r7, #0
 8008036:	4649      	mov	r1, r9
 8008038:	2201      	movs	r2, #1
 800803a:	4658      	mov	r0, fp
 800803c:	f000 faac 	bl	8008598 <__lshift>
 8008040:	4621      	mov	r1, r4
 8008042:	4681      	mov	r9, r0
 8008044:	f000 fb14 	bl	8008670 <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	dcb0      	bgt.n	8007fae <_dtoa_r+0xa5e>
 800804c:	d102      	bne.n	8008054 <_dtoa_r+0xb04>
 800804e:	f018 0f01 	tst.w	r8, #1
 8008052:	d1ac      	bne.n	8007fae <_dtoa_r+0xa5e>
 8008054:	4633      	mov	r3, r6
 8008056:	461e      	mov	r6, r3
 8008058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800805c:	2a30      	cmp	r2, #48	@ 0x30
 800805e:	d0fa      	beq.n	8008056 <_dtoa_r+0xb06>
 8008060:	e5c2      	b.n	8007be8 <_dtoa_r+0x698>
 8008062:	459a      	cmp	sl, r3
 8008064:	d1a4      	bne.n	8007fb0 <_dtoa_r+0xa60>
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	3301      	adds	r3, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	2331      	movs	r3, #49	@ 0x31
 800806e:	f88a 3000 	strb.w	r3, [sl]
 8008072:	e5b9      	b.n	8007be8 <_dtoa_r+0x698>
 8008074:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008076:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80080d4 <_dtoa_r+0xb84>
 800807a:	b11b      	cbz	r3, 8008084 <_dtoa_r+0xb34>
 800807c:	f10a 0308 	add.w	r3, sl, #8
 8008080:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	4650      	mov	r0, sl
 8008086:	b019      	add	sp, #100	@ 0x64
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808e:	2b01      	cmp	r3, #1
 8008090:	f77f ae37 	ble.w	8007d02 <_dtoa_r+0x7b2>
 8008094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008096:	930a      	str	r3, [sp, #40]	@ 0x28
 8008098:	2001      	movs	r0, #1
 800809a:	e655      	b.n	8007d48 <_dtoa_r+0x7f8>
 800809c:	9b00      	ldr	r3, [sp, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f77f aed6 	ble.w	8007e50 <_dtoa_r+0x900>
 80080a4:	4656      	mov	r6, sl
 80080a6:	4621      	mov	r1, r4
 80080a8:	4648      	mov	r0, r9
 80080aa:	f7ff f9c6 	bl	800743a <quorem>
 80080ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080b2:	f806 8b01 	strb.w	r8, [r6], #1
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	eba6 020a 	sub.w	r2, r6, sl
 80080bc:	4293      	cmp	r3, r2
 80080be:	ddb3      	ble.n	8008028 <_dtoa_r+0xad8>
 80080c0:	4649      	mov	r1, r9
 80080c2:	2300      	movs	r3, #0
 80080c4:	220a      	movs	r2, #10
 80080c6:	4658      	mov	r0, fp
 80080c8:	f000 f8ba 	bl	8008240 <__multadd>
 80080cc:	4681      	mov	r9, r0
 80080ce:	e7ea      	b.n	80080a6 <_dtoa_r+0xb56>
 80080d0:	0800ce58 	.word	0x0800ce58
 80080d4:	0800cddc 	.word	0x0800cddc

080080d8 <_free_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4605      	mov	r5, r0
 80080dc:	2900      	cmp	r1, #0
 80080de:	d041      	beq.n	8008164 <_free_r+0x8c>
 80080e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e4:	1f0c      	subs	r4, r1, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bfb8      	it	lt
 80080ea:	18e4      	addlt	r4, r4, r3
 80080ec:	f7fe faac 	bl	8006648 <__malloc_lock>
 80080f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008168 <_free_r+0x90>)
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	b933      	cbnz	r3, 8008104 <_free_r+0x2c>
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	6014      	str	r4, [r2, #0]
 80080fa:	4628      	mov	r0, r5
 80080fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008100:	f7fe baa8 	b.w	8006654 <__malloc_unlock>
 8008104:	42a3      	cmp	r3, r4
 8008106:	d908      	bls.n	800811a <_free_r+0x42>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	1821      	adds	r1, r4, r0
 800810c:	428b      	cmp	r3, r1
 800810e:	bf01      	itttt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	1809      	addeq	r1, r1, r0
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	e7ed      	b.n	80080f6 <_free_r+0x1e>
 800811a:	461a      	mov	r2, r3
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b10b      	cbz	r3, 8008124 <_free_r+0x4c>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d9fa      	bls.n	800811a <_free_r+0x42>
 8008124:	6811      	ldr	r1, [r2, #0]
 8008126:	1850      	adds	r0, r2, r1
 8008128:	42a0      	cmp	r0, r4
 800812a:	d10b      	bne.n	8008144 <_free_r+0x6c>
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	4401      	add	r1, r0
 8008130:	1850      	adds	r0, r2, r1
 8008132:	4283      	cmp	r3, r0
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	d1e0      	bne.n	80080fa <_free_r+0x22>
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	4408      	add	r0, r1
 8008140:	6010      	str	r0, [r2, #0]
 8008142:	e7da      	b.n	80080fa <_free_r+0x22>
 8008144:	d902      	bls.n	800814c <_free_r+0x74>
 8008146:	230c      	movs	r3, #12
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	e7d6      	b.n	80080fa <_free_r+0x22>
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	1821      	adds	r1, r4, r0
 8008150:	428b      	cmp	r3, r1
 8008152:	bf04      	itt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	bf04      	itt	eq
 800815c:	1809      	addeq	r1, r1, r0
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	6054      	str	r4, [r2, #4]
 8008162:	e7ca      	b.n	80080fa <_free_r+0x22>
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	2000a338 	.word	0x2000a338

0800816c <malloc>:
 800816c:	4b02      	ldr	r3, [pc, #8]	@ (8008178 <malloc+0xc>)
 800816e:	4601      	mov	r1, r0
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f7fe b9e9 	b.w	8006548 <_malloc_r>
 8008176:	bf00      	nop
 8008178:	20000018 	.word	0x20000018

0800817c <_Balloc>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	69c6      	ldr	r6, [r0, #28]
 8008180:	4604      	mov	r4, r0
 8008182:	460d      	mov	r5, r1
 8008184:	b976      	cbnz	r6, 80081a4 <_Balloc+0x28>
 8008186:	2010      	movs	r0, #16
 8008188:	f7ff fff0 	bl	800816c <malloc>
 800818c:	4602      	mov	r2, r0
 800818e:	61e0      	str	r0, [r4, #28]
 8008190:	b920      	cbnz	r0, 800819c <_Balloc+0x20>
 8008192:	4b18      	ldr	r3, [pc, #96]	@ (80081f4 <_Balloc+0x78>)
 8008194:	4818      	ldr	r0, [pc, #96]	@ (80081f8 <_Balloc+0x7c>)
 8008196:	216b      	movs	r1, #107	@ 0x6b
 8008198:	f001 fbe0 	bl	800995c <__assert_func>
 800819c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081a0:	6006      	str	r6, [r0, #0]
 80081a2:	60c6      	str	r6, [r0, #12]
 80081a4:	69e6      	ldr	r6, [r4, #28]
 80081a6:	68f3      	ldr	r3, [r6, #12]
 80081a8:	b183      	cbz	r3, 80081cc <_Balloc+0x50>
 80081aa:	69e3      	ldr	r3, [r4, #28]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081b2:	b9b8      	cbnz	r0, 80081e4 <_Balloc+0x68>
 80081b4:	2101      	movs	r1, #1
 80081b6:	fa01 f605 	lsl.w	r6, r1, r5
 80081ba:	1d72      	adds	r2, r6, #5
 80081bc:	0092      	lsls	r2, r2, #2
 80081be:	4620      	mov	r0, r4
 80081c0:	f7fe f98c 	bl	80064dc <_calloc_r>
 80081c4:	b160      	cbz	r0, 80081e0 <_Balloc+0x64>
 80081c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081ca:	e00e      	b.n	80081ea <_Balloc+0x6e>
 80081cc:	2221      	movs	r2, #33	@ 0x21
 80081ce:	2104      	movs	r1, #4
 80081d0:	4620      	mov	r0, r4
 80081d2:	f7fe f983 	bl	80064dc <_calloc_r>
 80081d6:	69e3      	ldr	r3, [r4, #28]
 80081d8:	60f0      	str	r0, [r6, #12]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e4      	bne.n	80081aa <_Balloc+0x2e>
 80081e0:	2000      	movs	r0, #0
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	6802      	ldr	r2, [r0, #0]
 80081e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081ea:	2300      	movs	r3, #0
 80081ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081f0:	e7f7      	b.n	80081e2 <_Balloc+0x66>
 80081f2:	bf00      	nop
 80081f4:	0800cde9 	.word	0x0800cde9
 80081f8:	0800ce69 	.word	0x0800ce69

080081fc <_Bfree>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	69c6      	ldr	r6, [r0, #28]
 8008200:	4605      	mov	r5, r0
 8008202:	460c      	mov	r4, r1
 8008204:	b976      	cbnz	r6, 8008224 <_Bfree+0x28>
 8008206:	2010      	movs	r0, #16
 8008208:	f7ff ffb0 	bl	800816c <malloc>
 800820c:	4602      	mov	r2, r0
 800820e:	61e8      	str	r0, [r5, #28]
 8008210:	b920      	cbnz	r0, 800821c <_Bfree+0x20>
 8008212:	4b09      	ldr	r3, [pc, #36]	@ (8008238 <_Bfree+0x3c>)
 8008214:	4809      	ldr	r0, [pc, #36]	@ (800823c <_Bfree+0x40>)
 8008216:	218f      	movs	r1, #143	@ 0x8f
 8008218:	f001 fba0 	bl	800995c <__assert_func>
 800821c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008220:	6006      	str	r6, [r0, #0]
 8008222:	60c6      	str	r6, [r0, #12]
 8008224:	b13c      	cbz	r4, 8008236 <_Bfree+0x3a>
 8008226:	69eb      	ldr	r3, [r5, #28]
 8008228:	6862      	ldr	r2, [r4, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008230:	6021      	str	r1, [r4, #0]
 8008232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	0800cde9 	.word	0x0800cde9
 800823c:	0800ce69 	.word	0x0800ce69

08008240 <__multadd>:
 8008240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	690d      	ldr	r5, [r1, #16]
 8008246:	4607      	mov	r7, r0
 8008248:	460c      	mov	r4, r1
 800824a:	461e      	mov	r6, r3
 800824c:	f101 0c14 	add.w	ip, r1, #20
 8008250:	2000      	movs	r0, #0
 8008252:	f8dc 3000 	ldr.w	r3, [ip]
 8008256:	b299      	uxth	r1, r3
 8008258:	fb02 6101 	mla	r1, r2, r1, r6
 800825c:	0c1e      	lsrs	r6, r3, #16
 800825e:	0c0b      	lsrs	r3, r1, #16
 8008260:	fb02 3306 	mla	r3, r2, r6, r3
 8008264:	b289      	uxth	r1, r1
 8008266:	3001      	adds	r0, #1
 8008268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800826c:	4285      	cmp	r5, r0
 800826e:	f84c 1b04 	str.w	r1, [ip], #4
 8008272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008276:	dcec      	bgt.n	8008252 <__multadd+0x12>
 8008278:	b30e      	cbz	r6, 80082be <__multadd+0x7e>
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	42ab      	cmp	r3, r5
 800827e:	dc19      	bgt.n	80082b4 <__multadd+0x74>
 8008280:	6861      	ldr	r1, [r4, #4]
 8008282:	4638      	mov	r0, r7
 8008284:	3101      	adds	r1, #1
 8008286:	f7ff ff79 	bl	800817c <_Balloc>
 800828a:	4680      	mov	r8, r0
 800828c:	b928      	cbnz	r0, 800829a <__multadd+0x5a>
 800828e:	4602      	mov	r2, r0
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <__multadd+0x84>)
 8008292:	480d      	ldr	r0, [pc, #52]	@ (80082c8 <__multadd+0x88>)
 8008294:	21ba      	movs	r1, #186	@ 0xba
 8008296:	f001 fb61 	bl	800995c <__assert_func>
 800829a:	6922      	ldr	r2, [r4, #16]
 800829c:	3202      	adds	r2, #2
 800829e:	f104 010c 	add.w	r1, r4, #12
 80082a2:	0092      	lsls	r2, r2, #2
 80082a4:	300c      	adds	r0, #12
 80082a6:	f7ff f8ba 	bl	800741e <memcpy>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4638      	mov	r0, r7
 80082ae:	f7ff ffa5 	bl	80081fc <_Bfree>
 80082b2:	4644      	mov	r4, r8
 80082b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082b8:	3501      	adds	r5, #1
 80082ba:	615e      	str	r6, [r3, #20]
 80082bc:	6125      	str	r5, [r4, #16]
 80082be:	4620      	mov	r0, r4
 80082c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c4:	0800ce58 	.word	0x0800ce58
 80082c8:	0800ce69 	.word	0x0800ce69

080082cc <__hi0bits>:
 80082cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082d0:	4603      	mov	r3, r0
 80082d2:	bf36      	itet	cc
 80082d4:	0403      	lslcc	r3, r0, #16
 80082d6:	2000      	movcs	r0, #0
 80082d8:	2010      	movcc	r0, #16
 80082da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082de:	bf3c      	itt	cc
 80082e0:	021b      	lslcc	r3, r3, #8
 80082e2:	3008      	addcc	r0, #8
 80082e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082e8:	bf3c      	itt	cc
 80082ea:	011b      	lslcc	r3, r3, #4
 80082ec:	3004      	addcc	r0, #4
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f2:	bf3c      	itt	cc
 80082f4:	009b      	lslcc	r3, r3, #2
 80082f6:	3002      	addcc	r0, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	db05      	blt.n	8008308 <__hi0bits+0x3c>
 80082fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008300:	f100 0001 	add.w	r0, r0, #1
 8008304:	bf08      	it	eq
 8008306:	2020      	moveq	r0, #32
 8008308:	4770      	bx	lr

0800830a <__lo0bits>:
 800830a:	6803      	ldr	r3, [r0, #0]
 800830c:	4602      	mov	r2, r0
 800830e:	f013 0007 	ands.w	r0, r3, #7
 8008312:	d00b      	beq.n	800832c <__lo0bits+0x22>
 8008314:	07d9      	lsls	r1, r3, #31
 8008316:	d421      	bmi.n	800835c <__lo0bits+0x52>
 8008318:	0798      	lsls	r0, r3, #30
 800831a:	bf49      	itett	mi
 800831c:	085b      	lsrmi	r3, r3, #1
 800831e:	089b      	lsrpl	r3, r3, #2
 8008320:	2001      	movmi	r0, #1
 8008322:	6013      	strmi	r3, [r2, #0]
 8008324:	bf5c      	itt	pl
 8008326:	6013      	strpl	r3, [r2, #0]
 8008328:	2002      	movpl	r0, #2
 800832a:	4770      	bx	lr
 800832c:	b299      	uxth	r1, r3
 800832e:	b909      	cbnz	r1, 8008334 <__lo0bits+0x2a>
 8008330:	0c1b      	lsrs	r3, r3, #16
 8008332:	2010      	movs	r0, #16
 8008334:	b2d9      	uxtb	r1, r3
 8008336:	b909      	cbnz	r1, 800833c <__lo0bits+0x32>
 8008338:	3008      	adds	r0, #8
 800833a:	0a1b      	lsrs	r3, r3, #8
 800833c:	0719      	lsls	r1, r3, #28
 800833e:	bf04      	itt	eq
 8008340:	091b      	lsreq	r3, r3, #4
 8008342:	3004      	addeq	r0, #4
 8008344:	0799      	lsls	r1, r3, #30
 8008346:	bf04      	itt	eq
 8008348:	089b      	lsreq	r3, r3, #2
 800834a:	3002      	addeq	r0, #2
 800834c:	07d9      	lsls	r1, r3, #31
 800834e:	d403      	bmi.n	8008358 <__lo0bits+0x4e>
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	f100 0001 	add.w	r0, r0, #1
 8008356:	d003      	beq.n	8008360 <__lo0bits+0x56>
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	4770      	bx	lr
 800835c:	2000      	movs	r0, #0
 800835e:	4770      	bx	lr
 8008360:	2020      	movs	r0, #32
 8008362:	4770      	bx	lr

08008364 <__i2b>:
 8008364:	b510      	push	{r4, lr}
 8008366:	460c      	mov	r4, r1
 8008368:	2101      	movs	r1, #1
 800836a:	f7ff ff07 	bl	800817c <_Balloc>
 800836e:	4602      	mov	r2, r0
 8008370:	b928      	cbnz	r0, 800837e <__i2b+0x1a>
 8008372:	4b05      	ldr	r3, [pc, #20]	@ (8008388 <__i2b+0x24>)
 8008374:	4805      	ldr	r0, [pc, #20]	@ (800838c <__i2b+0x28>)
 8008376:	f240 1145 	movw	r1, #325	@ 0x145
 800837a:	f001 faef 	bl	800995c <__assert_func>
 800837e:	2301      	movs	r3, #1
 8008380:	6144      	str	r4, [r0, #20]
 8008382:	6103      	str	r3, [r0, #16]
 8008384:	bd10      	pop	{r4, pc}
 8008386:	bf00      	nop
 8008388:	0800ce58 	.word	0x0800ce58
 800838c:	0800ce69 	.word	0x0800ce69

08008390 <__multiply>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	4614      	mov	r4, r2
 8008396:	690a      	ldr	r2, [r1, #16]
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	429a      	cmp	r2, r3
 800839c:	bfa8      	it	ge
 800839e:	4623      	movge	r3, r4
 80083a0:	460f      	mov	r7, r1
 80083a2:	bfa4      	itt	ge
 80083a4:	460c      	movge	r4, r1
 80083a6:	461f      	movge	r7, r3
 80083a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80083ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80083b0:	68a3      	ldr	r3, [r4, #8]
 80083b2:	6861      	ldr	r1, [r4, #4]
 80083b4:	eb0a 0609 	add.w	r6, sl, r9
 80083b8:	42b3      	cmp	r3, r6
 80083ba:	b085      	sub	sp, #20
 80083bc:	bfb8      	it	lt
 80083be:	3101      	addlt	r1, #1
 80083c0:	f7ff fedc 	bl	800817c <_Balloc>
 80083c4:	b930      	cbnz	r0, 80083d4 <__multiply+0x44>
 80083c6:	4602      	mov	r2, r0
 80083c8:	4b44      	ldr	r3, [pc, #272]	@ (80084dc <__multiply+0x14c>)
 80083ca:	4845      	ldr	r0, [pc, #276]	@ (80084e0 <__multiply+0x150>)
 80083cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083d0:	f001 fac4 	bl	800995c <__assert_func>
 80083d4:	f100 0514 	add.w	r5, r0, #20
 80083d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083dc:	462b      	mov	r3, r5
 80083de:	2200      	movs	r2, #0
 80083e0:	4543      	cmp	r3, r8
 80083e2:	d321      	bcc.n	8008428 <__multiply+0x98>
 80083e4:	f107 0114 	add.w	r1, r7, #20
 80083e8:	f104 0214 	add.w	r2, r4, #20
 80083ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	1b13      	subs	r3, r2, r4
 80083f8:	3b15      	subs	r3, #21
 80083fa:	f023 0303 	bic.w	r3, r3, #3
 80083fe:	3304      	adds	r3, #4
 8008400:	f104 0715 	add.w	r7, r4, #21
 8008404:	42ba      	cmp	r2, r7
 8008406:	bf38      	it	cc
 8008408:	2304      	movcc	r3, #4
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	9103      	str	r1, [sp, #12]
 8008410:	428b      	cmp	r3, r1
 8008412:	d80c      	bhi.n	800842e <__multiply+0x9e>
 8008414:	2e00      	cmp	r6, #0
 8008416:	dd03      	ble.n	8008420 <__multiply+0x90>
 8008418:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05b      	beq.n	80084d8 <__multiply+0x148>
 8008420:	6106      	str	r6, [r0, #16]
 8008422:	b005      	add	sp, #20
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	f843 2b04 	str.w	r2, [r3], #4
 800842c:	e7d8      	b.n	80083e0 <__multiply+0x50>
 800842e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008432:	f1ba 0f00 	cmp.w	sl, #0
 8008436:	d024      	beq.n	8008482 <__multiply+0xf2>
 8008438:	f104 0e14 	add.w	lr, r4, #20
 800843c:	46a9      	mov	r9, r5
 800843e:	f04f 0c00 	mov.w	ip, #0
 8008442:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008446:	f8d9 3000 	ldr.w	r3, [r9]
 800844a:	fa1f fb87 	uxth.w	fp, r7
 800844e:	b29b      	uxth	r3, r3
 8008450:	fb0a 330b 	mla	r3, sl, fp, r3
 8008454:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008458:	f8d9 7000 	ldr.w	r7, [r9]
 800845c:	4463      	add	r3, ip
 800845e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008462:	fb0a c70b 	mla	r7, sl, fp, ip
 8008466:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800846a:	b29b      	uxth	r3, r3
 800846c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008470:	4572      	cmp	r2, lr
 8008472:	f849 3b04 	str.w	r3, [r9], #4
 8008476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800847a:	d8e2      	bhi.n	8008442 <__multiply+0xb2>
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	f845 c003 	str.w	ip, [r5, r3]
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008488:	3104      	adds	r1, #4
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	d021      	beq.n	80084d4 <__multiply+0x144>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	f104 0c14 	add.w	ip, r4, #20
 8008496:	46ae      	mov	lr, r5
 8008498:	f04f 0a00 	mov.w	sl, #0
 800849c:	f8bc b000 	ldrh.w	fp, [ip]
 80084a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80084a4:	fb09 770b 	mla	r7, r9, fp, r7
 80084a8:	4457      	add	r7, sl
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084b0:	f84e 3b04 	str.w	r3, [lr], #4
 80084b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084bc:	f8be 3000 	ldrh.w	r3, [lr]
 80084c0:	fb09 330a 	mla	r3, r9, sl, r3
 80084c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80084c8:	4562      	cmp	r2, ip
 80084ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084ce:	d8e5      	bhi.n	800849c <__multiply+0x10c>
 80084d0:	9f01      	ldr	r7, [sp, #4]
 80084d2:	51eb      	str	r3, [r5, r7]
 80084d4:	3504      	adds	r5, #4
 80084d6:	e799      	b.n	800840c <__multiply+0x7c>
 80084d8:	3e01      	subs	r6, #1
 80084da:	e79b      	b.n	8008414 <__multiply+0x84>
 80084dc:	0800ce58 	.word	0x0800ce58
 80084e0:	0800ce69 	.word	0x0800ce69

080084e4 <__pow5mult>:
 80084e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e8:	4615      	mov	r5, r2
 80084ea:	f012 0203 	ands.w	r2, r2, #3
 80084ee:	4607      	mov	r7, r0
 80084f0:	460e      	mov	r6, r1
 80084f2:	d007      	beq.n	8008504 <__pow5mult+0x20>
 80084f4:	4c25      	ldr	r4, [pc, #148]	@ (800858c <__pow5mult+0xa8>)
 80084f6:	3a01      	subs	r2, #1
 80084f8:	2300      	movs	r3, #0
 80084fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084fe:	f7ff fe9f 	bl	8008240 <__multadd>
 8008502:	4606      	mov	r6, r0
 8008504:	10ad      	asrs	r5, r5, #2
 8008506:	d03d      	beq.n	8008584 <__pow5mult+0xa0>
 8008508:	69fc      	ldr	r4, [r7, #28]
 800850a:	b97c      	cbnz	r4, 800852c <__pow5mult+0x48>
 800850c:	2010      	movs	r0, #16
 800850e:	f7ff fe2d 	bl	800816c <malloc>
 8008512:	4602      	mov	r2, r0
 8008514:	61f8      	str	r0, [r7, #28]
 8008516:	b928      	cbnz	r0, 8008524 <__pow5mult+0x40>
 8008518:	4b1d      	ldr	r3, [pc, #116]	@ (8008590 <__pow5mult+0xac>)
 800851a:	481e      	ldr	r0, [pc, #120]	@ (8008594 <__pow5mult+0xb0>)
 800851c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008520:	f001 fa1c 	bl	800995c <__assert_func>
 8008524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008528:	6004      	str	r4, [r0, #0]
 800852a:	60c4      	str	r4, [r0, #12]
 800852c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008534:	b94c      	cbnz	r4, 800854a <__pow5mult+0x66>
 8008536:	f240 2171 	movw	r1, #625	@ 0x271
 800853a:	4638      	mov	r0, r7
 800853c:	f7ff ff12 	bl	8008364 <__i2b>
 8008540:	2300      	movs	r3, #0
 8008542:	f8c8 0008 	str.w	r0, [r8, #8]
 8008546:	4604      	mov	r4, r0
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	f04f 0900 	mov.w	r9, #0
 800854e:	07eb      	lsls	r3, r5, #31
 8008550:	d50a      	bpl.n	8008568 <__pow5mult+0x84>
 8008552:	4631      	mov	r1, r6
 8008554:	4622      	mov	r2, r4
 8008556:	4638      	mov	r0, r7
 8008558:	f7ff ff1a 	bl	8008390 <__multiply>
 800855c:	4631      	mov	r1, r6
 800855e:	4680      	mov	r8, r0
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff fe4b 	bl	80081fc <_Bfree>
 8008566:	4646      	mov	r6, r8
 8008568:	106d      	asrs	r5, r5, #1
 800856a:	d00b      	beq.n	8008584 <__pow5mult+0xa0>
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	b938      	cbnz	r0, 8008580 <__pow5mult+0x9c>
 8008570:	4622      	mov	r2, r4
 8008572:	4621      	mov	r1, r4
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff ff0b 	bl	8008390 <__multiply>
 800857a:	6020      	str	r0, [r4, #0]
 800857c:	f8c0 9000 	str.w	r9, [r0]
 8008580:	4604      	mov	r4, r0
 8008582:	e7e4      	b.n	800854e <__pow5mult+0x6a>
 8008584:	4630      	mov	r0, r6
 8008586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858a:	bf00      	nop
 800858c:	0800cec4 	.word	0x0800cec4
 8008590:	0800cde9 	.word	0x0800cde9
 8008594:	0800ce69 	.word	0x0800ce69

08008598 <__lshift>:
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	460c      	mov	r4, r1
 800859e:	6849      	ldr	r1, [r1, #4]
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085a6:	68a3      	ldr	r3, [r4, #8]
 80085a8:	4607      	mov	r7, r0
 80085aa:	4691      	mov	r9, r2
 80085ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085b0:	f108 0601 	add.w	r6, r8, #1
 80085b4:	42b3      	cmp	r3, r6
 80085b6:	db0b      	blt.n	80085d0 <__lshift+0x38>
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7ff fddf 	bl	800817c <_Balloc>
 80085be:	4605      	mov	r5, r0
 80085c0:	b948      	cbnz	r0, 80085d6 <__lshift+0x3e>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b28      	ldr	r3, [pc, #160]	@ (8008668 <__lshift+0xd0>)
 80085c6:	4829      	ldr	r0, [pc, #164]	@ (800866c <__lshift+0xd4>)
 80085c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80085cc:	f001 f9c6 	bl	800995c <__assert_func>
 80085d0:	3101      	adds	r1, #1
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	e7ee      	b.n	80085b4 <__lshift+0x1c>
 80085d6:	2300      	movs	r3, #0
 80085d8:	f100 0114 	add.w	r1, r0, #20
 80085dc:	f100 0210 	add.w	r2, r0, #16
 80085e0:	4618      	mov	r0, r3
 80085e2:	4553      	cmp	r3, sl
 80085e4:	db33      	blt.n	800864e <__lshift+0xb6>
 80085e6:	6920      	ldr	r0, [r4, #16]
 80085e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085ec:	f104 0314 	add.w	r3, r4, #20
 80085f0:	f019 091f 	ands.w	r9, r9, #31
 80085f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085fc:	d02b      	beq.n	8008656 <__lshift+0xbe>
 80085fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008602:	468a      	mov	sl, r1
 8008604:	2200      	movs	r2, #0
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	fa00 f009 	lsl.w	r0, r0, r9
 800860c:	4310      	orrs	r0, r2
 800860e:	f84a 0b04 	str.w	r0, [sl], #4
 8008612:	f853 2b04 	ldr.w	r2, [r3], #4
 8008616:	459c      	cmp	ip, r3
 8008618:	fa22 f20e 	lsr.w	r2, r2, lr
 800861c:	d8f3      	bhi.n	8008606 <__lshift+0x6e>
 800861e:	ebac 0304 	sub.w	r3, ip, r4
 8008622:	3b15      	subs	r3, #21
 8008624:	f023 0303 	bic.w	r3, r3, #3
 8008628:	3304      	adds	r3, #4
 800862a:	f104 0015 	add.w	r0, r4, #21
 800862e:	4584      	cmp	ip, r0
 8008630:	bf38      	it	cc
 8008632:	2304      	movcc	r3, #4
 8008634:	50ca      	str	r2, [r1, r3]
 8008636:	b10a      	cbz	r2, 800863c <__lshift+0xa4>
 8008638:	f108 0602 	add.w	r6, r8, #2
 800863c:	3e01      	subs	r6, #1
 800863e:	4638      	mov	r0, r7
 8008640:	612e      	str	r6, [r5, #16]
 8008642:	4621      	mov	r1, r4
 8008644:	f7ff fdda 	bl	80081fc <_Bfree>
 8008648:	4628      	mov	r0, r5
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008652:	3301      	adds	r3, #1
 8008654:	e7c5      	b.n	80085e2 <__lshift+0x4a>
 8008656:	3904      	subs	r1, #4
 8008658:	f853 2b04 	ldr.w	r2, [r3], #4
 800865c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008660:	459c      	cmp	ip, r3
 8008662:	d8f9      	bhi.n	8008658 <__lshift+0xc0>
 8008664:	e7ea      	b.n	800863c <__lshift+0xa4>
 8008666:	bf00      	nop
 8008668:	0800ce58 	.word	0x0800ce58
 800866c:	0800ce69 	.word	0x0800ce69

08008670 <__mcmp>:
 8008670:	690a      	ldr	r2, [r1, #16]
 8008672:	4603      	mov	r3, r0
 8008674:	6900      	ldr	r0, [r0, #16]
 8008676:	1a80      	subs	r0, r0, r2
 8008678:	b530      	push	{r4, r5, lr}
 800867a:	d10e      	bne.n	800869a <__mcmp+0x2a>
 800867c:	3314      	adds	r3, #20
 800867e:	3114      	adds	r1, #20
 8008680:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008684:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800868c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008690:	4295      	cmp	r5, r2
 8008692:	d003      	beq.n	800869c <__mcmp+0x2c>
 8008694:	d205      	bcs.n	80086a2 <__mcmp+0x32>
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	bd30      	pop	{r4, r5, pc}
 800869c:	42a3      	cmp	r3, r4
 800869e:	d3f3      	bcc.n	8008688 <__mcmp+0x18>
 80086a0:	e7fb      	b.n	800869a <__mcmp+0x2a>
 80086a2:	2001      	movs	r0, #1
 80086a4:	e7f9      	b.n	800869a <__mcmp+0x2a>
	...

080086a8 <__mdiff>:
 80086a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4689      	mov	r9, r1
 80086ae:	4606      	mov	r6, r0
 80086b0:	4611      	mov	r1, r2
 80086b2:	4648      	mov	r0, r9
 80086b4:	4614      	mov	r4, r2
 80086b6:	f7ff ffdb 	bl	8008670 <__mcmp>
 80086ba:	1e05      	subs	r5, r0, #0
 80086bc:	d112      	bne.n	80086e4 <__mdiff+0x3c>
 80086be:	4629      	mov	r1, r5
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7ff fd5b 	bl	800817c <_Balloc>
 80086c6:	4602      	mov	r2, r0
 80086c8:	b928      	cbnz	r0, 80086d6 <__mdiff+0x2e>
 80086ca:	4b3f      	ldr	r3, [pc, #252]	@ (80087c8 <__mdiff+0x120>)
 80086cc:	f240 2137 	movw	r1, #567	@ 0x237
 80086d0:	483e      	ldr	r0, [pc, #248]	@ (80087cc <__mdiff+0x124>)
 80086d2:	f001 f943 	bl	800995c <__assert_func>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086dc:	4610      	mov	r0, r2
 80086de:	b003      	add	sp, #12
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	bfbc      	itt	lt
 80086e6:	464b      	movlt	r3, r9
 80086e8:	46a1      	movlt	r9, r4
 80086ea:	4630      	mov	r0, r6
 80086ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086f0:	bfba      	itte	lt
 80086f2:	461c      	movlt	r4, r3
 80086f4:	2501      	movlt	r5, #1
 80086f6:	2500      	movge	r5, #0
 80086f8:	f7ff fd40 	bl	800817c <_Balloc>
 80086fc:	4602      	mov	r2, r0
 80086fe:	b918      	cbnz	r0, 8008708 <__mdiff+0x60>
 8008700:	4b31      	ldr	r3, [pc, #196]	@ (80087c8 <__mdiff+0x120>)
 8008702:	f240 2145 	movw	r1, #581	@ 0x245
 8008706:	e7e3      	b.n	80086d0 <__mdiff+0x28>
 8008708:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800870c:	6926      	ldr	r6, [r4, #16]
 800870e:	60c5      	str	r5, [r0, #12]
 8008710:	f109 0310 	add.w	r3, r9, #16
 8008714:	f109 0514 	add.w	r5, r9, #20
 8008718:	f104 0e14 	add.w	lr, r4, #20
 800871c:	f100 0b14 	add.w	fp, r0, #20
 8008720:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008724:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	46d9      	mov	r9, fp
 800872c:	f04f 0c00 	mov.w	ip, #0
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008736:	f853 af04 	ldr.w	sl, [r3, #4]!
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	fa1f f38a 	uxth.w	r3, sl
 8008740:	4619      	mov	r1, r3
 8008742:	b283      	uxth	r3, r0
 8008744:	1acb      	subs	r3, r1, r3
 8008746:	0c00      	lsrs	r0, r0, #16
 8008748:	4463      	add	r3, ip
 800874a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800874e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008752:	b29b      	uxth	r3, r3
 8008754:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008758:	4576      	cmp	r6, lr
 800875a:	f849 3b04 	str.w	r3, [r9], #4
 800875e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008762:	d8e5      	bhi.n	8008730 <__mdiff+0x88>
 8008764:	1b33      	subs	r3, r6, r4
 8008766:	3b15      	subs	r3, #21
 8008768:	f023 0303 	bic.w	r3, r3, #3
 800876c:	3415      	adds	r4, #21
 800876e:	3304      	adds	r3, #4
 8008770:	42a6      	cmp	r6, r4
 8008772:	bf38      	it	cc
 8008774:	2304      	movcc	r3, #4
 8008776:	441d      	add	r5, r3
 8008778:	445b      	add	r3, fp
 800877a:	461e      	mov	r6, r3
 800877c:	462c      	mov	r4, r5
 800877e:	4544      	cmp	r4, r8
 8008780:	d30e      	bcc.n	80087a0 <__mdiff+0xf8>
 8008782:	f108 0103 	add.w	r1, r8, #3
 8008786:	1b49      	subs	r1, r1, r5
 8008788:	f021 0103 	bic.w	r1, r1, #3
 800878c:	3d03      	subs	r5, #3
 800878e:	45a8      	cmp	r8, r5
 8008790:	bf38      	it	cc
 8008792:	2100      	movcc	r1, #0
 8008794:	440b      	add	r3, r1
 8008796:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800879a:	b191      	cbz	r1, 80087c2 <__mdiff+0x11a>
 800879c:	6117      	str	r7, [r2, #16]
 800879e:	e79d      	b.n	80086dc <__mdiff+0x34>
 80087a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80087a4:	46e6      	mov	lr, ip
 80087a6:	0c08      	lsrs	r0, r1, #16
 80087a8:	fa1c fc81 	uxtah	ip, ip, r1
 80087ac:	4471      	add	r1, lr
 80087ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80087b2:	b289      	uxth	r1, r1
 80087b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087b8:	f846 1b04 	str.w	r1, [r6], #4
 80087bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087c0:	e7dd      	b.n	800877e <__mdiff+0xd6>
 80087c2:	3f01      	subs	r7, #1
 80087c4:	e7e7      	b.n	8008796 <__mdiff+0xee>
 80087c6:	bf00      	nop
 80087c8:	0800ce58 	.word	0x0800ce58
 80087cc:	0800ce69 	.word	0x0800ce69

080087d0 <__d2b>:
 80087d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	460f      	mov	r7, r1
 80087d6:	2101      	movs	r1, #1
 80087d8:	ec59 8b10 	vmov	r8, r9, d0
 80087dc:	4616      	mov	r6, r2
 80087de:	f7ff fccd 	bl	800817c <_Balloc>
 80087e2:	4604      	mov	r4, r0
 80087e4:	b930      	cbnz	r0, 80087f4 <__d2b+0x24>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4b23      	ldr	r3, [pc, #140]	@ (8008878 <__d2b+0xa8>)
 80087ea:	4824      	ldr	r0, [pc, #144]	@ (800887c <__d2b+0xac>)
 80087ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80087f0:	f001 f8b4 	bl	800995c <__assert_func>
 80087f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087fc:	b10d      	cbz	r5, 8008802 <__d2b+0x32>
 80087fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	f1b8 0300 	subs.w	r3, r8, #0
 8008808:	d023      	beq.n	8008852 <__d2b+0x82>
 800880a:	4668      	mov	r0, sp
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	f7ff fd7c 	bl	800830a <__lo0bits>
 8008812:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008816:	b1d0      	cbz	r0, 800884e <__d2b+0x7e>
 8008818:	f1c0 0320 	rsb	r3, r0, #32
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	430b      	orrs	r3, r1
 8008822:	40c2      	lsrs	r2, r0
 8008824:	6163      	str	r3, [r4, #20]
 8008826:	9201      	str	r2, [sp, #4]
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	61a3      	str	r3, [r4, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf0c      	ite	eq
 8008830:	2201      	moveq	r2, #1
 8008832:	2202      	movne	r2, #2
 8008834:	6122      	str	r2, [r4, #16]
 8008836:	b1a5      	cbz	r5, 8008862 <__d2b+0x92>
 8008838:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800883c:	4405      	add	r5, r0
 800883e:	603d      	str	r5, [r7, #0]
 8008840:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008844:	6030      	str	r0, [r6, #0]
 8008846:	4620      	mov	r0, r4
 8008848:	b003      	add	sp, #12
 800884a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800884e:	6161      	str	r1, [r4, #20]
 8008850:	e7ea      	b.n	8008828 <__d2b+0x58>
 8008852:	a801      	add	r0, sp, #4
 8008854:	f7ff fd59 	bl	800830a <__lo0bits>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	6163      	str	r3, [r4, #20]
 800885c:	3020      	adds	r0, #32
 800885e:	2201      	movs	r2, #1
 8008860:	e7e8      	b.n	8008834 <__d2b+0x64>
 8008862:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008866:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800886a:	6038      	str	r0, [r7, #0]
 800886c:	6918      	ldr	r0, [r3, #16]
 800886e:	f7ff fd2d 	bl	80082cc <__hi0bits>
 8008872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008876:	e7e5      	b.n	8008844 <__d2b+0x74>
 8008878:	0800ce58 	.word	0x0800ce58
 800887c:	0800ce69 	.word	0x0800ce69

08008880 <__sfputc_r>:
 8008880:	6893      	ldr	r3, [r2, #8]
 8008882:	3b01      	subs	r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	b410      	push	{r4}
 8008888:	6093      	str	r3, [r2, #8]
 800888a:	da08      	bge.n	800889e <__sfputc_r+0x1e>
 800888c:	6994      	ldr	r4, [r2, #24]
 800888e:	42a3      	cmp	r3, r4
 8008890:	db01      	blt.n	8008896 <__sfputc_r+0x16>
 8008892:	290a      	cmp	r1, #10
 8008894:	d103      	bne.n	800889e <__sfputc_r+0x1e>
 8008896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889a:	f000 bf77 	b.w	800978c <__swbuf_r>
 800889e:	6813      	ldr	r3, [r2, #0]
 80088a0:	1c58      	adds	r0, r3, #1
 80088a2:	6010      	str	r0, [r2, #0]
 80088a4:	7019      	strb	r1, [r3, #0]
 80088a6:	4608      	mov	r0, r1
 80088a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <__sfputs_r>:
 80088ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b0:	4606      	mov	r6, r0
 80088b2:	460f      	mov	r7, r1
 80088b4:	4614      	mov	r4, r2
 80088b6:	18d5      	adds	r5, r2, r3
 80088b8:	42ac      	cmp	r4, r5
 80088ba:	d101      	bne.n	80088c0 <__sfputs_r+0x12>
 80088bc:	2000      	movs	r0, #0
 80088be:	e007      	b.n	80088d0 <__sfputs_r+0x22>
 80088c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c4:	463a      	mov	r2, r7
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7ff ffda 	bl	8008880 <__sfputc_r>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d1f3      	bne.n	80088b8 <__sfputs_r+0xa>
 80088d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088d4 <_vfiprintf_r>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	460d      	mov	r5, r1
 80088da:	b09d      	sub	sp, #116	@ 0x74
 80088dc:	4614      	mov	r4, r2
 80088de:	4698      	mov	r8, r3
 80088e0:	4606      	mov	r6, r0
 80088e2:	b118      	cbz	r0, 80088ec <_vfiprintf_r+0x18>
 80088e4:	6a03      	ldr	r3, [r0, #32]
 80088e6:	b90b      	cbnz	r3, 80088ec <_vfiprintf_r+0x18>
 80088e8:	f7fe fc4a 	bl	8007180 <__sinit>
 80088ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088ee:	07d9      	lsls	r1, r3, #31
 80088f0:	d405      	bmi.n	80088fe <_vfiprintf_r+0x2a>
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	059a      	lsls	r2, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_vfiprintf_r+0x2a>
 80088f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fa:	f7fe fd8e 	bl	800741a <__retarget_lock_acquire_recursive>
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	071b      	lsls	r3, r3, #28
 8008902:	d501      	bpl.n	8008908 <_vfiprintf_r+0x34>
 8008904:	692b      	ldr	r3, [r5, #16]
 8008906:	b99b      	cbnz	r3, 8008930 <_vfiprintf_r+0x5c>
 8008908:	4629      	mov	r1, r5
 800890a:	4630      	mov	r0, r6
 800890c:	f000 ff7c 	bl	8009808 <__swsetup_r>
 8008910:	b170      	cbz	r0, 8008930 <_vfiprintf_r+0x5c>
 8008912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008914:	07dc      	lsls	r4, r3, #31
 8008916:	d504      	bpl.n	8008922 <_vfiprintf_r+0x4e>
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	b01d      	add	sp, #116	@ 0x74
 800891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	0598      	lsls	r0, r3, #22
 8008926:	d4f7      	bmi.n	8008918 <_vfiprintf_r+0x44>
 8008928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800892a:	f7fe fd77 	bl	800741c <__retarget_lock_release_recursive>
 800892e:	e7f3      	b.n	8008918 <_vfiprintf_r+0x44>
 8008930:	2300      	movs	r3, #0
 8008932:	9309      	str	r3, [sp, #36]	@ 0x24
 8008934:	2320      	movs	r3, #32
 8008936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800893a:	f8cd 800c 	str.w	r8, [sp, #12]
 800893e:	2330      	movs	r3, #48	@ 0x30
 8008940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008af0 <_vfiprintf_r+0x21c>
 8008944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008948:	f04f 0901 	mov.w	r9, #1
 800894c:	4623      	mov	r3, r4
 800894e:	469a      	mov	sl, r3
 8008950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008954:	b10a      	cbz	r2, 800895a <_vfiprintf_r+0x86>
 8008956:	2a25      	cmp	r2, #37	@ 0x25
 8008958:	d1f9      	bne.n	800894e <_vfiprintf_r+0x7a>
 800895a:	ebba 0b04 	subs.w	fp, sl, r4
 800895e:	d00b      	beq.n	8008978 <_vfiprintf_r+0xa4>
 8008960:	465b      	mov	r3, fp
 8008962:	4622      	mov	r2, r4
 8008964:	4629      	mov	r1, r5
 8008966:	4630      	mov	r0, r6
 8008968:	f7ff ffa1 	bl	80088ae <__sfputs_r>
 800896c:	3001      	adds	r0, #1
 800896e:	f000 80a7 	beq.w	8008ac0 <_vfiprintf_r+0x1ec>
 8008972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008974:	445a      	add	r2, fp
 8008976:	9209      	str	r2, [sp, #36]	@ 0x24
 8008978:	f89a 3000 	ldrb.w	r3, [sl]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 809f 	beq.w	8008ac0 <_vfiprintf_r+0x1ec>
 8008982:	2300      	movs	r3, #0
 8008984:	f04f 32ff 	mov.w	r2, #4294967295
 8008988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800898c:	f10a 0a01 	add.w	sl, sl, #1
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008998:	931a      	str	r3, [sp, #104]	@ 0x68
 800899a:	4654      	mov	r4, sl
 800899c:	2205      	movs	r2, #5
 800899e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a2:	4853      	ldr	r0, [pc, #332]	@ (8008af0 <_vfiprintf_r+0x21c>)
 80089a4:	f7f7 fc14 	bl	80001d0 <memchr>
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	b9d8      	cbnz	r0, 80089e4 <_vfiprintf_r+0x110>
 80089ac:	06d1      	lsls	r1, r2, #27
 80089ae:	bf44      	itt	mi
 80089b0:	2320      	movmi	r3, #32
 80089b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b6:	0713      	lsls	r3, r2, #28
 80089b8:	bf44      	itt	mi
 80089ba:	232b      	movmi	r3, #43	@ 0x2b
 80089bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c0:	f89a 3000 	ldrb.w	r3, [sl]
 80089c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c6:	d015      	beq.n	80089f4 <_vfiprintf_r+0x120>
 80089c8:	9a07      	ldr	r2, [sp, #28]
 80089ca:	4654      	mov	r4, sl
 80089cc:	2000      	movs	r0, #0
 80089ce:	f04f 0c0a 	mov.w	ip, #10
 80089d2:	4621      	mov	r1, r4
 80089d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d8:	3b30      	subs	r3, #48	@ 0x30
 80089da:	2b09      	cmp	r3, #9
 80089dc:	d94b      	bls.n	8008a76 <_vfiprintf_r+0x1a2>
 80089de:	b1b0      	cbz	r0, 8008a0e <_vfiprintf_r+0x13a>
 80089e0:	9207      	str	r2, [sp, #28]
 80089e2:	e014      	b.n	8008a0e <_vfiprintf_r+0x13a>
 80089e4:	eba0 0308 	sub.w	r3, r0, r8
 80089e8:	fa09 f303 	lsl.w	r3, r9, r3
 80089ec:	4313      	orrs	r3, r2
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	46a2      	mov	sl, r4
 80089f2:	e7d2      	b.n	800899a <_vfiprintf_r+0xc6>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	1d19      	adds	r1, r3, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	9103      	str	r1, [sp, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bfbb      	ittet	lt
 8008a00:	425b      	neglt	r3, r3
 8008a02:	f042 0202 	orrlt.w	r2, r2, #2
 8008a06:	9307      	strge	r3, [sp, #28]
 8008a08:	9307      	strlt	r3, [sp, #28]
 8008a0a:	bfb8      	it	lt
 8008a0c:	9204      	strlt	r2, [sp, #16]
 8008a0e:	7823      	ldrb	r3, [r4, #0]
 8008a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a12:	d10a      	bne.n	8008a2a <_vfiprintf_r+0x156>
 8008a14:	7863      	ldrb	r3, [r4, #1]
 8008a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a18:	d132      	bne.n	8008a80 <_vfiprintf_r+0x1ac>
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	1d1a      	adds	r2, r3, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	9203      	str	r2, [sp, #12]
 8008a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a26:	3402      	adds	r4, #2
 8008a28:	9305      	str	r3, [sp, #20]
 8008a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b00 <_vfiprintf_r+0x22c>
 8008a2e:	7821      	ldrb	r1, [r4, #0]
 8008a30:	2203      	movs	r2, #3
 8008a32:	4650      	mov	r0, sl
 8008a34:	f7f7 fbcc 	bl	80001d0 <memchr>
 8008a38:	b138      	cbz	r0, 8008a4a <_vfiprintf_r+0x176>
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	eba0 000a 	sub.w	r0, r0, sl
 8008a40:	2240      	movs	r2, #64	@ 0x40
 8008a42:	4082      	lsls	r2, r0
 8008a44:	4313      	orrs	r3, r2
 8008a46:	3401      	adds	r4, #1
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	4829      	ldr	r0, [pc, #164]	@ (8008af4 <_vfiprintf_r+0x220>)
 8008a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a54:	2206      	movs	r2, #6
 8008a56:	f7f7 fbbb 	bl	80001d0 <memchr>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d03f      	beq.n	8008ade <_vfiprintf_r+0x20a>
 8008a5e:	4b26      	ldr	r3, [pc, #152]	@ (8008af8 <_vfiprintf_r+0x224>)
 8008a60:	bb1b      	cbnz	r3, 8008aaa <_vfiprintf_r+0x1d6>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	3307      	adds	r3, #7
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a70:	443b      	add	r3, r7
 8008a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a74:	e76a      	b.n	800894c <_vfiprintf_r+0x78>
 8008a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e7a8      	b.n	80089d2 <_vfiprintf_r+0xfe>
 8008a80:	2300      	movs	r3, #0
 8008a82:	3401      	adds	r4, #1
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	4619      	mov	r1, r3
 8008a88:	f04f 0c0a 	mov.w	ip, #10
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a92:	3a30      	subs	r2, #48	@ 0x30
 8008a94:	2a09      	cmp	r2, #9
 8008a96:	d903      	bls.n	8008aa0 <_vfiprintf_r+0x1cc>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0c6      	beq.n	8008a2a <_vfiprintf_r+0x156>
 8008a9c:	9105      	str	r1, [sp, #20]
 8008a9e:	e7c4      	b.n	8008a2a <_vfiprintf_r+0x156>
 8008aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e7f0      	b.n	8008a8c <_vfiprintf_r+0x1b8>
 8008aaa:	ab03      	add	r3, sp, #12
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	462a      	mov	r2, r5
 8008ab0:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <_vfiprintf_r+0x228>)
 8008ab2:	a904      	add	r1, sp, #16
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7fd fe73 	bl	80067a0 <_printf_float>
 8008aba:	4607      	mov	r7, r0
 8008abc:	1c78      	adds	r0, r7, #1
 8008abe:	d1d6      	bne.n	8008a6e <_vfiprintf_r+0x19a>
 8008ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ac2:	07d9      	lsls	r1, r3, #31
 8008ac4:	d405      	bmi.n	8008ad2 <_vfiprintf_r+0x1fe>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	059a      	lsls	r2, r3, #22
 8008aca:	d402      	bmi.n	8008ad2 <_vfiprintf_r+0x1fe>
 8008acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ace:	f7fe fca5 	bl	800741c <__retarget_lock_release_recursive>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	065b      	lsls	r3, r3, #25
 8008ad6:	f53f af1f 	bmi.w	8008918 <_vfiprintf_r+0x44>
 8008ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008adc:	e71e      	b.n	800891c <_vfiprintf_r+0x48>
 8008ade:	ab03      	add	r3, sp, #12
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <_vfiprintf_r+0x228>)
 8008ae6:	a904      	add	r1, sp, #16
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7fe f8f1 	bl	8006cd0 <_printf_i>
 8008aee:	e7e4      	b.n	8008aba <_vfiprintf_r+0x1e6>
 8008af0:	0800cfc0 	.word	0x0800cfc0
 8008af4:	0800cfca 	.word	0x0800cfca
 8008af8:	080067a1 	.word	0x080067a1
 8008afc:	080088af 	.word	0x080088af
 8008b00:	0800cfc6 	.word	0x0800cfc6

08008b04 <__swhatbuf_r>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	460c      	mov	r4, r1
 8008b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	b096      	sub	sp, #88	@ 0x58
 8008b10:	4615      	mov	r5, r2
 8008b12:	461e      	mov	r6, r3
 8008b14:	da0d      	bge.n	8008b32 <__swhatbuf_r+0x2e>
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b1c:	f04f 0100 	mov.w	r1, #0
 8008b20:	bf14      	ite	ne
 8008b22:	2340      	movne	r3, #64	@ 0x40
 8008b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b28:	2000      	movs	r0, #0
 8008b2a:	6031      	str	r1, [r6, #0]
 8008b2c:	602b      	str	r3, [r5, #0]
 8008b2e:	b016      	add	sp, #88	@ 0x58
 8008b30:	bd70      	pop	{r4, r5, r6, pc}
 8008b32:	466a      	mov	r2, sp
 8008b34:	f000 fef0 	bl	8009918 <_fstat_r>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	dbec      	blt.n	8008b16 <__swhatbuf_r+0x12>
 8008b3c:	9901      	ldr	r1, [sp, #4]
 8008b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b46:	4259      	negs	r1, r3
 8008b48:	4159      	adcs	r1, r3
 8008b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b4e:	e7eb      	b.n	8008b28 <__swhatbuf_r+0x24>

08008b50 <__smakebuf_r>:
 8008b50:	898b      	ldrh	r3, [r1, #12]
 8008b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b54:	079d      	lsls	r5, r3, #30
 8008b56:	4606      	mov	r6, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	d507      	bpl.n	8008b6c <__smakebuf_r+0x1c>
 8008b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	6123      	str	r3, [r4, #16]
 8008b64:	2301      	movs	r3, #1
 8008b66:	6163      	str	r3, [r4, #20]
 8008b68:	b003      	add	sp, #12
 8008b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6c:	ab01      	add	r3, sp, #4
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f7ff ffc8 	bl	8008b04 <__swhatbuf_r>
 8008b74:	9f00      	ldr	r7, [sp, #0]
 8008b76:	4605      	mov	r5, r0
 8008b78:	4639      	mov	r1, r7
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f7fd fce4 	bl	8006548 <_malloc_r>
 8008b80:	b948      	cbnz	r0, 8008b96 <__smakebuf_r+0x46>
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	059a      	lsls	r2, r3, #22
 8008b88:	d4ee      	bmi.n	8008b68 <__smakebuf_r+0x18>
 8008b8a:	f023 0303 	bic.w	r3, r3, #3
 8008b8e:	f043 0302 	orr.w	r3, r3, #2
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	e7e2      	b.n	8008b5c <__smakebuf_r+0xc>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	6020      	str	r0, [r4, #0]
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ba6:	b15b      	cbz	r3, 8008bc0 <__smakebuf_r+0x70>
 8008ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bac:	4630      	mov	r0, r6
 8008bae:	f000 fec5 	bl	800993c <_isatty_r>
 8008bb2:	b128      	cbz	r0, 8008bc0 <__smakebuf_r+0x70>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	431d      	orrs	r5, r3
 8008bc4:	81a5      	strh	r5, [r4, #12]
 8008bc6:	e7cf      	b.n	8008b68 <__smakebuf_r+0x18>

08008bc8 <wcvt>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	ec57 6b10 	vmov	r6, r7, d0
 8008bd0:	2f00      	cmp	r7, #0
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	463b      	mov	r3, r7
 8008bda:	bfbb      	ittet	lt
 8008bdc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008be0:	461f      	movlt	r7, r3
 8008be2:	2300      	movge	r3, #0
 8008be4:	232d      	movlt	r3, #45	@ 0x2d
 8008be6:	600b      	str	r3, [r1, #0]
 8008be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008bee:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8008bf2:	4691      	mov	r9, r2
 8008bf4:	f023 0820 	bic.w	r8, r3, #32
 8008bf8:	bfbc      	itt	lt
 8008bfa:	4632      	movlt	r2, r6
 8008bfc:	4616      	movlt	r6, r2
 8008bfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c02:	d005      	beq.n	8008c10 <wcvt+0x48>
 8008c04:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c08:	d100      	bne.n	8008c0c <wcvt+0x44>
 8008c0a:	3401      	adds	r4, #1
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	e000      	b.n	8008c12 <wcvt+0x4a>
 8008c10:	2103      	movs	r1, #3
 8008c12:	ab03      	add	r3, sp, #12
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	ab02      	add	r3, sp, #8
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	ec47 6b10 	vmov	d0, r6, r7
 8008c1e:	4653      	mov	r3, sl
 8008c20:	4622      	mov	r2, r4
 8008c22:	f7fe fc95 	bl	8007550 <_dtoa_r>
 8008c26:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	d125      	bne.n	8008c7a <wcvt+0xb2>
 8008c2e:	f019 0f01 	tst.w	r9, #1
 8008c32:	d10f      	bne.n	8008c54 <wcvt+0x8c>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	1b5b      	subs	r3, r3, r5
 8008c38:	f8cb 3000 	str.w	r3, [fp]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f8db 2000 	ldr.w	r2, [fp]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	dd02      	ble.n	8008c4c <wcvt+0x84>
 8008c46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	db2d      	blt.n	8008ca8 <wcvt+0xe0>
 8008c4c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008c4e:	b005      	add	sp, #20
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	eb00 0904 	add.w	r9, r0, r4
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c64:	b108      	cbz	r0, 8008c6a <wcvt+0xa2>
 8008c66:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c6a:	2230      	movs	r2, #48	@ 0x30
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	454b      	cmp	r3, r9
 8008c70:	d2e0      	bcs.n	8008c34 <wcvt+0x6c>
 8008c72:	1c59      	adds	r1, r3, #1
 8008c74:	9103      	str	r1, [sp, #12]
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e7f8      	b.n	8008c6c <wcvt+0xa4>
 8008c7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c7e:	eb00 0904 	add.w	r9, r0, r4
 8008c82:	d1e9      	bne.n	8008c58 <wcvt+0x90>
 8008c84:	7803      	ldrb	r3, [r0, #0]
 8008c86:	2b30      	cmp	r3, #48	@ 0x30
 8008c88:	d10a      	bne.n	8008ca0 <wcvt+0xd8>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c96:	b918      	cbnz	r0, 8008ca0 <wcvt+0xd8>
 8008c98:	f1c4 0401 	rsb	r4, r4, #1
 8008c9c:	f8ca 4000 	str.w	r4, [sl]
 8008ca0:	f8da 3000 	ldr.w	r3, [sl]
 8008ca4:	4499      	add	r9, r3
 8008ca6:	e7d7      	b.n	8008c58 <wcvt+0x90>
 8008ca8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008caa:	5cea      	ldrb	r2, [r5, r3]
 8008cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	e7c4      	b.n	8008c3e <wcvt+0x76>
 8008cb4:	0000      	movs	r0, r0
	...

08008cb8 <_svfwprintf_r>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	b0d5      	sub	sp, #340	@ 0x154
 8008cbe:	461e      	mov	r6, r3
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	468b      	mov	fp, r1
 8008cc4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008cc6:	4682      	mov	sl, r0
 8008cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cca:	f7fe fb21 	bl	8007310 <_localeconv_r>
 8008cce:	6803      	ldr	r3, [r0, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	9318      	str	r3, [sp, #96]	@ 0x60
 8008cd4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008cd8:	061f      	lsls	r7, r3, #24
 8008cda:	d515      	bpl.n	8008d08 <_svfwprintf_r+0x50>
 8008cdc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008ce0:	b993      	cbnz	r3, 8008d08 <_svfwprintf_r+0x50>
 8008ce2:	2140      	movs	r1, #64	@ 0x40
 8008ce4:	4650      	mov	r0, sl
 8008ce6:	f7fd fc2f 	bl	8006548 <_malloc_r>
 8008cea:	f8cb 0000 	str.w	r0, [fp]
 8008cee:	f8cb 0010 	str.w	r0, [fp, #16]
 8008cf2:	b930      	cbnz	r0, 8008d02 <_svfwprintf_r+0x4a>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	f8ca 3000 	str.w	r3, [sl]
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d00:	e115      	b.n	8008f2e <_svfwprintf_r+0x276>
 8008d02:	2340      	movs	r3, #64	@ 0x40
 8008d04:	f8cb 3014 	str.w	r3, [fp, #20]
 8008d08:	ed9f 7b91 	vldr	d7, [pc, #580]	@ 8008f50 <_svfwprintf_r+0x298>
 8008d0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008d10:	2300      	movs	r3, #0
 8008d12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d16:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1a:	461c      	mov	r4, r3
 8008d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d20:	b10a      	cbz	r2, 8008d26 <_svfwprintf_r+0x6e>
 8008d22:	2a25      	cmp	r2, #37	@ 0x25
 8008d24:	d1f9      	bne.n	8008d1a <_svfwprintf_r+0x62>
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d00d      	beq.n	8008d48 <_svfwprintf_r+0x90>
 8008d2c:	1ae5      	subs	r5, r4, r3
 8008d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d30:	462b      	mov	r3, r5
 8008d32:	4659      	mov	r1, fp
 8008d34:	4650      	mov	r0, sl
 8008d36:	f000 fec7 	bl	8009ac8 <__ssputs_r>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f000 80f2 	beq.w	8008f24 <_svfwprintf_r+0x26c>
 8008d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d42:	eb03 03a5 	add.w	r3, r3, r5, asr #2
 8008d46:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 80ea 	beq.w	8008f24 <_svfwprintf_r+0x26c>
 8008d50:	2200      	movs	r2, #0
 8008d52:	1d23      	adds	r3, r4, #4
 8008d54:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d56:	f04f 34ff 	mov.w	r4, #4294967295
 8008d5a:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d5c:	4615      	mov	r5, r2
 8008d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d62:	9207      	str	r2, [sp, #28]
 8008d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d66:	9b07      	ldr	r3, [sp, #28]
 8008d68:	2b39      	cmp	r3, #57	@ 0x39
 8008d6a:	d872      	bhi.n	8008e52 <_svfwprintf_r+0x19a>
 8008d6c:	2b1f      	cmp	r3, #31
 8008d6e:	f240 8358 	bls.w	8009422 <_svfwprintf_r+0x76a>
 8008d72:	9b07      	ldr	r3, [sp, #28]
 8008d74:	3b20      	subs	r3, #32
 8008d76:	2b19      	cmp	r3, #25
 8008d78:	f200 8353 	bhi.w	8009422 <_svfwprintf_r+0x76a>
 8008d7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008d80:	03510073 	.word	0x03510073
 8008d84:	00780351 	.word	0x00780351
 8008d88:	03510351 	.word	0x03510351
 8008d8c:	03510351 	.word	0x03510351
 8008d90:	03510351 	.word	0x03510351
 8008d94:	0086007c 	.word	0x0086007c
 8008d98:	00830351 	.word	0x00830351
 8008d9c:	03510088 	.word	0x03510088
 8008da0:	00a600a3 	.word	0x00a600a3
 8008da4:	00a600a6 	.word	0x00a600a6
 8008da8:	00a600a6 	.word	0x00a600a6
 8008dac:	00a600a6 	.word	0x00a600a6
 8008db0:	00a600a6 	.word	0x00a600a6
 8008db4:	2b33      	cmp	r3, #51	@ 0x33
 8008db6:	f200 8334 	bhi.w	8009422 <_svfwprintf_r+0x76a>
 8008dba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008dbe:	00df      	.short	0x00df
 8008dc0:	00df0332 	.word	0x00df0332
 8008dc4:	03320332 	.word	0x03320332
 8008dc8:	03320332 	.word	0x03320332
 8008dcc:	0332009a 	.word	0x0332009a
 8008dd0:	03320332 	.word	0x03320332
 8008dd4:	03320332 	.word	0x03320332
 8008dd8:	03320332 	.word	0x03320332
 8008ddc:	03320332 	.word	0x03320332
 8008de0:	03320332 	.word	0x03320332
 8008de4:	03320308 	.word	0x03320308
 8008de8:	03320332 	.word	0x03320332
 8008dec:	03320332 	.word	0x03320332
 8008df0:	03320332 	.word	0x03320332
 8008df4:	03320332 	.word	0x03320332
 8008df8:	00a30332 	.word	0x00a30332
 8008dfc:	00df00cf 	.word	0x00df00cf
 8008e00:	00df00df 	.word	0x00df00df
 8008e04:	00cf009d 	.word	0x00cf009d
 8008e08:	03320332 	.word	0x03320332
 8008e0c:	033200a0 	.word	0x033200a0
 8008e10:	027f0274 	.word	0x027f0274
 8008e14:	00a0029d 	.word	0x00a0029d
 8008e18:	02ac0332 	.word	0x02ac0332
 8008e1c:	02fc0332 	.word	0x02fc0332
 8008e20:	03320332 	.word	0x03320332
 8008e24:	0034      	.short	0x0034
 8008e26:	4b4c      	ldr	r3, [pc, #304]	@ (8008f58 <_svfwprintf_r+0x2a0>)
 8008e28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	06e9      	lsls	r1, r5, #27
 8008e2e:	f852 3b04 	ldr.w	r3, [r2], #4
 8008e32:	9208      	str	r2, [sp, #32]
 8008e34:	d402      	bmi.n	8008e3c <_svfwprintf_r+0x184>
 8008e36:	066a      	lsls	r2, r5, #25
 8008e38:	bf48      	it	mi
 8008e3a:	b29b      	uxthmi	r3, r3
 8008e3c:	07ef      	lsls	r7, r5, #31
 8008e3e:	d506      	bpl.n	8008e4e <_svfwprintf_r+0x196>
 8008e40:	b12b      	cbz	r3, 8008e4e <_svfwprintf_r+0x196>
 8008e42:	2230      	movs	r2, #48	@ 0x30
 8008e44:	921c      	str	r2, [sp, #112]	@ 0x70
 8008e46:	9a07      	ldr	r2, [sp, #28]
 8008e48:	921d      	str	r2, [sp, #116]	@ 0x74
 8008e4a:	f045 0502 	orr.w	r5, r5, #2
 8008e4e:	2202      	movs	r2, #2
 8008e50:	e23c      	b.n	80092cc <_svfwprintf_r+0x614>
 8008e52:	9b07      	ldr	r3, [sp, #28]
 8008e54:	3b45      	subs	r3, #69	@ 0x45
 8008e56:	2b33      	cmp	r3, #51	@ 0x33
 8008e58:	d9ac      	bls.n	8008db4 <_svfwprintf_r+0xfc>
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	932c      	str	r3, [sp, #176]	@ 0xb0
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008e62:	9608      	str	r6, [sp, #32]
 8008e64:	e06b      	b.n	8008f3e <_svfwprintf_r+0x286>
 8008e66:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e68:	b923      	cbnz	r3, 8008e74 <_svfwprintf_r+0x1bc>
 8008e6a:	2320      	movs	r3, #32
 8008e6c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008e6e:	e001      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008e70:	f045 0501 	orr.w	r5, r5, #1
 8008e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e76:	e772      	b.n	8008d5e <_svfwprintf_r+0xa6>
 8008e78:	f856 3b04 	ldr.w	r3, [r6], #4
 8008e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daf8      	bge.n	8008e74 <_svfwprintf_r+0x1bc>
 8008e82:	425b      	negs	r3, r3
 8008e84:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e86:	f045 0504 	orr.w	r5, r5, #4
 8008e8a:	e7f3      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008e8c:	232b      	movs	r3, #43	@ 0x2b
 8008e8e:	e7ed      	b.n	8008e6c <_svfwprintf_r+0x1b4>
 8008e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e96:	9207      	str	r2, [sp, #28]
 8008e98:	2a2a      	cmp	r2, #42	@ 0x2a
 8008e9a:	d111      	bne.n	8008ec0 <_svfwprintf_r+0x208>
 8008e9c:	f856 4b04 	ldr.w	r4, [r6], #4
 8008ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8008ea6:	e7e5      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008ea8:	fb01 2404 	mla	r4, r1, r4, r2
 8008eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb0:	9207      	str	r2, [sp, #28]
 8008eb2:	9a07      	ldr	r2, [sp, #28]
 8008eb4:	3a30      	subs	r2, #48	@ 0x30
 8008eb6:	2a09      	cmp	r2, #9
 8008eb8:	d9f6      	bls.n	8008ea8 <_svfwprintf_r+0x1f0>
 8008eba:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8008ebe:	e751      	b.n	8008d64 <_svfwprintf_r+0xac>
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	210a      	movs	r1, #10
 8008ec4:	e7f5      	b.n	8008eb2 <_svfwprintf_r+0x1fa>
 8008ec6:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8008eca:	e7d3      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ed0:	9b07      	ldr	r3, [sp, #28]
 8008ed2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ed4:	3b30      	subs	r3, #48	@ 0x30
 8008ed6:	210a      	movs	r1, #10
 8008ed8:	fb01 3302 	mla	r3, r1, r2, r3
 8008edc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	9207      	str	r2, [sp, #28]
 8008eee:	d9ef      	bls.n	8008ed0 <_svfwprintf_r+0x218>
 8008ef0:	e739      	b.n	8008d66 <_svfwprintf_r+0xae>
 8008ef2:	f045 0508 	orr.w	r5, r5, #8
 8008ef6:	e7bd      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008ef8:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 8008efc:	e7ba      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008efe:	f045 0510 	orr.w	r5, r5, #16
 8008f02:	e7b7      	b.n	8008e74 <_svfwprintf_r+0x1bc>
 8008f04:	4633      	mov	r3, r6
 8008f06:	06ee      	lsls	r6, r5, #27
 8008f08:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	d412      	bmi.n	8008f36 <_svfwprintf_r+0x27e>
 8008f10:	f000 fd90 	bl	8009a34 <btowc>
 8008f14:	1c44      	adds	r4, r0, #1
 8008f16:	d10e      	bne.n	8008f36 <_svfwprintf_r+0x27e>
 8008f18:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8008f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f20:	f8ab 300c 	strh.w	r3, [fp, #12]
 8008f24:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008f28:	065b      	lsls	r3, r3, #25
 8008f2a:	f53f aee6 	bmi.w	8008cfa <_svfwprintf_r+0x42>
 8008f2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008f30:	b055      	add	sp, #340	@ 0x154
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	2300      	movs	r3, #0
 8008f38:	902c      	str	r0, [sp, #176]	@ 0xb0
 8008f3a:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008f3c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008f3e:	4698      	mov	r8, r3
 8008f40:	2401      	movs	r4, #1
 8008f42:	461f      	mov	r7, r3
 8008f44:	461e      	mov	r6, r3
 8008f46:	f10d 09b0 	add.w	r9, sp, #176	@ 0xb0
 8008f4a:	e0f5      	b.n	8009138 <_svfwprintf_r+0x480>
 8008f4c:	f3af 8000 	nop.w
	...
 8008f58:	0800d014 	.word	0x0800d014
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	06e8      	lsls	r0, r5, #27
 8008f60:	f852 3b04 	ldr.w	r3, [r2], #4
 8008f64:	9208      	str	r2, [sp, #32]
 8008f66:	d402      	bmi.n	8008f6e <_svfwprintf_r+0x2b6>
 8008f68:	0669      	lsls	r1, r5, #25
 8008f6a:	bf48      	it	mi
 8008f6c:	b21b      	sxthmi	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	da02      	bge.n	8008f78 <_svfwprintf_r+0x2c0>
 8008f72:	222d      	movs	r2, #45	@ 0x2d
 8008f74:	425b      	negs	r3, r3
 8008f76:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f78:	2201      	movs	r2, #1
 8008f7a:	e1a9      	b.n	80092d0 <_svfwprintf_r+0x618>
 8008f7c:	3607      	adds	r6, #7
 8008f7e:	f026 0307 	bic.w	r3, r6, #7
 8008f82:	ecb3 7b02 	vldmia	r3!, {d7}
 8008f86:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008f8a:	9308      	str	r3, [sp, #32]
 8008f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f96:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f9c:	4ba8      	ldr	r3, [pc, #672]	@ (8009240 <_svfwprintf_r+0x588>)
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa2:	f7f7 fdc3 	bl	8000b2c <__aeabi_dcmpun>
 8008fa6:	b9f0      	cbnz	r0, 8008fe6 <_svfwprintf_r+0x32e>
 8008fa8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fac:	4ba4      	ldr	r3, [pc, #656]	@ (8009240 <_svfwprintf_r+0x588>)
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	f7f7 fd9d 	bl	8000af0 <__aeabi_dcmple>
 8008fb6:	b9b0      	cbnz	r0, 8008fe6 <_svfwprintf_r+0x32e>
 8008fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f7f7 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8008fc4:	b108      	cbz	r0, 8008fca <_svfwprintf_r+0x312>
 8008fc6:	232d      	movs	r3, #45	@ 0x2d
 8008fc8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008fca:	4a9e      	ldr	r2, [pc, #632]	@ (8009244 <_svfwprintf_r+0x58c>)
 8008fcc:	4b9e      	ldr	r3, [pc, #632]	@ (8009248 <_svfwprintf_r+0x590>)
 8008fce:	9907      	ldr	r1, [sp, #28]
 8008fd0:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8008fd4:	2947      	cmp	r1, #71	@ 0x47
 8008fd6:	bf94      	ite	ls
 8008fd8:	4691      	movls	r9, r2
 8008fda:	4699      	movhi	r9, r3
 8008fdc:	f04f 0800 	mov.w	r8, #0
 8008fe0:	2403      	movs	r4, #3
 8008fe2:	4647      	mov	r7, r8
 8008fe4:	e3cb      	b.n	800977e <_svfwprintf_r+0xac6>
 8008fe6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8008fea:	4610      	mov	r0, r2
 8008fec:	4619      	mov	r1, r3
 8008fee:	f7f7 fd9d 	bl	8000b2c <__aeabi_dcmpun>
 8008ff2:	b138      	cbz	r0, 8009004 <_svfwprintf_r+0x34c>
 8008ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ff6:	4a95      	ldr	r2, [pc, #596]	@ (800924c <_svfwprintf_r+0x594>)
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bfbc      	itt	lt
 8008ffc:	232d      	movlt	r3, #45	@ 0x2d
 8008ffe:	9317      	strlt	r3, [sp, #92]	@ 0x5c
 8009000:	4b93      	ldr	r3, [pc, #588]	@ (8009250 <_svfwprintf_r+0x598>)
 8009002:	e7e4      	b.n	8008fce <_svfwprintf_r+0x316>
 8009004:	1c62      	adds	r2, r4, #1
 8009006:	f000 8107 	beq.w	8009218 <_svfwprintf_r+0x560>
 800900a:	9b07      	ldr	r3, [sp, #28]
 800900c:	f023 0320 	bic.w	r3, r3, #32
 8009010:	2b47      	cmp	r3, #71	@ 0x47
 8009012:	d102      	bne.n	800901a <_svfwprintf_r+0x362>
 8009014:	2c00      	cmp	r4, #0
 8009016:	bf08      	it	eq
 8009018:	2401      	moveq	r4, #1
 800901a:	2328      	movs	r3, #40	@ 0x28
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009020:	f10d 08b0 	add.w	r8, sp, #176	@ 0xb0
 8009024:	9302      	str	r3, [sp, #8]
 8009026:	f445 7780 	orr.w	r7, r5, #256	@ 0x100
 800902a:	9b07      	ldr	r3, [sp, #28]
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	ae1a      	add	r6, sp, #104	@ 0x68
 8009030:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009034:	f8cd 800c 	str.w	r8, [sp, #12]
 8009038:	9600      	str	r6, [sp, #0]
 800903a:	ab19      	add	r3, sp, #100	@ 0x64
 800903c:	463a      	mov	r2, r7
 800903e:	4621      	mov	r1, r4
 8009040:	4650      	mov	r0, sl
 8009042:	f7ff fdc1 	bl	8008bc8 <wcvt>
 8009046:	4540      	cmp	r0, r8
 8009048:	4681      	mov	r9, r0
 800904a:	f040 80e7 	bne.w	800921c <_svfwprintf_r+0x564>
 800904e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009050:	2b28      	cmp	r3, #40	@ 0x28
 8009052:	f340 80e3 	ble.w	800921c <_svfwprintf_r+0x564>
 8009056:	0099      	lsls	r1, r3, #2
 8009058:	4650      	mov	r0, sl
 800905a:	930e      	str	r3, [sp, #56]	@ 0x38
 800905c:	f7fd fa74 	bl	8006548 <_malloc_r>
 8009060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009062:	4680      	mov	r8, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	f43f af57 	beq.w	8008f18 <_svfwprintf_r+0x260>
 800906a:	e9cd 0303 	strd	r0, r3, [sp, #12]
 800906e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009070:	9302      	str	r3, [sp, #8]
 8009072:	9b07      	ldr	r3, [sp, #28]
 8009074:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009078:	e9cd 6300 	strd	r6, r3, [sp]
 800907c:	463a      	mov	r2, r7
 800907e:	ab19      	add	r3, sp, #100	@ 0x64
 8009080:	4621      	mov	r1, r4
 8009082:	4650      	mov	r0, sl
 8009084:	f7ff fda0 	bl	8008bc8 <wcvt>
 8009088:	4681      	mov	r9, r0
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800908e:	f023 0320 	bic.w	r3, r3, #32
 8009092:	2b47      	cmp	r3, #71	@ 0x47
 8009094:	f040 80c5 	bne.w	8009222 <_svfwprintf_r+0x56a>
 8009098:	1cf3      	adds	r3, r6, #3
 800909a:	db02      	blt.n	80090a2 <_svfwprintf_r+0x3ea>
 800909c:	42b4      	cmp	r4, r6
 800909e:	f280 80e6 	bge.w	800926e <_svfwprintf_r+0x5b6>
 80090a2:	9b07      	ldr	r3, [sp, #28]
 80090a4:	3b02      	subs	r3, #2
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	1e73      	subs	r3, r6, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	9a07      	ldr	r2, [sp, #28]
 80090ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80090b0:	bfb8      	it	lt
 80090b2:	f1c6 0301 	rsblt	r3, r6, #1
 80090b6:	921e      	str	r2, [sp, #120]	@ 0x78
 80090b8:	bfb4      	ite	lt
 80090ba:	222d      	movlt	r2, #45	@ 0x2d
 80090bc:	222b      	movge	r2, #43	@ 0x2b
 80090be:	2b09      	cmp	r3, #9
 80090c0:	921f      	str	r2, [sp, #124]	@ 0x7c
 80090c2:	f340 80ce 	ble.w	8009262 <_svfwprintf_r+0x5aa>
 80090c6:	a92c      	add	r1, sp, #176	@ 0xb0
 80090c8:	260a      	movs	r6, #10
 80090ca:	460a      	mov	r2, r1
 80090cc:	fbb3 f4f6 	udiv	r4, r3, r6
 80090d0:	fb06 3014 	mls	r0, r6, r4, r3
 80090d4:	3030      	adds	r0, #48	@ 0x30
 80090d6:	f842 0c04 	str.w	r0, [r2, #-4]
 80090da:	4618      	mov	r0, r3
 80090dc:	2863      	cmp	r0, #99	@ 0x63
 80090de:	f1a1 0104 	sub.w	r1, r1, #4
 80090e2:	4623      	mov	r3, r4
 80090e4:	dcf1      	bgt.n	80090ca <_svfwprintf_r+0x412>
 80090e6:	3330      	adds	r3, #48	@ 0x30
 80090e8:	f841 3c04 	str.w	r3, [r1, #-4]
 80090ec:	f1a2 0008 	sub.w	r0, r2, #8
 80090f0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80090f2:	a92c      	add	r1, sp, #176	@ 0xb0
 80090f4:	4288      	cmp	r0, r1
 80090f6:	f0c0 80af 	bcc.w	8009258 <_svfwprintf_r+0x5a0>
 80090fa:	f10d 03bb 	add.w	r3, sp, #187	@ 0xbb
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	f023 0303 	bic.w	r3, r3, #3
 8009104:	3a0b      	subs	r2, #11
 8009106:	4291      	cmp	r1, r2
 8009108:	bf38      	it	cc
 800910a:	2300      	movcc	r3, #0
 800910c:	aa20      	add	r2, sp, #128	@ 0x80
 800910e:	18d4      	adds	r4, r2, r3
 8009110:	ab1e      	add	r3, sp, #120	@ 0x78
 8009112:	1ae4      	subs	r4, r4, r3
 8009114:	10a3      	asrs	r3, r4, #2
 8009116:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009118:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800911a:	2b01      	cmp	r3, #1
 800911c:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 8009120:	dc02      	bgt.n	8009128 <_svfwprintf_r+0x470>
 8009122:	f015 0601 	ands.w	r6, r5, #1
 8009126:	d001      	beq.n	800912c <_svfwprintf_r+0x474>
 8009128:	3401      	adds	r4, #1
 800912a:	2600      	movs	r6, #0
 800912c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800912e:	2b00      	cmp	r3, #0
 8009130:	f040 80b6 	bne.w	80092a0 <_svfwprintf_r+0x5e8>
 8009134:	463d      	mov	r5, r7
 8009136:	2700      	movs	r7, #0
 8009138:	42a7      	cmp	r7, r4
 800913a:	463b      	mov	r3, r7
 800913c:	bfb8      	it	lt
 800913e:	4623      	movlt	r3, r4
 8009140:	930e      	str	r3, [sp, #56]	@ 0x38
 8009142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009144:	b113      	cbz	r3, 800914c <_svfwprintf_r+0x494>
 8009146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009148:	3301      	adds	r3, #1
 800914a:	930e      	str	r3, [sp, #56]	@ 0x38
 800914c:	f015 0302 	ands.w	r3, r5, #2
 8009150:	9314      	str	r3, [sp, #80]	@ 0x50
 8009152:	bf1e      	ittt	ne
 8009154:	9b0e      	ldrne	r3, [sp, #56]	@ 0x38
 8009156:	3302      	addne	r3, #2
 8009158:	930e      	strne	r3, [sp, #56]	@ 0x38
 800915a:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800915e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009160:	f000 8164 	beq.w	800942c <_svfwprintf_r+0x774>
 8009164:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009166:	b143      	cbz	r3, 800917a <_svfwprintf_r+0x4c2>
 8009168:	2304      	movs	r3, #4
 800916a:	aa17      	add	r2, sp, #92	@ 0x5c
 800916c:	4659      	mov	r1, fp
 800916e:	4650      	mov	r0, sl
 8009170:	f000 fcaa 	bl	8009ac8 <__ssputs_r>
 8009174:	3001      	adds	r0, #1
 8009176:	f000 816d 	beq.w	8009454 <_svfwprintf_r+0x79c>
 800917a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800917c:	b143      	cbz	r3, 8009190 <_svfwprintf_r+0x4d8>
 800917e:	2308      	movs	r3, #8
 8009180:	aa1c      	add	r2, sp, #112	@ 0x70
 8009182:	4659      	mov	r1, fp
 8009184:	4650      	mov	r0, sl
 8009186:	f000 fc9f 	bl	8009ac8 <__ssputs_r>
 800918a:	3001      	adds	r0, #1
 800918c:	f000 8162 	beq.w	8009454 <_svfwprintf_r+0x79c>
 8009190:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009192:	2b80      	cmp	r3, #128	@ 0x80
 8009194:	d113      	bne.n	80091be <_svfwprintf_r+0x506>
 8009196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009198:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	9312      	str	r3, [sp, #72]	@ 0x48
 80091a0:	dd0d      	ble.n	80091be <_svfwprintf_r+0x506>
 80091a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009254 <_svfwprintf_r+0x59c>)
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	f300 8168 	bgt.w	800947c <_svfwprintf_r+0x7c4>
 80091ac:	4a29      	ldr	r2, [pc, #164]	@ (8009254 <_svfwprintf_r+0x59c>)
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4659      	mov	r1, fp
 80091b2:	4650      	mov	r0, sl
 80091b4:	f000 fc88 	bl	8009ac8 <__ssputs_r>
 80091b8:	3001      	adds	r0, #1
 80091ba:	f000 814b 	beq.w	8009454 <_svfwprintf_r+0x79c>
 80091be:	1b3f      	subs	r7, r7, r4
 80091c0:	2f00      	cmp	r7, #0
 80091c2:	dd0c      	ble.n	80091de <_svfwprintf_r+0x526>
 80091c4:	2f10      	cmp	r7, #16
 80091c6:	4a23      	ldr	r2, [pc, #140]	@ (8009254 <_svfwprintf_r+0x59c>)
 80091c8:	f300 8163 	bgt.w	8009492 <_svfwprintf_r+0x7da>
 80091cc:	4a21      	ldr	r2, [pc, #132]	@ (8009254 <_svfwprintf_r+0x59c>)
 80091ce:	00bb      	lsls	r3, r7, #2
 80091d0:	4659      	mov	r1, fp
 80091d2:	4650      	mov	r0, sl
 80091d4:	f000 fc78 	bl	8009ac8 <__ssputs_r>
 80091d8:	3001      	adds	r0, #1
 80091da:	f000 813b 	beq.w	8009454 <_svfwprintf_r+0x79c>
 80091de:	05e9      	lsls	r1, r5, #23
 80091e0:	f100 8160 	bmi.w	80094a4 <_svfwprintf_r+0x7ec>
 80091e4:	00a3      	lsls	r3, r4, #2
 80091e6:	464a      	mov	r2, r9
 80091e8:	4659      	mov	r1, fp
 80091ea:	4650      	mov	r0, sl
 80091ec:	f000 fc6c 	bl	8009ac8 <__ssputs_r>
 80091f0:	3001      	adds	r0, #1
 80091f2:	f000 812f 	beq.w	8009454 <_svfwprintf_r+0x79c>
 80091f6:	076a      	lsls	r2, r5, #29
 80091f8:	f100 8279 	bmi.w	80096ee <_svfwprintf_r+0xa36>
 80091fc:	f1b8 0f00 	cmp.w	r8, #0
 8009200:	f040 8293 	bne.w	800972a <_svfwprintf_r+0xa72>
 8009204:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009208:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800920a:	9e08      	ldr	r6, [sp, #32]
 800920c:	428a      	cmp	r2, r1
 800920e:	bfac      	ite	ge
 8009210:	189b      	addge	r3, r3, r2
 8009212:	185b      	addlt	r3, r3, r1
 8009214:	930d      	str	r3, [sp, #52]	@ 0x34
 8009216:	e57f      	b.n	8008d18 <_svfwprintf_r+0x60>
 8009218:	2406      	movs	r4, #6
 800921a:	e6fe      	b.n	800901a <_svfwprintf_r+0x362>
 800921c:	f04f 0800 	mov.w	r8, #0
 8009220:	e733      	b.n	800908a <_svfwprintf_r+0x3d2>
 8009222:	9b07      	ldr	r3, [sp, #28]
 8009224:	2b66      	cmp	r3, #102	@ 0x66
 8009226:	f47f af3f 	bne.w	80090a8 <_svfwprintf_r+0x3f0>
 800922a:	f005 0501 	and.w	r5, r5, #1
 800922e:	2e00      	cmp	r6, #0
 8009230:	ea45 0504 	orr.w	r5, r5, r4
 8009234:	dd25      	ble.n	8009282 <_svfwprintf_r+0x5ca>
 8009236:	b36d      	cbz	r5, 8009294 <_svfwprintf_r+0x5dc>
 8009238:	3401      	adds	r4, #1
 800923a:	4434      	add	r4, r6
 800923c:	e776      	b.n	800912c <_svfwprintf_r+0x474>
 800923e:	bf00      	nop
 8009240:	7fefffff 	.word	0x7fefffff
 8009244:	0800cfd4 	.word	0x0800cfd4
 8009248:	0800cfe4 	.word	0x0800cfe4
 800924c:	0800cff4 	.word	0x0800cff4
 8009250:	0800d004 	.word	0x0800d004
 8009254:	0800d0a4 	.word	0x0800d0a4
 8009258:	f850 4b04 	ldr.w	r4, [r0], #4
 800925c:	f843 4f04 	str.w	r4, [r3, #4]!
 8009260:	e748      	b.n	80090f4 <_svfwprintf_r+0x43c>
 8009262:	2230      	movs	r2, #48	@ 0x30
 8009264:	4413      	add	r3, r2
 8009266:	9220      	str	r2, [sp, #128]	@ 0x80
 8009268:	9321      	str	r3, [sp, #132]	@ 0x84
 800926a:	ac22      	add	r4, sp, #136	@ 0x88
 800926c:	e750      	b.n	8009110 <_svfwprintf_r+0x458>
 800926e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009270:	42b3      	cmp	r3, r6
 8009272:	dd09      	ble.n	8009288 <_svfwprintf_r+0x5d0>
 8009274:	2e00      	cmp	r6, #0
 8009276:	bfd4      	ite	le
 8009278:	f1c6 0402 	rsble	r4, r6, #2
 800927c:	2401      	movgt	r4, #1
 800927e:	441c      	add	r4, r3
 8009280:	e005      	b.n	800928e <_svfwprintf_r+0x5d6>
 8009282:	b14d      	cbz	r5, 8009298 <_svfwprintf_r+0x5e0>
 8009284:	3402      	adds	r4, #2
 8009286:	e751      	b.n	800912c <_svfwprintf_r+0x474>
 8009288:	07ec      	lsls	r4, r5, #31
 800928a:	d507      	bpl.n	800929c <_svfwprintf_r+0x5e4>
 800928c:	1c74      	adds	r4, r6, #1
 800928e:	2367      	movs	r3, #103	@ 0x67
 8009290:	9307      	str	r3, [sp, #28]
 8009292:	e74b      	b.n	800912c <_svfwprintf_r+0x474>
 8009294:	4634      	mov	r4, r6
 8009296:	e749      	b.n	800912c <_svfwprintf_r+0x474>
 8009298:	2401      	movs	r4, #1
 800929a:	e747      	b.n	800912c <_svfwprintf_r+0x474>
 800929c:	4634      	mov	r4, r6
 800929e:	e7f6      	b.n	800928e <_svfwprintf_r+0x5d6>
 80092a0:	232d      	movs	r3, #45	@ 0x2d
 80092a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80092a4:	e746      	b.n	8009134 <_svfwprintf_r+0x47c>
 80092a6:	06e8      	lsls	r0, r5, #27
 80092a8:	6833      	ldr	r3, [r6, #0]
 80092aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092ac:	d501      	bpl.n	80092b2 <_svfwprintf_r+0x5fa>
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	e002      	b.n	80092b8 <_svfwprintf_r+0x600>
 80092b2:	0669      	lsls	r1, r5, #25
 80092b4:	d5fb      	bpl.n	80092ae <_svfwprintf_r+0x5f6>
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	3604      	adds	r6, #4
 80092ba:	e52d      	b.n	8008d18 <_svfwprintf_r+0x60>
 80092bc:	4632      	mov	r2, r6
 80092be:	f015 0110 	ands.w	r1, r5, #16
 80092c2:	f852 3b04 	ldr.w	r3, [r2], #4
 80092c6:	9208      	str	r2, [sp, #32]
 80092c8:	d011      	beq.n	80092ee <_svfwprintf_r+0x636>
 80092ca:	2200      	movs	r2, #0
 80092cc:	2100      	movs	r1, #0
 80092ce:	9117      	str	r1, [sp, #92]	@ 0x5c
 80092d0:	1c66      	adds	r6, r4, #1
 80092d2:	f000 822f 	beq.w	8009734 <_svfwprintf_r+0xa7c>
 80092d6:	f025 0180 	bic.w	r1, r5, #128	@ 0x80
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 822e 	bne.w	800973c <_svfwprintf_r+0xa84>
 80092e0:	2c00      	cmp	r4, #0
 80092e2:	f000 8096 	beq.w	8009412 <_svfwprintf_r+0x75a>
 80092e6:	2a01      	cmp	r2, #1
 80092e8:	f040 822b 	bne.w	8009742 <_svfwprintf_r+0xa8a>
 80092ec:	e073      	b.n	80093d6 <_svfwprintf_r+0x71e>
 80092ee:	f015 0240 	ands.w	r2, r5, #64	@ 0x40
 80092f2:	d0eb      	beq.n	80092cc <_svfwprintf_r+0x614>
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	e7e8      	b.n	80092ca <_svfwprintf_r+0x612>
 80092f8:	4632      	mov	r2, r6
 80092fa:	2178      	movs	r1, #120	@ 0x78
 80092fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8009300:	9208      	str	r2, [sp, #32]
 8009302:	2230      	movs	r2, #48	@ 0x30
 8009304:	e9cd 211c 	strd	r2, r1, [sp, #112]	@ 0x70
 8009308:	4a9d      	ldr	r2, [pc, #628]	@ (8009580 <_svfwprintf_r+0x8c8>)
 800930a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800930c:	f045 0502 	orr.w	r5, r5, #2
 8009310:	2202      	movs	r2, #2
 8009312:	9107      	str	r1, [sp, #28]
 8009314:	e7da      	b.n	80092cc <_svfwprintf_r+0x614>
 8009316:	4633      	mov	r3, r6
 8009318:	2700      	movs	r7, #0
 800931a:	f853 9b04 	ldr.w	r9, [r3], #4
 800931e:	9308      	str	r3, [sp, #32]
 8009320:	f015 0610 	ands.w	r6, r5, #16
 8009324:	9717      	str	r7, [sp, #92]	@ 0x5c
 8009326:	d12d      	bne.n	8009384 <_svfwprintf_r+0x6cc>
 8009328:	1c62      	adds	r2, r4, #1
 800932a:	d014      	beq.n	8009356 <_svfwprintf_r+0x69e>
 800932c:	4622      	mov	r2, r4
 800932e:	4631      	mov	r1, r6
 8009330:	4648      	mov	r0, r9
 8009332:	4627      	mov	r7, r4
 8009334:	f7f6 ff4c 	bl	80001d0 <memchr>
 8009338:	b108      	cbz	r0, 800933e <_svfwprintf_r+0x686>
 800933a:	eba0 0709 	sub.w	r7, r0, r9
 800933e:	2f27      	cmp	r7, #39	@ 0x27
 8009340:	d90e      	bls.n	8009360 <_svfwprintf_r+0x6a8>
 8009342:	1c79      	adds	r1, r7, #1
 8009344:	0089      	lsls	r1, r1, #2
 8009346:	4650      	mov	r0, sl
 8009348:	f7fd f8fe 	bl	8006548 <_malloc_r>
 800934c:	2800      	cmp	r0, #0
 800934e:	f43f ade3 	beq.w	8008f18 <_svfwprintf_r+0x260>
 8009352:	4680      	mov	r8, r0
 8009354:	e007      	b.n	8009366 <_svfwprintf_r+0x6ae>
 8009356:	4648      	mov	r0, r9
 8009358:	f7f6 ff8a 	bl	8000270 <strlen>
 800935c:	4607      	mov	r7, r0
 800935e:	e7ee      	b.n	800933e <_svfwprintf_r+0x686>
 8009360:	f04f 0800 	mov.w	r8, #0
 8009364:	a82c      	add	r0, sp, #176	@ 0xb0
 8009366:	463c      	mov	r4, r7
 8009368:	2300      	movs	r3, #0
 800936a:	42bb      	cmp	r3, r7
 800936c:	d104      	bne.n	8009378 <_svfwprintf_r+0x6c0>
 800936e:	2700      	movs	r7, #0
 8009370:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8009374:	4681      	mov	r9, r0
 8009376:	e6df      	b.n	8009138 <_svfwprintf_r+0x480>
 8009378:	f819 2003 	ldrb.w	r2, [r9, r3]
 800937c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009380:	3301      	adds	r3, #1
 8009382:	e7f2      	b.n	800936a <_svfwprintf_r+0x6b2>
 8009384:	1c63      	adds	r3, r4, #1
 8009386:	d011      	beq.n	80093ac <_svfwprintf_r+0x6f4>
 8009388:	4622      	mov	r2, r4
 800938a:	4639      	mov	r1, r7
 800938c:	4648      	mov	r0, r9
 800938e:	f000 fab4 	bl	80098fa <wmemchr>
 8009392:	4680      	mov	r8, r0
 8009394:	2800      	cmp	r0, #0
 8009396:	f43f ae24 	beq.w	8008fe2 <_svfwprintf_r+0x32a>
 800939a:	eba0 0809 	sub.w	r8, r0, r9
 800939e:	ea4f 08a8 	mov.w	r8, r8, asr #2
 80093a2:	4544      	cmp	r4, r8
 80093a4:	bfa8      	it	ge
 80093a6:	4644      	movge	r4, r8
 80093a8:	46b8      	mov	r8, r7
 80093aa:	e61a      	b.n	8008fe2 <_svfwprintf_r+0x32a>
 80093ac:	4648      	mov	r0, r9
 80093ae:	f000 fa9b 	bl	80098e8 <wcslen>
 80093b2:	4604      	mov	r4, r0
 80093b4:	e7f8      	b.n	80093a8 <_svfwprintf_r+0x6f0>
 80093b6:	4632      	mov	r2, r6
 80093b8:	06ee      	lsls	r6, r5, #27
 80093ba:	f852 3b04 	ldr.w	r3, [r2], #4
 80093be:	9208      	str	r2, [sp, #32]
 80093c0:	d501      	bpl.n	80093c6 <_svfwprintf_r+0x70e>
 80093c2:	2201      	movs	r2, #1
 80093c4:	e782      	b.n	80092cc <_svfwprintf_r+0x614>
 80093c6:	0668      	lsls	r0, r5, #25
 80093c8:	bf48      	it	mi
 80093ca:	b29b      	uxthmi	r3, r3
 80093cc:	e7f9      	b.n	80093c2 <_svfwprintf_r+0x70a>
 80093ce:	4b6d      	ldr	r3, [pc, #436]	@ (8009584 <_svfwprintf_r+0x8cc>)
 80093d0:	e52a      	b.n	8008e28 <_svfwprintf_r+0x170>
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d804      	bhi.n	80093e0 <_svfwprintf_r+0x728>
 80093d6:	3330      	adds	r3, #48	@ 0x30
 80093d8:	9353      	str	r3, [sp, #332]	@ 0x14c
 80093da:	f50d 79a6 	add.w	r9, sp, #332	@ 0x14c
 80093de:	e1c6      	b.n	800976e <_svfwprintf_r+0xab6>
 80093e0:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 80093e4:	250a      	movs	r5, #10
 80093e6:	fbb3 f0f5 	udiv	r0, r3, r5
 80093ea:	fb05 3210 	mls	r2, r5, r0, r3
 80093ee:	3230      	adds	r2, #48	@ 0x30
 80093f0:	f849 2d04 	str.w	r2, [r9, #-4]!
 80093f4:	461a      	mov	r2, r3
 80093f6:	2a09      	cmp	r2, #9
 80093f8:	4603      	mov	r3, r0
 80093fa:	d8f4      	bhi.n	80093e6 <_svfwprintf_r+0x72e>
 80093fc:	e1b7      	b.n	800976e <_svfwprintf_r+0xab6>
 80093fe:	f003 020f 	and.w	r2, r3, #15
 8009402:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8009404:	091b      	lsrs	r3, r3, #4
 8009406:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800940a:	f849 2d04 	str.w	r2, [r9, #-4]!
 800940e:	d1f6      	bne.n	80093fe <_svfwprintf_r+0x746>
 8009410:	e1ad      	b.n	800976e <_svfwprintf_r+0xab6>
 8009412:	b91a      	cbnz	r2, 800941c <_svfwprintf_r+0x764>
 8009414:	07e8      	lsls	r0, r5, #31
 8009416:	d501      	bpl.n	800941c <_svfwprintf_r+0x764>
 8009418:	2330      	movs	r3, #48	@ 0x30
 800941a:	e7dd      	b.n	80093d8 <_svfwprintf_r+0x720>
 800941c:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 8009420:	e1a5      	b.n	800976e <_svfwprintf_r+0xab6>
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f47f ad18 	bne.w	8008e5a <_svfwprintf_r+0x1a2>
 800942a:	e57b      	b.n	8008f24 <_svfwprintf_r+0x26c>
 800942c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800942e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	2b00      	cmp	r3, #0
 8009434:	9312      	str	r3, [sp, #72]	@ 0x48
 8009436:	f77f ae95 	ble.w	8009164 <_svfwprintf_r+0x4ac>
 800943a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800943c:	4a52      	ldr	r2, [pc, #328]	@ (8009588 <_svfwprintf_r+0x8d0>)
 800943e:	2b10      	cmp	r3, #16
 8009440:	dc11      	bgt.n	8009466 <_svfwprintf_r+0x7ae>
 8009442:	4a51      	ldr	r2, [pc, #324]	@ (8009588 <_svfwprintf_r+0x8d0>)
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4659      	mov	r1, fp
 8009448:	4650      	mov	r0, sl
 800944a:	f000 fb3d 	bl	8009ac8 <__ssputs_r>
 800944e:	3001      	adds	r0, #1
 8009450:	f47f ae88 	bne.w	8009164 <_svfwprintf_r+0x4ac>
 8009454:	f1b8 0f00 	cmp.w	r8, #0
 8009458:	f43f ad64 	beq.w	8008f24 <_svfwprintf_r+0x26c>
 800945c:	4641      	mov	r1, r8
 800945e:	4650      	mov	r0, sl
 8009460:	f7fe fe3a 	bl	80080d8 <_free_r>
 8009464:	e55e      	b.n	8008f24 <_svfwprintf_r+0x26c>
 8009466:	2340      	movs	r3, #64	@ 0x40
 8009468:	4659      	mov	r1, fp
 800946a:	4650      	mov	r0, sl
 800946c:	f000 fb2c 	bl	8009ac8 <__ssputs_r>
 8009470:	3001      	adds	r0, #1
 8009472:	d0ef      	beq.n	8009454 <_svfwprintf_r+0x79c>
 8009474:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009476:	3b10      	subs	r3, #16
 8009478:	9312      	str	r3, [sp, #72]	@ 0x48
 800947a:	e7de      	b.n	800943a <_svfwprintf_r+0x782>
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	4659      	mov	r1, fp
 8009480:	4650      	mov	r0, sl
 8009482:	f000 fb21 	bl	8009ac8 <__ssputs_r>
 8009486:	3001      	adds	r0, #1
 8009488:	d0e4      	beq.n	8009454 <_svfwprintf_r+0x79c>
 800948a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800948c:	3b10      	subs	r3, #16
 800948e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009490:	e687      	b.n	80091a2 <_svfwprintf_r+0x4ea>
 8009492:	2340      	movs	r3, #64	@ 0x40
 8009494:	4659      	mov	r1, fp
 8009496:	4650      	mov	r0, sl
 8009498:	f000 fb16 	bl	8009ac8 <__ssputs_r>
 800949c:	3001      	adds	r0, #1
 800949e:	d0d9      	beq.n	8009454 <_svfwprintf_r+0x79c>
 80094a0:	3f10      	subs	r7, #16
 80094a2:	e68f      	b.n	80091c4 <_svfwprintf_r+0x50c>
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	2b65      	cmp	r3, #101	@ 0x65
 80094a8:	f240 80e0 	bls.w	800966c <_svfwprintf_r+0x9b4>
 80094ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094b0:	2200      	movs	r2, #0
 80094b2:	2300      	movs	r3, #0
 80094b4:	f7f7 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80094b8:	b350      	cbz	r0, 8009510 <_svfwprintf_r+0x858>
 80094ba:	4a34      	ldr	r2, [pc, #208]	@ (800958c <_svfwprintf_r+0x8d4>)
 80094bc:	2304      	movs	r3, #4
 80094be:	4659      	mov	r1, fp
 80094c0:	4650      	mov	r0, sl
 80094c2:	f000 fb01 	bl	8009ac8 <__ssputs_r>
 80094c6:	3001      	adds	r0, #1
 80094c8:	d0c4      	beq.n	8009454 <_svfwprintf_r+0x79c>
 80094ca:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	@ 0x68
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	db02      	blt.n	80094d8 <_svfwprintf_r+0x820>
 80094d2:	07eb      	lsls	r3, r5, #31
 80094d4:	f57f ae8f 	bpl.w	80091f6 <_svfwprintf_r+0x53e>
 80094d8:	2304      	movs	r3, #4
 80094da:	aa18      	add	r2, sp, #96	@ 0x60
 80094dc:	4659      	mov	r1, fp
 80094de:	4650      	mov	r0, sl
 80094e0:	f000 faf2 	bl	8009ac8 <__ssputs_r>
 80094e4:	3001      	adds	r0, #1
 80094e6:	d0b5      	beq.n	8009454 <_svfwprintf_r+0x79c>
 80094e8:	3c01      	subs	r4, #1
 80094ea:	2c00      	cmp	r4, #0
 80094ec:	f77f ae83 	ble.w	80091f6 <_svfwprintf_r+0x53e>
 80094f0:	4e27      	ldr	r6, [pc, #156]	@ (8009590 <_svfwprintf_r+0x8d8>)
 80094f2:	2c10      	cmp	r4, #16
 80094f4:	dc02      	bgt.n	80094fc <_svfwprintf_r+0x844>
 80094f6:	4a26      	ldr	r2, [pc, #152]	@ (8009590 <_svfwprintf_r+0x8d8>)
 80094f8:	00a3      	lsls	r3, r4, #2
 80094fa:	e675      	b.n	80091e8 <_svfwprintf_r+0x530>
 80094fc:	2340      	movs	r3, #64	@ 0x40
 80094fe:	4632      	mov	r2, r6
 8009500:	4659      	mov	r1, fp
 8009502:	4650      	mov	r0, sl
 8009504:	f000 fae0 	bl	8009ac8 <__ssputs_r>
 8009508:	3001      	adds	r0, #1
 800950a:	d0a3      	beq.n	8009454 <_svfwprintf_r+0x79c>
 800950c:	3c10      	subs	r4, #16
 800950e:	e7f0      	b.n	80094f2 <_svfwprintf_r+0x83a>
 8009510:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009512:	2b00      	cmp	r3, #0
 8009514:	dc3e      	bgt.n	8009594 <_svfwprintf_r+0x8dc>
 8009516:	4a1d      	ldr	r2, [pc, #116]	@ (800958c <_svfwprintf_r+0x8d4>)
 8009518:	2304      	movs	r3, #4
 800951a:	4659      	mov	r1, fp
 800951c:	4650      	mov	r0, sl
 800951e:	f000 fad3 	bl	8009ac8 <__ssputs_r>
 8009522:	3001      	adds	r0, #1
 8009524:	d096      	beq.n	8009454 <_svfwprintf_r+0x79c>
 8009526:	e9dd 361a 	ldrd	r3, r6, [sp, #104]	@ 0x68
 800952a:	f005 0201 	and.w	r2, r5, #1
 800952e:	4333      	orrs	r3, r6
 8009530:	4313      	orrs	r3, r2
 8009532:	f43f ae60 	beq.w	80091f6 <_svfwprintf_r+0x53e>
 8009536:	2304      	movs	r3, #4
 8009538:	aa18      	add	r2, sp, #96	@ 0x60
 800953a:	4659      	mov	r1, fp
 800953c:	4650      	mov	r0, sl
 800953e:	f000 fac3 	bl	8009ac8 <__ssputs_r>
 8009542:	3001      	adds	r0, #1
 8009544:	d086      	beq.n	8009454 <_svfwprintf_r+0x79c>
 8009546:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009548:	2c00      	cmp	r4, #0
 800954a:	da0c      	bge.n	8009566 <_svfwprintf_r+0x8ae>
 800954c:	4f10      	ldr	r7, [pc, #64]	@ (8009590 <_svfwprintf_r+0x8d8>)
 800954e:	4264      	negs	r4, r4
 8009550:	2c10      	cmp	r4, #16
 8009552:	dc0a      	bgt.n	800956a <_svfwprintf_r+0x8b2>
 8009554:	4a0e      	ldr	r2, [pc, #56]	@ (8009590 <_svfwprintf_r+0x8d8>)
 8009556:	00a3      	lsls	r3, r4, #2
 8009558:	4659      	mov	r1, fp
 800955a:	4650      	mov	r0, sl
 800955c:	f000 fab4 	bl	8009ac8 <__ssputs_r>
 8009560:	3001      	adds	r0, #1
 8009562:	f43f af77 	beq.w	8009454 <_svfwprintf_r+0x79c>
 8009566:	00b3      	lsls	r3, r6, #2
 8009568:	e63d      	b.n	80091e6 <_svfwprintf_r+0x52e>
 800956a:	2340      	movs	r3, #64	@ 0x40
 800956c:	463a      	mov	r2, r7
 800956e:	4659      	mov	r1, fp
 8009570:	4650      	mov	r0, sl
 8009572:	f000 faa9 	bl	8009ac8 <__ssputs_r>
 8009576:	3001      	adds	r0, #1
 8009578:	f43f af6c 	beq.w	8009454 <_svfwprintf_r+0x79c>
 800957c:	3c10      	subs	r4, #16
 800957e:	e7e7      	b.n	8009550 <_svfwprintf_r+0x898>
 8009580:	0800d014 	.word	0x0800d014
 8009584:	0800d058 	.word	0x0800d058
 8009588:	0800d0e4 	.word	0x0800d0e4
 800958c:	0800d09c 	.word	0x0800d09c
 8009590:	0800d0a4 	.word	0x0800d0a4
 8009594:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 8009596:	00a3      	lsls	r3, r4, #2
 8009598:	9307      	str	r3, [sp, #28]
 800959a:	f344 031d 	sbfx	r3, r4, #0, #30
 800959e:	42b3      	cmp	r3, r6
 80095a0:	bfa8      	it	ge
 80095a2:	4633      	movge	r3, r6
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	461f      	mov	r7, r3
 80095a8:	dc1f      	bgt.n	80095ea <_svfwprintf_r+0x932>
 80095aa:	2f00      	cmp	r7, #0
 80095ac:	bfac      	ite	ge
 80095ae:	1bf7      	subge	r7, r6, r7
 80095b0:	4637      	movlt	r7, r6
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	dd0b      	ble.n	80095ce <_svfwprintf_r+0x916>
 80095b6:	2f10      	cmp	r7, #16
 80095b8:	4a72      	ldr	r2, [pc, #456]	@ (8009784 <_svfwprintf_r+0xacc>)
 80095ba:	dc1f      	bgt.n	80095fc <_svfwprintf_r+0x944>
 80095bc:	4a71      	ldr	r2, [pc, #452]	@ (8009784 <_svfwprintf_r+0xacc>)
 80095be:	00bb      	lsls	r3, r7, #2
 80095c0:	4659      	mov	r1, fp
 80095c2:	4650      	mov	r0, sl
 80095c4:	f000 fa80 	bl	8009ac8 <__ssputs_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	f43f af43 	beq.w	8009454 <_svfwprintf_r+0x79c>
 80095ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80095d0:	429c      	cmp	r4, r3
 80095d2:	ea4f 0686 	mov.w	r6, r6, lsl #2
 80095d6:	dd1b      	ble.n	8009610 <_svfwprintf_r+0x958>
 80095d8:	2304      	movs	r3, #4
 80095da:	aa18      	add	r2, sp, #96	@ 0x60
 80095dc:	4659      	mov	r1, fp
 80095de:	4650      	mov	r0, sl
 80095e0:	f000 fa72 	bl	8009ac8 <__ssputs_r>
 80095e4:	3001      	adds	r0, #1
 80095e6:	d115      	bne.n	8009614 <_svfwprintf_r+0x95c>
 80095e8:	e734      	b.n	8009454 <_svfwprintf_r+0x79c>
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	464a      	mov	r2, r9
 80095ee:	4659      	mov	r1, fp
 80095f0:	4650      	mov	r0, sl
 80095f2:	f000 fa69 	bl	8009ac8 <__ssputs_r>
 80095f6:	3001      	adds	r0, #1
 80095f8:	d1d7      	bne.n	80095aa <_svfwprintf_r+0x8f2>
 80095fa:	e72b      	b.n	8009454 <_svfwprintf_r+0x79c>
 80095fc:	2340      	movs	r3, #64	@ 0x40
 80095fe:	4659      	mov	r1, fp
 8009600:	4650      	mov	r0, sl
 8009602:	f000 fa61 	bl	8009ac8 <__ssputs_r>
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af24 	beq.w	8009454 <_svfwprintf_r+0x79c>
 800960c:	3f10      	subs	r7, #16
 800960e:	e7d2      	b.n	80095b6 <_svfwprintf_r+0x8fe>
 8009610:	07ef      	lsls	r7, r5, #31
 8009612:	d4e1      	bmi.n	80095d8 <_svfwprintf_r+0x920>
 8009614:	9b07      	ldr	r3, [sp, #28]
 8009616:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8009618:	1b9b      	subs	r3, r3, r6
 800961a:	1be7      	subs	r7, r4, r7
 800961c:	109b      	asrs	r3, r3, #2
 800961e:	429f      	cmp	r7, r3
 8009620:	bfa8      	it	ge
 8009622:	461f      	movge	r7, r3
 8009624:	2f00      	cmp	r7, #0
 8009626:	dd09      	ble.n	800963c <_svfwprintf_r+0x984>
 8009628:	00bb      	lsls	r3, r7, #2
 800962a:	eb09 0206 	add.w	r2, r9, r6
 800962e:	4659      	mov	r1, fp
 8009630:	4650      	mov	r0, sl
 8009632:	f000 fa49 	bl	8009ac8 <__ssputs_r>
 8009636:	3001      	adds	r0, #1
 8009638:	f43f af0c 	beq.w	8009454 <_svfwprintf_r+0x79c>
 800963c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800963e:	2f00      	cmp	r7, #0
 8009640:	eba4 0403 	sub.w	r4, r4, r3
 8009644:	bfa8      	it	ge
 8009646:	1be4      	subge	r4, r4, r7
 8009648:	2c00      	cmp	r4, #0
 800964a:	f77f add4 	ble.w	80091f6 <_svfwprintf_r+0x53e>
 800964e:	4e4d      	ldr	r6, [pc, #308]	@ (8009784 <_svfwprintf_r+0xacc>)
 8009650:	2c10      	cmp	r4, #16
 8009652:	f77f af50 	ble.w	80094f6 <_svfwprintf_r+0x83e>
 8009656:	2340      	movs	r3, #64	@ 0x40
 8009658:	4632      	mov	r2, r6
 800965a:	4659      	mov	r1, fp
 800965c:	4650      	mov	r0, sl
 800965e:	f000 fa33 	bl	8009ac8 <__ssputs_r>
 8009662:	3001      	adds	r0, #1
 8009664:	f43f aef6 	beq.w	8009454 <_svfwprintf_r+0x79c>
 8009668:	3c10      	subs	r4, #16
 800966a:	e7f1      	b.n	8009650 <_svfwprintf_r+0x998>
 800966c:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 800966e:	2e01      	cmp	r6, #1
 8009670:	f04f 0304 	mov.w	r3, #4
 8009674:	464a      	mov	r2, r9
 8009676:	4659      	mov	r1, fp
 8009678:	4650      	mov	r0, sl
 800967a:	dc01      	bgt.n	8009680 <_svfwprintf_r+0x9c8>
 800967c:	07ec      	lsls	r4, r5, #31
 800967e:	d51a      	bpl.n	80096b6 <_svfwprintf_r+0x9fe>
 8009680:	f000 fa22 	bl	8009ac8 <__ssputs_r>
 8009684:	3001      	adds	r0, #1
 8009686:	f43f aee5 	beq.w	8009454 <_svfwprintf_r+0x79c>
 800968a:	2304      	movs	r3, #4
 800968c:	aa18      	add	r2, sp, #96	@ 0x60
 800968e:	4659      	mov	r1, fp
 8009690:	4650      	mov	r0, sl
 8009692:	f000 fa19 	bl	8009ac8 <__ssputs_r>
 8009696:	3001      	adds	r0, #1
 8009698:	f43f aedc 	beq.w	8009454 <_svfwprintf_r+0x79c>
 800969c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096a0:	2200      	movs	r2, #0
 80096a2:	2300      	movs	r3, #0
 80096a4:	1e74      	subs	r4, r6, #1
 80096a6:	f7f7 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80096aa:	b968      	cbnz	r0, 80096c8 <_svfwprintf_r+0xa10>
 80096ac:	00a3      	lsls	r3, r4, #2
 80096ae:	f109 0204 	add.w	r2, r9, #4
 80096b2:	4659      	mov	r1, fp
 80096b4:	4650      	mov	r0, sl
 80096b6:	f000 fa07 	bl	8009ac8 <__ssputs_r>
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f aeca 	beq.w	8009454 <_svfwprintf_r+0x79c>
 80096c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096c2:	aa1e      	add	r2, sp, #120	@ 0x78
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	e58f      	b.n	80091e8 <_svfwprintf_r+0x530>
 80096c8:	2e01      	cmp	r6, #1
 80096ca:	ddf9      	ble.n	80096c0 <_svfwprintf_r+0xa08>
 80096cc:	4e2d      	ldr	r6, [pc, #180]	@ (8009784 <_svfwprintf_r+0xacc>)
 80096ce:	2c10      	cmp	r4, #16
 80096d0:	dc02      	bgt.n	80096d8 <_svfwprintf_r+0xa20>
 80096d2:	4a2c      	ldr	r2, [pc, #176]	@ (8009784 <_svfwprintf_r+0xacc>)
 80096d4:	00a3      	lsls	r3, r4, #2
 80096d6:	e7ec      	b.n	80096b2 <_svfwprintf_r+0x9fa>
 80096d8:	2340      	movs	r3, #64	@ 0x40
 80096da:	4632      	mov	r2, r6
 80096dc:	4659      	mov	r1, fp
 80096de:	4650      	mov	r0, sl
 80096e0:	f000 f9f2 	bl	8009ac8 <__ssputs_r>
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f aeb5 	beq.w	8009454 <_svfwprintf_r+0x79c>
 80096ea:	3c10      	subs	r4, #16
 80096ec:	e7ef      	b.n	80096ce <_svfwprintf_r+0xa16>
 80096ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096f2:	1a9c      	subs	r4, r3, r2
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	f77f ad81 	ble.w	80091fc <_svfwprintf_r+0x544>
 80096fa:	4d23      	ldr	r5, [pc, #140]	@ (8009788 <_svfwprintf_r+0xad0>)
 80096fc:	2c10      	cmp	r4, #16
 80096fe:	dc09      	bgt.n	8009714 <_svfwprintf_r+0xa5c>
 8009700:	4a21      	ldr	r2, [pc, #132]	@ (8009788 <_svfwprintf_r+0xad0>)
 8009702:	00a3      	lsls	r3, r4, #2
 8009704:	4659      	mov	r1, fp
 8009706:	4650      	mov	r0, sl
 8009708:	f000 f9de 	bl	8009ac8 <__ssputs_r>
 800970c:	3001      	adds	r0, #1
 800970e:	f47f ad75 	bne.w	80091fc <_svfwprintf_r+0x544>
 8009712:	e69f      	b.n	8009454 <_svfwprintf_r+0x79c>
 8009714:	2340      	movs	r3, #64	@ 0x40
 8009716:	462a      	mov	r2, r5
 8009718:	4659      	mov	r1, fp
 800971a:	4650      	mov	r0, sl
 800971c:	f000 f9d4 	bl	8009ac8 <__ssputs_r>
 8009720:	3001      	adds	r0, #1
 8009722:	f43f ae97 	beq.w	8009454 <_svfwprintf_r+0x79c>
 8009726:	3c10      	subs	r4, #16
 8009728:	e7e8      	b.n	80096fc <_svfwprintf_r+0xa44>
 800972a:	4641      	mov	r1, r8
 800972c:	4650      	mov	r0, sl
 800972e:	f7fe fcd3 	bl	80080d8 <_free_r>
 8009732:	e567      	b.n	8009204 <_svfwprintf_r+0x54c>
 8009734:	4629      	mov	r1, r5
 8009736:	2b00      	cmp	r3, #0
 8009738:	f43f add5 	beq.w	80092e6 <_svfwprintf_r+0x62e>
 800973c:	2a01      	cmp	r2, #1
 800973e:	f43f ae48 	beq.w	80093d2 <_svfwprintf_r+0x71a>
 8009742:	2a02      	cmp	r2, #2
 8009744:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 8009748:	f43f ae59 	beq.w	80093fe <_svfwprintf_r+0x746>
 800974c:	f003 0207 	and.w	r2, r3, #7
 8009750:	3230      	adds	r2, #48	@ 0x30
 8009752:	08db      	lsrs	r3, r3, #3
 8009754:	4648      	mov	r0, r9
 8009756:	f849 2d04 	str.w	r2, [r9, #-4]!
 800975a:	d1f7      	bne.n	800974c <_svfwprintf_r+0xa94>
 800975c:	07cd      	lsls	r5, r1, #31
 800975e:	d506      	bpl.n	800976e <_svfwprintf_r+0xab6>
 8009760:	2a30      	cmp	r2, #48	@ 0x30
 8009762:	d004      	beq.n	800976e <_svfwprintf_r+0xab6>
 8009764:	2330      	movs	r3, #48	@ 0x30
 8009766:	f849 3c04 	str.w	r3, [r9, #-4]
 800976a:	f1a0 0908 	sub.w	r9, r0, #8
 800976e:	ab54      	add	r3, sp, #336	@ 0x150
 8009770:	eba3 0309 	sub.w	r3, r3, r9
 8009774:	4627      	mov	r7, r4
 8009776:	460d      	mov	r5, r1
 8009778:	109c      	asrs	r4, r3, #2
 800977a:	f04f 0800 	mov.w	r8, #0
 800977e:	4646      	mov	r6, r8
 8009780:	e4da      	b.n	8009138 <_svfwprintf_r+0x480>
 8009782:	bf00      	nop
 8009784:	0800d0a4 	.word	0x0800d0a4
 8009788:	0800d0e4 	.word	0x0800d0e4

0800978c <__swbuf_r>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	460e      	mov	r6, r1
 8009790:	4614      	mov	r4, r2
 8009792:	4605      	mov	r5, r0
 8009794:	b118      	cbz	r0, 800979e <__swbuf_r+0x12>
 8009796:	6a03      	ldr	r3, [r0, #32]
 8009798:	b90b      	cbnz	r3, 800979e <__swbuf_r+0x12>
 800979a:	f7fd fcf1 	bl	8007180 <__sinit>
 800979e:	69a3      	ldr	r3, [r4, #24]
 80097a0:	60a3      	str	r3, [r4, #8]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	071a      	lsls	r2, r3, #28
 80097a6:	d501      	bpl.n	80097ac <__swbuf_r+0x20>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	b943      	cbnz	r3, 80097be <__swbuf_r+0x32>
 80097ac:	4621      	mov	r1, r4
 80097ae:	4628      	mov	r0, r5
 80097b0:	f000 f82a 	bl	8009808 <__swsetup_r>
 80097b4:	b118      	cbz	r0, 80097be <__swbuf_r+0x32>
 80097b6:	f04f 37ff 	mov.w	r7, #4294967295
 80097ba:	4638      	mov	r0, r7
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	6922      	ldr	r2, [r4, #16]
 80097c2:	1a98      	subs	r0, r3, r2
 80097c4:	6963      	ldr	r3, [r4, #20]
 80097c6:	b2f6      	uxtb	r6, r6
 80097c8:	4283      	cmp	r3, r0
 80097ca:	4637      	mov	r7, r6
 80097cc:	dc05      	bgt.n	80097da <__swbuf_r+0x4e>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7fd fc21 	bl	8007018 <_fflush_r>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d1ed      	bne.n	80097b6 <__swbuf_r+0x2a>
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	3b01      	subs	r3, #1
 80097de:	60a3      	str	r3, [r4, #8]
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	6022      	str	r2, [r4, #0]
 80097e6:	701e      	strb	r6, [r3, #0]
 80097e8:	6962      	ldr	r2, [r4, #20]
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d004      	beq.n	80097fa <__swbuf_r+0x6e>
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	07db      	lsls	r3, r3, #31
 80097f4:	d5e1      	bpl.n	80097ba <__swbuf_r+0x2e>
 80097f6:	2e0a      	cmp	r6, #10
 80097f8:	d1df      	bne.n	80097ba <__swbuf_r+0x2e>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	f7fd fc0b 	bl	8007018 <_fflush_r>
 8009802:	2800      	cmp	r0, #0
 8009804:	d0d9      	beq.n	80097ba <__swbuf_r+0x2e>
 8009806:	e7d6      	b.n	80097b6 <__swbuf_r+0x2a>

08009808 <__swsetup_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4b29      	ldr	r3, [pc, #164]	@ (80098b0 <__swsetup_r+0xa8>)
 800980c:	4605      	mov	r5, r0
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	460c      	mov	r4, r1
 8009812:	b118      	cbz	r0, 800981c <__swsetup_r+0x14>
 8009814:	6a03      	ldr	r3, [r0, #32]
 8009816:	b90b      	cbnz	r3, 800981c <__swsetup_r+0x14>
 8009818:	f7fd fcb2 	bl	8007180 <__sinit>
 800981c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009820:	0719      	lsls	r1, r3, #28
 8009822:	d422      	bmi.n	800986a <__swsetup_r+0x62>
 8009824:	06da      	lsls	r2, r3, #27
 8009826:	d407      	bmi.n	8009838 <__swsetup_r+0x30>
 8009828:	2209      	movs	r2, #9
 800982a:	602a      	str	r2, [r5, #0]
 800982c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	f04f 30ff 	mov.w	r0, #4294967295
 8009836:	e033      	b.n	80098a0 <__swsetup_r+0x98>
 8009838:	0758      	lsls	r0, r3, #29
 800983a:	d512      	bpl.n	8009862 <__swsetup_r+0x5a>
 800983c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800983e:	b141      	cbz	r1, 8009852 <__swsetup_r+0x4a>
 8009840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009844:	4299      	cmp	r1, r3
 8009846:	d002      	beq.n	800984e <__swsetup_r+0x46>
 8009848:	4628      	mov	r0, r5
 800984a:	f7fe fc45 	bl	80080d8 <_free_r>
 800984e:	2300      	movs	r3, #0
 8009850:	6363      	str	r3, [r4, #52]	@ 0x34
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	2300      	movs	r3, #0
 800985c:	6063      	str	r3, [r4, #4]
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f043 0308 	orr.w	r3, r3, #8
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	b94b      	cbnz	r3, 8009882 <__swsetup_r+0x7a>
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009878:	d003      	beq.n	8009882 <__swsetup_r+0x7a>
 800987a:	4621      	mov	r1, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f7ff f967 	bl	8008b50 <__smakebuf_r>
 8009882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009886:	f013 0201 	ands.w	r2, r3, #1
 800988a:	d00a      	beq.n	80098a2 <__swsetup_r+0x9a>
 800988c:	2200      	movs	r2, #0
 800988e:	60a2      	str	r2, [r4, #8]
 8009890:	6962      	ldr	r2, [r4, #20]
 8009892:	4252      	negs	r2, r2
 8009894:	61a2      	str	r2, [r4, #24]
 8009896:	6922      	ldr	r2, [r4, #16]
 8009898:	b942      	cbnz	r2, 80098ac <__swsetup_r+0xa4>
 800989a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800989e:	d1c5      	bne.n	800982c <__swsetup_r+0x24>
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
 80098a2:	0799      	lsls	r1, r3, #30
 80098a4:	bf58      	it	pl
 80098a6:	6962      	ldrpl	r2, [r4, #20]
 80098a8:	60a2      	str	r2, [r4, #8]
 80098aa:	e7f4      	b.n	8009896 <__swsetup_r+0x8e>
 80098ac:	2000      	movs	r0, #0
 80098ae:	e7f7      	b.n	80098a0 <__swsetup_r+0x98>
 80098b0:	20000018 	.word	0x20000018

080098b4 <memmove>:
 80098b4:	4288      	cmp	r0, r1
 80098b6:	b510      	push	{r4, lr}
 80098b8:	eb01 0402 	add.w	r4, r1, r2
 80098bc:	d902      	bls.n	80098c4 <memmove+0x10>
 80098be:	4284      	cmp	r4, r0
 80098c0:	4623      	mov	r3, r4
 80098c2:	d807      	bhi.n	80098d4 <memmove+0x20>
 80098c4:	1e43      	subs	r3, r0, #1
 80098c6:	42a1      	cmp	r1, r4
 80098c8:	d008      	beq.n	80098dc <memmove+0x28>
 80098ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d2:	e7f8      	b.n	80098c6 <memmove+0x12>
 80098d4:	4402      	add	r2, r0
 80098d6:	4601      	mov	r1, r0
 80098d8:	428a      	cmp	r2, r1
 80098da:	d100      	bne.n	80098de <memmove+0x2a>
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098e6:	e7f7      	b.n	80098d8 <memmove+0x24>

080098e8 <wcslen>:
 80098e8:	4602      	mov	r2, r0
 80098ea:	4613      	mov	r3, r2
 80098ec:	3204      	adds	r2, #4
 80098ee:	6819      	ldr	r1, [r3, #0]
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d1fa      	bne.n	80098ea <wcslen+0x2>
 80098f4:	1a18      	subs	r0, r3, r0
 80098f6:	1080      	asrs	r0, r0, #2
 80098f8:	4770      	bx	lr

080098fa <wmemchr>:
 80098fa:	b530      	push	{r4, r5, lr}
 80098fc:	4603      	mov	r3, r0
 80098fe:	2400      	movs	r4, #0
 8009900:	4294      	cmp	r4, r2
 8009902:	4618      	mov	r0, r3
 8009904:	d101      	bne.n	800990a <wmemchr+0x10>
 8009906:	2000      	movs	r0, #0
 8009908:	bd30      	pop	{r4, r5, pc}
 800990a:	6805      	ldr	r5, [r0, #0]
 800990c:	428d      	cmp	r5, r1
 800990e:	f103 0304 	add.w	r3, r3, #4
 8009912:	d0f9      	beq.n	8009908 <wmemchr+0xe>
 8009914:	3401      	adds	r4, #1
 8009916:	e7f3      	b.n	8009900 <wmemchr+0x6>

08009918 <_fstat_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	@ (8009938 <_fstat_r+0x20>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	f7f8 f852 	bl	80019ce <_fstat>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d102      	bne.n	8009934 <_fstat_r+0x1c>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	b103      	cbz	r3, 8009934 <_fstat_r+0x1c>
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	2000a478 	.word	0x2000a478

0800993c <_isatty_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d06      	ldr	r5, [pc, #24]	@ (8009958 <_isatty_r+0x1c>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	f7f8 f851 	bl	80019ee <_isatty>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_isatty_r+0x1a>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_isatty_r+0x1a>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	2000a478 	.word	0x2000a478

0800995c <__assert_func>:
 800995c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800995e:	4614      	mov	r4, r2
 8009960:	461a      	mov	r2, r3
 8009962:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <__assert_func+0x2c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4605      	mov	r5, r0
 8009968:	68d8      	ldr	r0, [r3, #12]
 800996a:	b954      	cbnz	r4, 8009982 <__assert_func+0x26>
 800996c:	4b07      	ldr	r3, [pc, #28]	@ (800998c <__assert_func+0x30>)
 800996e:	461c      	mov	r4, r3
 8009970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009974:	9100      	str	r1, [sp, #0]
 8009976:	462b      	mov	r3, r5
 8009978:	4905      	ldr	r1, [pc, #20]	@ (8009990 <__assert_func+0x34>)
 800997a:	f000 f901 	bl	8009b80 <fiprintf>
 800997e:	f000 f911 	bl	8009ba4 <abort>
 8009982:	4b04      	ldr	r3, [pc, #16]	@ (8009994 <__assert_func+0x38>)
 8009984:	e7f4      	b.n	8009970 <__assert_func+0x14>
 8009986:	bf00      	nop
 8009988:	20000018 	.word	0x20000018
 800998c:	0800d169 	.word	0x0800d169
 8009990:	0800d13b 	.word	0x0800d13b
 8009994:	0800d12e 	.word	0x0800d12e

08009998 <__ascii_mbtowc>:
 8009998:	b082      	sub	sp, #8
 800999a:	b901      	cbnz	r1, 800999e <__ascii_mbtowc+0x6>
 800999c:	a901      	add	r1, sp, #4
 800999e:	b142      	cbz	r2, 80099b2 <__ascii_mbtowc+0x1a>
 80099a0:	b14b      	cbz	r3, 80099b6 <__ascii_mbtowc+0x1e>
 80099a2:	7813      	ldrb	r3, [r2, #0]
 80099a4:	600b      	str	r3, [r1, #0]
 80099a6:	7812      	ldrb	r2, [r2, #0]
 80099a8:	1e10      	subs	r0, r2, #0
 80099aa:	bf18      	it	ne
 80099ac:	2001      	movne	r0, #1
 80099ae:	b002      	add	sp, #8
 80099b0:	4770      	bx	lr
 80099b2:	4610      	mov	r0, r2
 80099b4:	e7fb      	b.n	80099ae <__ascii_mbtowc+0x16>
 80099b6:	f06f 0001 	mvn.w	r0, #1
 80099ba:	e7f8      	b.n	80099ae <__ascii_mbtowc+0x16>

080099bc <_realloc_r>:
 80099bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c0:	4680      	mov	r8, r0
 80099c2:	4615      	mov	r5, r2
 80099c4:	460c      	mov	r4, r1
 80099c6:	b921      	cbnz	r1, 80099d2 <_realloc_r+0x16>
 80099c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099cc:	4611      	mov	r1, r2
 80099ce:	f7fc bdbb 	b.w	8006548 <_malloc_r>
 80099d2:	b92a      	cbnz	r2, 80099e0 <_realloc_r+0x24>
 80099d4:	f7fe fb80 	bl	80080d8 <_free_r>
 80099d8:	2400      	movs	r4, #0
 80099da:	4620      	mov	r0, r4
 80099dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e0:	f000 f8e7 	bl	8009bb2 <_malloc_usable_size_r>
 80099e4:	4285      	cmp	r5, r0
 80099e6:	4606      	mov	r6, r0
 80099e8:	d802      	bhi.n	80099f0 <_realloc_r+0x34>
 80099ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80099ee:	d8f4      	bhi.n	80099da <_realloc_r+0x1e>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4640      	mov	r0, r8
 80099f4:	f7fc fda8 	bl	8006548 <_malloc_r>
 80099f8:	4607      	mov	r7, r0
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0ec      	beq.n	80099d8 <_realloc_r+0x1c>
 80099fe:	42b5      	cmp	r5, r6
 8009a00:	462a      	mov	r2, r5
 8009a02:	4621      	mov	r1, r4
 8009a04:	bf28      	it	cs
 8009a06:	4632      	movcs	r2, r6
 8009a08:	f7fd fd09 	bl	800741e <memcpy>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f7fe fb62 	bl	80080d8 <_free_r>
 8009a14:	463c      	mov	r4, r7
 8009a16:	e7e0      	b.n	80099da <_realloc_r+0x1e>

08009a18 <__ascii_wctomb>:
 8009a18:	4603      	mov	r3, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	b141      	cbz	r1, 8009a30 <__ascii_wctomb+0x18>
 8009a1e:	2aff      	cmp	r2, #255	@ 0xff
 8009a20:	d904      	bls.n	8009a2c <__ascii_wctomb+0x14>
 8009a22:	228a      	movs	r2, #138	@ 0x8a
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2a:	4770      	bx	lr
 8009a2c:	700a      	strb	r2, [r1, #0]
 8009a2e:	2001      	movs	r0, #1
 8009a30:	4770      	bx	lr
	...

08009a34 <btowc>:
 8009a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	b087      	sub	sp, #28
 8009a3a:	d103      	bne.n	8009a44 <btowc+0x10>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	b007      	add	sp, #28
 8009a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a44:	4d1c      	ldr	r5, [pc, #112]	@ (8009ab8 <btowc+0x84>)
 8009a46:	f88d 000b 	strb.w	r0, [sp, #11]
 8009a4a:	ae04      	add	r6, sp, #16
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7fd fc55 	bl	8007300 <memset>
 8009a56:	682f      	ldr	r7, [r5, #0]
 8009a58:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009a5a:	b9fc      	cbnz	r4, 8009a9c <btowc+0x68>
 8009a5c:	2050      	movs	r0, #80	@ 0x50
 8009a5e:	f7fe fb85 	bl	800816c <malloc>
 8009a62:	4602      	mov	r2, r0
 8009a64:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a66:	b920      	cbnz	r0, 8009a72 <btowc+0x3e>
 8009a68:	4b14      	ldr	r3, [pc, #80]	@ (8009abc <btowc+0x88>)
 8009a6a:	4815      	ldr	r0, [pc, #84]	@ (8009ac0 <btowc+0x8c>)
 8009a6c:	2118      	movs	r1, #24
 8009a6e:	f7ff ff75 	bl	800995c <__assert_func>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a76:	e9c3 4400 	strd	r4, r4, [r3]
 8009a7a:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8009a7e:	e9c3 4404 	strd	r4, r4, [r3, #16]
 8009a82:	e9c3 440a 	strd	r4, r4, [r3, #40]	@ 0x28
 8009a86:	e9c3 440c 	strd	r4, r4, [r3, #48]	@ 0x30
 8009a8a:	e9c3 440e 	strd	r4, r4, [r3, #56]	@ 0x38
 8009a8e:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
 8009a92:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
 8009a96:	619c      	str	r4, [r3, #24]
 8009a98:	771c      	strb	r4, [r3, #28]
 8009a9a:	625c      	str	r4, [r3, #36]	@ 0x24
 8009a9c:	4b09      	ldr	r3, [pc, #36]	@ (8009ac4 <btowc+0x90>)
 8009a9e:	9600      	str	r6, [sp, #0]
 8009aa0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 8009aa4:	6828      	ldr	r0, [r5, #0]
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f10d 020b 	add.w	r2, sp, #11
 8009aac:	a903      	add	r1, sp, #12
 8009aae:	47a0      	blx	r4
 8009ab0:	2801      	cmp	r0, #1
 8009ab2:	d8c3      	bhi.n	8009a3c <btowc+0x8>
 8009ab4:	9803      	ldr	r0, [sp, #12]
 8009ab6:	e7c3      	b.n	8009a40 <btowc+0xc>
 8009ab8:	20000018 	.word	0x20000018
 8009abc:	0800cde9 	.word	0x0800cde9
 8009ac0:	0800d16a 	.word	0x0800d16a
 8009ac4:	20000068 	.word	0x20000068

08009ac8 <__ssputs_r>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	688e      	ldr	r6, [r1, #8]
 8009ace:	461f      	mov	r7, r3
 8009ad0:	42be      	cmp	r6, r7
 8009ad2:	680b      	ldr	r3, [r1, #0]
 8009ad4:	4682      	mov	sl, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	4690      	mov	r8, r2
 8009ada:	d82d      	bhi.n	8009b38 <__ssputs_r+0x70>
 8009adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ae4:	d026      	beq.n	8009b34 <__ssputs_r+0x6c>
 8009ae6:	6965      	ldr	r5, [r4, #20]
 8009ae8:	6909      	ldr	r1, [r1, #16]
 8009aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aee:	eba3 0901 	sub.w	r9, r3, r1
 8009af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009af6:	1c7b      	adds	r3, r7, #1
 8009af8:	444b      	add	r3, r9
 8009afa:	106d      	asrs	r5, r5, #1
 8009afc:	429d      	cmp	r5, r3
 8009afe:	bf38      	it	cc
 8009b00:	461d      	movcc	r5, r3
 8009b02:	0553      	lsls	r3, r2, #21
 8009b04:	d527      	bpl.n	8009b56 <__ssputs_r+0x8e>
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7fc fd1e 	bl	8006548 <_malloc_r>
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	b360      	cbz	r0, 8009b6a <__ssputs_r+0xa2>
 8009b10:	6921      	ldr	r1, [r4, #16]
 8009b12:	464a      	mov	r2, r9
 8009b14:	f7fd fc83 	bl	800741e <memcpy>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	6126      	str	r6, [r4, #16]
 8009b26:	6165      	str	r5, [r4, #20]
 8009b28:	444e      	add	r6, r9
 8009b2a:	eba5 0509 	sub.w	r5, r5, r9
 8009b2e:	6026      	str	r6, [r4, #0]
 8009b30:	60a5      	str	r5, [r4, #8]
 8009b32:	463e      	mov	r6, r7
 8009b34:	42be      	cmp	r6, r7
 8009b36:	d900      	bls.n	8009b3a <__ssputs_r+0x72>
 8009b38:	463e      	mov	r6, r7
 8009b3a:	6820      	ldr	r0, [r4, #0]
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	4641      	mov	r1, r8
 8009b40:	f7ff feb8 	bl	80098b4 <memmove>
 8009b44:	68a3      	ldr	r3, [r4, #8]
 8009b46:	1b9b      	subs	r3, r3, r6
 8009b48:	60a3      	str	r3, [r4, #8]
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	4433      	add	r3, r6
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	2000      	movs	r0, #0
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	462a      	mov	r2, r5
 8009b58:	f7ff ff30 	bl	80099bc <_realloc_r>
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d1e0      	bne.n	8009b24 <__ssputs_r+0x5c>
 8009b62:	6921      	ldr	r1, [r4, #16]
 8009b64:	4650      	mov	r0, sl
 8009b66:	f7fe fab7 	bl	80080d8 <_free_r>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	f8ca 3000 	str.w	r3, [sl]
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e7e9      	b.n	8009b52 <__ssputs_r+0x8a>
	...

08009b80 <fiprintf>:
 8009b80:	b40e      	push	{r1, r2, r3}
 8009b82:	b503      	push	{r0, r1, lr}
 8009b84:	4601      	mov	r1, r0
 8009b86:	ab03      	add	r3, sp, #12
 8009b88:	4805      	ldr	r0, [pc, #20]	@ (8009ba0 <fiprintf+0x20>)
 8009b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b8e:	6800      	ldr	r0, [r0, #0]
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	f7fe fe9f 	bl	80088d4 <_vfiprintf_r>
 8009b96:	b002      	add	sp, #8
 8009b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b9c:	b003      	add	sp, #12
 8009b9e:	4770      	bx	lr
 8009ba0:	20000018 	.word	0x20000018

08009ba4 <abort>:
 8009ba4:	b508      	push	{r3, lr}
 8009ba6:	2006      	movs	r0, #6
 8009ba8:	f000 f834 	bl	8009c14 <raise>
 8009bac:	2001      	movs	r0, #1
 8009bae:	f7f7 febe 	bl	800192e <_exit>

08009bb2 <_malloc_usable_size_r>:
 8009bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb6:	1f18      	subs	r0, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bfbc      	itt	lt
 8009bbc:	580b      	ldrlt	r3, [r1, r0]
 8009bbe:	18c0      	addlt	r0, r0, r3
 8009bc0:	4770      	bx	lr

08009bc2 <_raise_r>:
 8009bc2:	291f      	cmp	r1, #31
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	460c      	mov	r4, r1
 8009bca:	d904      	bls.n	8009bd6 <_raise_r+0x14>
 8009bcc:	2316      	movs	r3, #22
 8009bce:	6003      	str	r3, [r0, #0]
 8009bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bd8:	b112      	cbz	r2, 8009be0 <_raise_r+0x1e>
 8009bda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bde:	b94b      	cbnz	r3, 8009bf4 <_raise_r+0x32>
 8009be0:	4628      	mov	r0, r5
 8009be2:	f000 f831 	bl	8009c48 <_getpid_r>
 8009be6:	4622      	mov	r2, r4
 8009be8:	4601      	mov	r1, r0
 8009bea:	4628      	mov	r0, r5
 8009bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf0:	f000 b818 	b.w	8009c24 <_kill_r>
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d00a      	beq.n	8009c0e <_raise_r+0x4c>
 8009bf8:	1c59      	adds	r1, r3, #1
 8009bfa:	d103      	bne.n	8009c04 <_raise_r+0x42>
 8009bfc:	2316      	movs	r3, #22
 8009bfe:	6003      	str	r3, [r0, #0]
 8009c00:	2001      	movs	r0, #1
 8009c02:	e7e7      	b.n	8009bd4 <_raise_r+0x12>
 8009c04:	2100      	movs	r1, #0
 8009c06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4798      	blx	r3
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e7e0      	b.n	8009bd4 <_raise_r+0x12>
	...

08009c14 <raise>:
 8009c14:	4b02      	ldr	r3, [pc, #8]	@ (8009c20 <raise+0xc>)
 8009c16:	4601      	mov	r1, r0
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	f7ff bfd2 	b.w	8009bc2 <_raise_r>
 8009c1e:	bf00      	nop
 8009c20:	20000018 	.word	0x20000018

08009c24 <_kill_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	@ (8009c44 <_kill_r+0x20>)
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	4611      	mov	r1, r2
 8009c30:	602b      	str	r3, [r5, #0]
 8009c32:	f7f7 fe6c 	bl	800190e <_kill>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d102      	bne.n	8009c40 <_kill_r+0x1c>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b103      	cbz	r3, 8009c40 <_kill_r+0x1c>
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	bd38      	pop	{r3, r4, r5, pc}
 8009c42:	bf00      	nop
 8009c44:	2000a478 	.word	0x2000a478

08009c48 <_getpid_r>:
 8009c48:	f7f7 be59 	b.w	80018fe <_getpid>

08009c4c <_init>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr

08009c58 <_fini>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr
