
STMReactorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006f58  08006f58  00007f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007370  08007370  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007370  08007370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007374  08007374  00008374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007378  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  0800754c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800754c  00009418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010546  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002810  00000000  00000000  0001974a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5a  00000000  00000000  0001cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002827b  00000000  00000000  0001dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014215  00000000  00000000  00045e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f425f  00000000  00000000  0005a052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e2b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005230  00000000  00000000  0014e2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00153524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f3c 	.word	0x08006f3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006f3c 	.word	0x08006f3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  return wire_init();
 8000e9c:	f000 fbee 	bl	800167c <wire_init>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000eb2:	f000 fc05 	bl	80016c0 <wire_reset>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <send_cmd+0x1a>
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e01e      	b.n	8000efe <send_cmd+0x58>

  if (!rom_code) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d103      	bne.n	8000ece <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000ec6:	20cc      	movs	r0, #204	@ 0xcc
 8000ec8:	f000 fc9c 	bl	8001804 <wire_write>
 8000ecc:	e012      	b.n	8000ef4 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000ece:	2055      	movs	r0, #85	@ 0x55
 8000ed0:	f000 fc98 	bl	8001804 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e009      	b.n	8000eee <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fc8e 	bl	8001804 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddf2      	ble.n	8000eda <send_cmd+0x34>
  }
  wire_write(cmd);
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fc84 	bl	8001804 <wire_write>
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000f0e:	2144      	movs	r1, #68	@ 0x44
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffc8 	bl	8000ea6 <send_cmd>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000f2a:	21be      	movs	r1, #190	@ 0xbe
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffba 	bl	8000ea6 <send_cmd>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e01e      	b.n	8000f7a <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e009      	b.n	8000f56 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	18d4      	adds	r4, r2, r3
 8000f48:	f000 fc08 	bl	800175c <wire_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	ddf2      	ble.n	8000f42 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f000 fc9e 	bl	80018a0 <wire_crc>
 8000f64:	4603      	mov	r3, r0
 8000f66:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	7afa      	ldrb	r2, [r7, #11]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d101      	bne.n	8000f78 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e000      	b.n	8000f7a <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
	...

08000f84 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffc4 	bl	8000f20 <ds18b20_read_scratchpad>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <ds18b20_get_temp+0x20>
    return 85.0f;
 8000f9e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000fcc <ds18b20_get_temp+0x48>
 8000fa2:	e00b      	b.n	8000fbc <ds18b20_get_temp+0x38>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000fa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000fb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8000fbc:	eef0 7a47 	vmov.f32	s15, s14
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	42aa0000 	.word	0x42aa0000

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_GPIO_Init+0x74>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a16      	ldr	r2, [pc, #88]	@ (8001044 <MX_GPIO_Init+0x74>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_GPIO_Init+0x74>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_GPIO_Init+0x74>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <MX_GPIO_Init+0x74>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_GPIO_Init+0x74>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2120      	movs	r1, #32
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <MX_GPIO_Init+0x78>)
 800101c:	f000 ffcc 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS_Pin */
  GPIO_InitStruct.Pin = DS_Pin;
 8001020:	2320      	movs	r3, #32
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001024:	2311      	movs	r3, #17
 8001026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_GPIO_Init+0x78>)
 8001038:	f000 fdfc 	bl	8001c34 <HAL_GPIO_Init>

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800

0800104c <enter_critical_section>:
#include "interrupt.h".h"

uint32_t enter_critical_section(uint32_t priority) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001054:	f3ef 8311 	mrs	r3, BASEPRI
 8001058:	60fb      	str	r3, [r7, #12]
  return(result);
 800105a:	68fb      	ldr	r3, [r7, #12]
    uint32_t old_basepri = __get_BASEPRI();
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f383 8811 	msr	BASEPRI, r3
}
 8001068:	bf00      	nop
    __set_BASEPRI(priority);
    return old_basepri;
 800106a:	697b      	ldr	r3, [r7, #20]
}
 800106c:	4618      	mov	r0, r3
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <exit_critical_section>:

void exit_critical_section(uint32_t old_basepri) {
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f383 8811 	msr	BASEPRI, r3
}
 800108a:	bf00      	nop
    __set_BASEPRI(old_basepri);
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b0a      	cmp	r3, #10
 80010a4:	d102      	bne.n	80010ac <__io_putchar+0x14>
    __io_putchar('\r');
 80010a6:	200d      	movs	r0, #13
 80010a8:	f7ff fff6 	bl	8001098 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010ac:	1d39      	adds	r1, r7, #4
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	2201      	movs	r2, #1
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <__io_putchar+0x2c>)
 80010b6:	f002 fcf3 	bl	8003aa0 <HAL_UART_Transmit>

  return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000240 	.word	0x20000240

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f000 fc32 	bl	8001936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f86d 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f7ff ff7b 	bl	8000fd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010da:	f000 fa43 	bl	8001564 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80010de:	f000 f9eb 	bl	80014b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (ds18b20_init() != HAL_OK) {
 80010e2:	f7ff fed9 	bl	8000e98 <ds18b20_init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x28>
    Error_Handler();
 80010ec:	f000 f8b2 	bl	8001254 <Error_Handler>
  }

  const uint8_t ds1[] = { 0x28, 0x29, 0x35, 0x7, 0xD6, 0x1, 0x3C, 0xFF };
 80010f0:	4a28      	ldr	r2, [pc, #160]	@ (8001194 <main+0xcc>)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fa:	e883 0003 	stmia.w	r3, {r0, r1}
  const uint8_t ds2[] = { 0x28, 0xD3, 0xEA, 0x7, 0xD6, 0x1, 0x3C, 0x73 };
 80010fe:	4a26      	ldr	r2, [pc, #152]	@ (8001198 <main+0xd0>)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001106:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds18b20_start_measure(ds1);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fef9 	bl	8000f06 <ds18b20_start_measure>
	  ds18b20_start_measure(ds2);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fef5 	bl	8000f06 <ds18b20_start_measure>

	  HAL_Delay(750);
 800111c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001120:	f000 fc7e 	bl	8001a20 <HAL_Delay>

	  float temp = ds18b20_get_temp(ds1);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff2b 	bl	8000f84 <ds18b20_get_temp>
 800112e:	ed87 0a05 	vstr	s0, [r7, #20]
	  if (temp <= -80.0f)
 8001132:	edd7 7a05 	vldr	s15, [r7, #20]
 8001136:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800119c <main+0xd4>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d803      	bhi.n	800114c <main+0x84>
	    printf("Sensor error (1)...\n");
 8001144:	4816      	ldr	r0, [pc, #88]	@ (80011a0 <main+0xd8>)
 8001146:	f003 ff89 	bl	800505c <puts>
 800114a:	e007      	b.n	800115c <main+0x94>
	  else
	    printf("T1 = %.1f*C\n", temp);
 800114c:	6978      	ldr	r0, [r7, #20]
 800114e:	f7ff f9fb 	bl	8000548 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <main+0xdc>)
 8001158:	f003 ff18 	bl	8004f8c <iprintf>

	  temp = ds18b20_get_temp(ds2);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff10 	bl	8000f84 <ds18b20_get_temp>
 8001164:	ed87 0a05 	vstr	s0, [r7, #20]
	  if (temp <= -80.0f)
 8001168:	edd7 7a05 	vldr	s15, [r7, #20]
 800116c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800119c <main+0xd4>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d803      	bhi.n	8001182 <main+0xba>
	    printf("Sensor error (2)...\n");
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <main+0xe0>)
 800117c:	f003 ff6e 	bl	800505c <puts>
 8001180:	e7c3      	b.n	800110a <main+0x42>
	  else
	    printf("T2 = %.1f*C\n", temp);
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4807      	ldr	r0, [pc, #28]	@ (80011ac <main+0xe4>)
 800118e:	f003 fefd 	bl	8004f8c <iprintf>
  {
 8001192:	e7ba      	b.n	800110a <main+0x42>
 8001194:	08006fa0 	.word	0x08006fa0
 8001198:	08006fa8 	.word	0x08006fa8
 800119c:	c2a00000 	.word	0xc2a00000
 80011a0:	08006f58 	.word	0x08006f58
 80011a4:	08006f6c 	.word	0x08006f6c
 80011a8:	08006f7c 	.word	0x08006f7c
 80011ac:	08006f90 	.word	0x08006f90

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	@ 0x58
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2244      	movs	r2, #68	@ 0x44
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 f82c 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011d6:	f000 ff15 	bl	8002004 <HAL_PWREx_ControlVoltageScaling>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e0:	f000 f838 	bl	8001254 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011e4:	2310      	movs	r3, #16
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f0:	2360      	movs	r3, #96	@ 0x60
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001200:	2328      	movs	r3, #40	@ 0x28
 8001202:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001204:	2307      	movs	r3, #7
 8001206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4618      	mov	r0, r3
 8001216:	f000 ff4b 	bl	80020b0 <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001220:	f000 f818 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2303      	movs	r3, #3
 800122a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2104      	movs	r1, #4
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fb13 	bl	8002868 <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001248:	f000 f804 	bl	8001254 <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3758      	adds	r7, #88	@ 0x58
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <Error_Handler+0x8>

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	@ 0x60
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	@ 0x58
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 fb6f 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}

08001306 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_kill>:

int _kill(int pid, int sig)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001320:	f003 ffce 	bl	80052c0 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	2216      	movs	r2, #22
 8001328:	601a      	str	r2, [r3, #0]
  return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_exit>:

void _exit (int status)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800133e:	f04f 31ff 	mov.w	r1, #4294967295
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffe7 	bl	8001316 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <_exit+0x12>

0800134c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e00a      	b.n	8001374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135e:	f3af 8000 	nop.w
 8001362:	4601      	mov	r1, r0
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbf0      	blt.n	800135e <_read+0x12>
  }

  return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e009      	b.n	80013ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe79 	bl	8001098 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf1      	blt.n	8001398 <_write+0x12>
  }
  return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_close>:

int _close(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e6:	605a      	str	r2, [r3, #4]
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_isatty>:

int _isatty(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f003 ff32 	bl	80052c0 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	@ (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20018000 	.word	0x20018000
 8001488:	00000400 	.word	0x00000400
 800148c:	200001f0 	.word	0x200001f0
 8001490:	20000418 	.word	0x20000418

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_TIM6_Init+0x64>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <MX_TIM6_Init+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_TIM6_Init+0x64>)
 80014d0:	224f      	movs	r2, #79	@ 0x4f
 80014d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_TIM6_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_TIM6_Init+0x64>)
 80014dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_TIM6_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_TIM6_Init+0x64>)
 80014ea:	f002 f89d 	bl	8003628 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014f4:	f7ff feae 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_TIM6_Init+0x64>)
 8001506:	f002 f9f5 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001510:	f7ff fea0 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200001f4 	.word	0x200001f4
 8001520:	40001000 	.word	0x40001000

08001524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_TIM_Base_MspInit+0x38>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10b      	bne.n	800154e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_TIM_Base_MspInit+0x3c>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <HAL_TIM_Base_MspInit+0x3c>)
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6593      	str	r3, [r2, #88]	@ 0x58
 8001542:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <HAL_TIM_Base_MspInit+0x3c>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40001000 	.word	0x40001000
 8001560:	40021000 	.word	0x40021000

08001564 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 800156a:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <MX_USART2_UART_Init+0x5c>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_USART2_UART_Init+0x58>)
 80015a8:	f002 fa2c 	bl	8003a04 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015b2:	f7ff fe4f 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000240 	.word	0x20000240
 80015c0:	40004400 	.word	0x40004400

080015c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0ac      	sub	sp, #176	@ 0xb0
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2288      	movs	r2, #136	@ 0x88
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fe19 	bl	800521c <memset>
  if(uartHandle->Instance==USART2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <HAL_UART_MspInit+0xb0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d13b      	bne.n	800166c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fb55 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f7ff fe22 	bl	8001254 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_UART_MspInit+0xb4>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <HAL_UART_MspInit+0xb4>)
 8001616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161a:	6593      	str	r3, [r2, #88]	@ 0x58
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <HAL_UART_MspInit+0xb4>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <HAL_UART_MspInit+0xb4>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <HAL_UART_MspInit+0xb4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_UART_MspInit+0xb4>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001640:	230c      	movs	r3, #12
 8001642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001658:	2307      	movs	r3, #7
 800165a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f000 fae4 	bl	8001c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800166c:	bf00      	nop
 800166e:	37b0      	adds	r7, #176	@ 0xb0
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40004400 	.word	0x40004400
 8001678:	40021000 	.word	0x40021000

0800167c <wire_init>:
#include "gpio.h"
#include "tim.h"
#include "interrupt.h"

HAL_StatusTypeDef wire_init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <wire_init+0x10>)
 8001682:	f002 f829 	bl	80036d8 <HAL_TIM_Base_Start>
 8001686:	4603      	mov	r3, r0
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200001f4 	.word	0x200001f4

08001690 <delay_us>:

static void delay_us(uint32_t us)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <delay_us+0x2c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 80016a0:	bf00      	nop
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <delay_us+0x2c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d8f9      	bhi.n	80016a2 <delay_us+0x12>
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	200001f4 	.word	0x200001f4

080016c0 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
	int rc;

	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2120      	movs	r1, #32
 80016ca:	4811      	ldr	r0, [pc, #68]	@ (8001710 <wire_reset+0x50>)
 80016cc:	f000 fc74 	bl	8001fb8 <HAL_GPIO_WritePin>
	delay_us(480);
 80016d0:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80016d4:	f7ff ffdc 	bl	8001690 <delay_us>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <wire_reset+0x50>)
 80016de:	f000 fc6b 	bl	8001fb8 <HAL_GPIO_WritePin>
	delay_us(70);
 80016e2:	2046      	movs	r0, #70	@ 0x46
 80016e4:	f7ff ffd4 	bl	8001690 <delay_us>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80016e8:	2120      	movs	r1, #32
 80016ea:	4809      	ldr	r0, [pc, #36]	@ (8001710 <wire_reset+0x50>)
 80016ec:	f000 fc4c 	bl	8001f88 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	607b      	str	r3, [r7, #4]
	delay_us(410);
 80016f4:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80016f8:	f7ff ffca 	bl	8001690 <delay_us>

	if (rc == 0)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <wire_reset+0x46>
		return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <wire_reset+0x48>
	else
		return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	48000800 	.word	0x48000800

08001714 <read_bit>:

static int read_bit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	int rc;
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2120      	movs	r1, #32
 800171e:	480e      	ldr	r0, [pc, #56]	@ (8001758 <read_bit+0x44>)
 8001720:	f000 fc4a 	bl	8001fb8 <HAL_GPIO_WritePin>
	delay_us(6);
 8001724:	2006      	movs	r0, #6
 8001726:	f7ff ffb3 	bl	8001690 <delay_us>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2120      	movs	r1, #32
 800172e:	480a      	ldr	r0, [pc, #40]	@ (8001758 <read_bit+0x44>)
 8001730:	f000 fc42 	bl	8001fb8 <HAL_GPIO_WritePin>
	delay_us(9);
 8001734:	2009      	movs	r0, #9
 8001736:	f7ff ffab 	bl	8001690 <delay_us>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 800173a:	2120      	movs	r1, #32
 800173c:	4806      	ldr	r0, [pc, #24]	@ (8001758 <read_bit+0x44>)
 800173e:	f000 fc23 	bl	8001f88 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	607b      	str	r3, [r7, #4]
	delay_us(55);
 8001746:	2037      	movs	r0, #55	@ 0x37
 8001748:	f7ff ffa2 	bl	8001690 <delay_us>

	return rc;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	48000800 	.word	0x48000800

0800175c <wire_read>:

uint8_t wire_read(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
	int i;
	uint32_t old_basepri = enter_critical_section(0x20);
 8001766:	2020      	movs	r0, #32
 8001768:	f7ff fc70 	bl	800104c <enter_critical_section>
 800176c:	6078      	str	r0, [r7, #4]
	for (i = 0; i < 8; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	e00e      	b.n	8001792 <wire_read+0x36>
		value >>= 1;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
		if (read_bit())
 800177a:	f7ff ffcb 	bl	8001714 <read_bit>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <wire_read+0x30>
			value |= 0x80;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800178a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++) {
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	3301      	adds	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b07      	cmp	r3, #7
 8001796:	dded      	ble.n	8001774 <wire_read+0x18>
  }
	exit_critical_section(old_basepri);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc6d 	bl	8001078 <exit_critical_section>
	return value;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <write_bit>:

static void write_bit(int value)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if (value) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <write_bit+0x30>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2120      	movs	r1, #32
 80017ba:	4811      	ldr	r0, [pc, #68]	@ (8001800 <write_bit+0x58>)
 80017bc:	f000 fbfc 	bl	8001fb8 <HAL_GPIO_WritePin>
		delay_us(6);
 80017c0:	2006      	movs	r0, #6
 80017c2:	f7ff ff65 	bl	8001690 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <write_bit+0x58>)
 80017cc:	f000 fbf4 	bl	8001fb8 <HAL_GPIO_WritePin>
		delay_us(64);
 80017d0:	2040      	movs	r0, #64	@ 0x40
 80017d2:	f7ff ff5d 	bl	8001690 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
		delay_us(60);
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
		delay_us(10);
  }
}
 80017d6:	e00f      	b.n	80017f8 <write_bit+0x50>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2120      	movs	r1, #32
 80017dc:	4808      	ldr	r0, [pc, #32]	@ (8001800 <write_bit+0x58>)
 80017de:	f000 fbeb 	bl	8001fb8 <HAL_GPIO_WritePin>
		delay_us(60);
 80017e2:	203c      	movs	r0, #60	@ 0x3c
 80017e4:	f7ff ff54 	bl	8001690 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <write_bit+0x58>)
 80017ee:	f000 fbe3 	bl	8001fb8 <HAL_GPIO_WritePin>
		delay_us(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f7ff ff4c 	bl	8001690 <delay_us>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	48000800 	.word	0x48000800

08001804 <wire_write>:

void wire_write(uint8_t byte)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	int i;
	uint32_t old_basepri = enter_critical_section(0x20);
 800180e:	2020      	movs	r0, #32
 8001810:	f7ff fc1c 	bl	800104c <enter_critical_section>
 8001814:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < 8; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e00b      	b.n	8001834 <wire_write+0x30>
		write_bit(byte & 0x01);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ffc0 	bl	80017a8 <write_bit>
		byte >>= 1;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++) {
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3301      	adds	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b07      	cmp	r3, #7
 8001838:	ddf0      	ble.n	800181c <wire_write+0x18>
  }
	exit_critical_section(old_basepri);
 800183a:	68b8      	ldr	r0, [r7, #8]
 800183c:	f7ff fc1c 	bl	8001078 <exit_critical_section>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	int i;
	for (i = 0; i < 8; i++) {
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e016      	b.n	800188c <byte_crc+0x44>
		uint8_t b = crc ^ byte;
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	4053      	eors	r3, r2
 8001864:	72fb      	strb	r3, [r7, #11]
		crc >>= 1;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	71fb      	strb	r3, [r7, #7]
		if (b & 0x01)
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <byte_crc+0x38>
			crc ^= 0x8c;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800187c:	43db      	mvns	r3, r3
 800187e:	71fb      	strb	r3, [r7, #7]
		byte >>= 1;
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i++) {
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b07      	cmp	r3, #7
 8001890:	dde5      	ble.n	800185e <byte_crc+0x16>
  }
	return crc;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t crc = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e00d      	b.n	80018d0 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	7afb      	ldrb	r3, [r7, #11]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ffc1 	bl	8001848 <byte_crc>
 80018c6:	4603      	mov	r3, r0
 80018c8:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbed      	blt.n	80018b4 <wire_crc+0x14>

    return crc;
 80018d8:	7afb      	ldrb	r3, [r7, #11]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800191c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018e8:	f7ff fdd4 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopForever+0xe>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopForever+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f003 fcdb 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001916:	f7ff fbd7 	bl	80010c8 <main>

0800191a <LoopForever>:

LoopForever:
    b LoopForever
 800191a:	e7fe      	b.n	800191a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800191c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001928:	08007378 	.word	0x08007378
  ldr r2, =_sbss
 800192c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001930:	20000418 	.word	0x20000418

08001934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC1_2_IRQHandler>

08001936 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f943 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001946:	200f      	movs	r0, #15
 8001948:	f000 f80e 	bl	8001968 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	e001      	b.n	800195c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001958:	f7ff fc82 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800195c:	79fb      	ldrb	r3, [r7, #7]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <HAL_InitTick+0x6c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d023      	beq.n	80019c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800197c:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <HAL_InitTick+0x70>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <HAL_InitTick+0x6c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f941 	bl	8001c1a <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d809      	bhi.n	80019b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f919 	bl	8001be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b0:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <HAL_InitTick+0x74>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e004      	b.n	80019c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e001      	b.n	80019c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	200002c8 	.word	0x200002c8

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200002c8 	.word	0x200002c8

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	@ (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	@ (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff8e 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff47 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff5c 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff8e 	bl	8001b20 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5d 	bl	8001acc <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffb0 	bl	8001b88 <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	e17f      	b.n	8001f44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8171 	beq.w	8001f3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d005      	beq.n	8001c74 <HAL_GPIO_Init+0x40>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d130      	bne.n	8001cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001caa:	2201      	movs	r2, #1
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 0201 	and.w	r2, r3, #1
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d118      	bne.n	8001d14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d017      	beq.n	8001d50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d123      	bne.n	8001da4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	6939      	ldr	r1, [r7, #16]
 8001da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80ac 	beq.w	8001f3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f64 <HAL_GPIO_Init+0x330>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dea:	4a5e      	ldr	r2, [pc, #376]	@ (8001f64 <HAL_GPIO_Init+0x330>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f64 <HAL_GPIO_Init+0x330>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x242>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f6c <HAL_GPIO_Init+0x338>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x23e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4e      	ldr	r2, [pc, #312]	@ (8001f70 <HAL_GPIO_Init+0x33c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x23a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f74 <HAL_GPIO_Init+0x340>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x236>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_GPIO_Init+0x344>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x232>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_GPIO_Init+0x348>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x22e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_GPIO_Init+0x34c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x22a>
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e00c      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e00a      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e008      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e66:	2304      	movs	r3, #4
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e004      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x244>
 8001e76:	2300      	movs	r3, #0
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	f002 0203 	and.w	r2, r2, #3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4093      	lsls	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e88:	4937      	ldr	r1, [pc, #220]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eba:	4a32      	ldr	r2, [pc, #200]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec0:	4b30      	ldr	r3, [pc, #192]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee4:	4a27      	ldr	r2, [pc, #156]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eea:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f38:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <HAL_GPIO_Init+0x350>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f47f ae78 	bne.w	8001c44 <HAL_GPIO_Init+0x10>
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	48000800 	.word	0x48000800
 8001f74:	48000c00 	.word	0x48000c00
 8001f78:	48001000 	.word	0x48001000
 8001f7c:	48001400 	.word	0x48001400
 8001f80:	48001800 	.word	0x48001800
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40007000 	.word	0x40007000

08002004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002012:	d130      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800201c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002020:	d038      	beq.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800202a:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2232      	movs	r2, #50	@ 0x32
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	4a1b      	ldr	r2, [pc, #108]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	3301      	adds	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002048:	e002      	b.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b01      	subs	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205c:	d102      	bne.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f2      	bne.n	800204a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002070:	d110      	bne.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e00f      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002082:	d007      	beq.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800208c:	4a05      	ldr	r2, [pc, #20]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40007000 	.word	0x40007000
 80020a8:	20000000 	.word	0x20000000
 80020ac:	431bde83 	.word	0x431bde83

080020b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e3ca      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b97      	ldr	r3, [pc, #604]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b94      	ldr	r3, [pc, #592]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80e4 	beq.w	80022ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_RCC_OscConfig+0x4a>
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	f040 808b 	bne.w	8002208 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	f040 8087 	bne.w	8002208 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fa:	4b89      	ldr	r3, [pc, #548]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e3a2      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	4b82      	ldr	r3, [pc, #520]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_RCC_OscConfig+0x7c>
 8002122:	4b7f      	ldr	r3, [pc, #508]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800212a:	e005      	b.n	8002138 <HAL_RCC_OscConfig+0x88>
 800212c:	4b7c      	ldr	r3, [pc, #496]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800212e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002138:	4293      	cmp	r3, r2
 800213a:	d223      	bcs.n	8002184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fd55 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e383      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002150:	4b73      	ldr	r3, [pc, #460]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a72      	ldr	r2, [pc, #456]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b70      	ldr	r3, [pc, #448]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	496d      	ldr	r1, [pc, #436]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	4b6c      	ldr	r3, [pc, #432]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4968      	ldr	r1, [pc, #416]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e025      	b.n	80021d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002184:	4b66      	ldr	r3, [pc, #408]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a65      	ldr	r2, [pc, #404]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b63      	ldr	r3, [pc, #396]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4960      	ldr	r1, [pc, #384]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	495b      	ldr	r1, [pc, #364]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fd15 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e343      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d0:	f000 fc4a 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b52      	ldr	r3, [pc, #328]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	4950      	ldr	r1, [pc, #320]	@ (8002324 <HAL_RCC_OscConfig+0x274>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002328 <HAL_RCC_OscConfig+0x278>)
 80021ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021f0:	4b4e      	ldr	r3, [pc, #312]	@ (800232c <HAL_RCC_OscConfig+0x27c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fbb7 	bl	8001968 <HAL_InitTick>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d052      	beq.n	80022aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	e327      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d032      	beq.n	8002276 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002210:	4b43      	ldr	r3, [pc, #268]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a42      	ldr	r2, [pc, #264]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221c:	f7ff fbf4 	bl	8001a08 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002224:	f7ff fbf0 	bl	8001a08 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e310      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002236:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002242:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a36      	ldr	r2, [pc, #216]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4931      	ldr	r1, [pc, #196]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	492c      	ldr	r1, [pc, #176]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e01a      	b.n	80022ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002276:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a29      	ldr	r2, [pc, #164]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002282:	f7ff fbc1 	bl	8001a08 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228a:	f7ff fbbd 	bl	8001a08 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e2dd      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x1da>
 80022a8:	e000      	b.n	80022ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d074      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x21a>
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d10e      	bne.n	80022e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d10b      	bne.n	80022e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d064      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d160      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e2ba      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x24a>
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e026      	b.n	8002348 <HAL_RCC_OscConfig+0x298>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002302:	d115      	bne.n	8002330 <HAL_RCC_OscConfig+0x280>
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 800230a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a02      	ldr	r2, [pc, #8]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e014      	b.n	8002348 <HAL_RCC_OscConfig+0x298>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	08006fb0 	.word	0x08006fb0
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004
 8002330:	4ba0      	ldr	r3, [pc, #640]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a9f      	ldr	r2, [pc, #636]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b9d      	ldr	r3, [pc, #628]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a9c      	ldr	r2, [pc, #624]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff fb5a 	bl	8001a08 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fb56 	bl	8001a08 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e276      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	4b92      	ldr	r3, [pc, #584]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x2a8>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff fb46 	bl	8001a08 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff fb42 	bl	8001a08 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e262      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	4b88      	ldr	r3, [pc, #544]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d0>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d060      	beq.n	8002470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x310>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d119      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d116      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	4b7c      	ldr	r3, [pc, #496]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x328>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e23f      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b76      	ldr	r3, [pc, #472]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	4973      	ldr	r1, [pc, #460]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	e040      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d023      	beq.n	800243e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f6:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7ff fb01 	bl	8001a08 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7ff fafd 	bl	8001a08 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e21d      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b65      	ldr	r3, [pc, #404]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b62      	ldr	r3, [pc, #392]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	495f      	ldr	r1, [pc, #380]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e018      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b5d      	ldr	r3, [pc, #372]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff fadd 	bl	8001a08 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7ff fad9 	bl	8001a08 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1f9      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002484:	4b4b      	ldr	r3, [pc, #300]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248a:	4a4a      	ldr	r2, [pc, #296]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7ff fab8 	bl	8001a08 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7ff fab4 	bl	8001a08 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1d4      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x3ec>
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c4:	4a3b      	ldr	r2, [pc, #236]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7ff fa9b 	bl	8001a08 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7ff fa97 	bl	8001a08 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1b7      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	4b32      	ldr	r3, [pc, #200]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002508:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	4a26      	ldr	r2, [pc, #152]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d118      	bne.n	800256e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <HAL_RCC_OscConfig+0x508>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1d      	ldr	r2, [pc, #116]	@ (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002548:	f7ff fa5e 	bl	8001a08 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002550:	f7ff fa5a 	bl	8001a08 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e17a      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x4d8>
 8002576:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257c:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002586:	e029      	b.n	80025dc <HAL_RCC_OscConfig+0x52c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d115      	bne.n	80025bc <HAL_RCC_OscConfig+0x50c>
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	4a03      	ldr	r2, [pc, #12]	@ (80025b4 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x52c>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	4a9b      	ldr	r2, [pc, #620]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025cc:	4b98      	ldr	r3, [pc, #608]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d2:	4a97      	ldr	r2, [pc, #604]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d016      	beq.n	8002612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff fa10 	bl	8001a08 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7ff fa0c 	bl	8001a08 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e12a      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b8b      	ldr	r3, [pc, #556]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ed      	beq.n	80025ec <HAL_RCC_OscConfig+0x53c>
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7ff f9f9 	bl	8001a08 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff f9f5 	bl	8001a08 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e113      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002630:	4b7f      	ldr	r3, [pc, #508]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ed      	bne.n	800261a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b7a      	ldr	r3, [pc, #488]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	4a79      	ldr	r2, [pc, #484]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80fe 	beq.w	8002856 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	2b02      	cmp	r3, #2
 8002660:	f040 80d0 	bne.w	8002804 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002664:	4b72      	ldr	r3, [pc, #456]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	429a      	cmp	r2, r3
 8002676:	d130      	bne.n	80026da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	3b01      	subs	r3, #1
 8002684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d127      	bne.n	80026da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d11f      	bne.n	80026da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026a4:	2a07      	cmp	r2, #7
 80026a6:	bf14      	ite	ne
 80026a8:	2201      	movne	r2, #1
 80026aa:	2200      	moveq	r2, #0
 80026ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d113      	bne.n	80026da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d109      	bne.n	80026da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	3b01      	subs	r3, #1
 80026d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d06e      	beq.n	80027b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d069      	beq.n	80027b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026e0:	4b53      	ldr	r3, [pc, #332]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026ec:	4b50      	ldr	r3, [pc, #320]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0ad      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a4b      	ldr	r2, [pc, #300]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002708:	f7ff f97e 	bl	8001a08 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff f97a 	bl	8001a08 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e09a      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002722:	4b43      	ldr	r3, [pc, #268]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272e:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <HAL_RCC_OscConfig+0x784>)
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800273e:	3a01      	subs	r2, #1
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002748:	0212      	lsls	r2, r2, #8
 800274a:	4311      	orrs	r1, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	3a01      	subs	r2, #1
 8002754:	0552      	lsls	r2, r2, #21
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800275c:	0852      	lsrs	r2, r2, #1
 800275e:	3a01      	subs	r2, #1
 8002760:	0652      	lsls	r2, r2, #25
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002768:	0912      	lsrs	r2, r2, #4
 800276a:	0452      	lsls	r2, r2, #17
 800276c:	430a      	orrs	r2, r1
 800276e:	4930      	ldr	r1, [pc, #192]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002774:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002780:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a2a      	ldr	r2, [pc, #168]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800278c:	f7ff f93c 	bl	8001a08 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7ff f938 	bl	8001a08 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e058      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b2:	e050      	b.n	8002856 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e04f      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d148      	bne.n	8002856 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027dc:	f7ff f914 	bl	8001a08 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7ff f910 	bl	8001a08 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e030      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x734>
 8002802:	e028      	b.n	8002856 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d023      	beq.n	8002852 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a08      	ldr	r2, [pc, #32]	@ (8002830 <HAL_RCC_OscConfig+0x780>)
 8002810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7ff f8f7 	bl	8001a08 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	e00c      	b.n	8002838 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7ff f8f3 	bl	8001a08 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d905      	bls.n	8002838 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e013      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
 8002830:	40021000 	.word	0x40021000
 8002834:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x7b0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ec      	bne.n	800281e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_RCC_OscConfig+0x7b0>)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4905      	ldr	r1, [pc, #20]	@ (8002860 <HAL_RCC_OscConfig+0x7b0>)
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RCC_OscConfig+0x7b4>)
 800284c:	4013      	ands	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
 8002850:	e001      	b.n	8002856 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	feeefffc 	.word	0xfeeefffc

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0e7      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b75      	ldr	r3, [pc, #468]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b72      	ldr	r3, [pc, #456]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4970      	ldr	r1, [pc, #448]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0cf      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	4b66      	ldr	r3, [pc, #408]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d908      	bls.n	80028da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4960      	ldr	r1, [pc, #384]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04c      	beq.n	8002980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d121      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0a6      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002906:	4b54      	ldr	r3, [pc, #336]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e09a      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e08e      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e086      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b46      	ldr	r3, [pc, #280]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4943      	ldr	r1, [pc, #268]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7ff f85a 	bl	8001a08 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7ff f856 	bl	8001a08 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e06e      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	492b      	ldr	r1, [pc, #172]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ae:	4b29      	ldr	r3, [pc, #164]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d210      	bcs.n	80029de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4923      	ldr	r1, [pc, #140]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e036      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4918      	ldr	r1, [pc, #96]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a08:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4910      	ldr	r1, [pc, #64]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1c:	f000 f824 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	490b      	ldr	r1, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f4>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a3c:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1fc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe ff91 	bl	8001968 <HAL_InitTick>
 8002a46:	4603      	mov	r3, r0
 8002a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08006fb0 	.word	0x08006fb0
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	@ 0x24
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a76:	4b3e      	ldr	r3, [pc, #248]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a80:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d121      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d11e      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a9c:	4b34      	ldr	r3, [pc, #208]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aa8:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10d      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ae0:	4b25      	ldr	r3, [pc, #148]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e004      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aec:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d134      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d003      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xac>
 8002b0c:	e005      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b10:	617b      	str	r3, [r7, #20]
      break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b16:	617b      	str	r3, [r7, #20]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	617b      	str	r3, [r7, #20]
      break;
 8002b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b2e:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	fb03 f202 	mul.w	r2, r3, r2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	0e5b      	lsrs	r3, r3, #25
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	3301      	adds	r3, #1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b60:	69bb      	ldr	r3, [r7, #24]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08006fc8 	.word	0x08006fc8
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4904      	ldr	r1, [pc, #16]	@ (8002bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08006fc0 	.word	0x08006fc0

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc8:	f7ff ffda 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4904      	ldr	r1, [pc, #16]	@ (8002bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08006fc0 	.word	0x08006fc0

08002bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c08:	f7ff f9ee 	bl	8001fe8 <HAL_PWREx_GetVoltageRange>
 8002c0c:	6178      	str	r0, [r7, #20]
 8002c0e:	e014      	b.n	8002c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	4a24      	ldr	r2, [pc, #144]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f9de 	bl	8001fe8 <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c40:	d10b      	bne.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b80      	cmp	r3, #128	@ 0x80
 8002c46:	d919      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c4c:	d902      	bls.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c4e:	2302      	movs	r3, #2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e013      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c54:	2301      	movs	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e010      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b80      	cmp	r3, #128	@ 0x80
 8002c5e:	d902      	bls.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c60:	2303      	movs	r3, #3
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e00a      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	@ 0x80
 8002c6a:	d102      	bne.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e004      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b70      	cmp	r3, #112	@ 0x70
 8002c76:	d101      	bne.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 0207 	bic.w	r2, r3, #7
 8002c84:	4909      	ldr	r1, [pc, #36]	@ (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c8c:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40022000 	.word	0x40022000

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d041      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cd4:	d02a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cda:	d824      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ce6:	d81e      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cf2:	e018      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf4:	4b86      	ldr	r3, [pc, #536]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a85      	ldr	r2, [pc, #532]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d00:	e015      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fabb 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d12:	e00c      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3320      	adds	r3, #32
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fba6 	bl	800346c <RCCEx_PLLSAI2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d24:	e003      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d34:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d42:	4973      	ldr	r1, [pc, #460]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d4a:	e001      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d041      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d64:	d02a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d6a:	d824      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d70:	d008      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d76:	d81e      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d80:	d010      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d82:	e018      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d84:	4b62      	ldr	r3, [pc, #392]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a61      	ldr	r2, [pc, #388]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d90:	e015      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fa73 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da2:	e00c      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3320      	adds	r3, #32
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fb5e 	bl	800346c <RCCEx_PLLSAI2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db4:	e003      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	74fb      	strb	r3, [r7, #19]
      break;
 8002dba:	e000      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dc4:	4b52      	ldr	r3, [pc, #328]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd2:	494f      	ldr	r1, [pc, #316]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dda:	e001      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a0 	beq.w	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df2:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	4a40      	ldr	r2, [pc, #256]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e14:	4b3e      	ldr	r3, [pc, #248]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e24:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3a      	ldr	r2, [pc, #232]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e30:	f7fe fdea 	bl	8001a08 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e36:	e009      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe fde6 	bl	8001a08 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	74fb      	strb	r3, [r7, #19]
        break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e4c:	4b31      	ldr	r3, [pc, #196]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d15c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d019      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e88:	4b21      	ldr	r3, [pc, #132]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	4a20      	ldr	r2, [pc, #128]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e98:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea8:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe fda5 	bl	8001a08 <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec0:	e00b      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fda1 	bl	8001a08 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d902      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ec      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eee:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efe:	4904      	ldr	r1, [pc, #16]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f06:	e009      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
 8002f0c:	e006      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1c:	7c7b      	ldrb	r3, [r7, #17]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b9e      	ldr	r3, [pc, #632]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	4a9d      	ldr	r2, [pc, #628]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3a:	4b98      	ldr	r3, [pc, #608]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f40:	f023 0203 	bic.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	4994      	ldr	r1, [pc, #592]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f62:	f023 020c 	bic.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	498c      	ldr	r1, [pc, #560]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f7e:	4b87      	ldr	r3, [pc, #540]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	4983      	ldr	r1, [pc, #524]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	497b      	ldr	r1, [pc, #492]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fc2:	4b76      	ldr	r3, [pc, #472]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd0:	4972      	ldr	r1, [pc, #456]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	496a      	ldr	r1, [pc, #424]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003006:	4b65      	ldr	r3, [pc, #404]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	4961      	ldr	r1, [pc, #388]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003028:	4b5c      	ldr	r3, [pc, #368]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003036:	4959      	ldr	r1, [pc, #356]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304a:	4b54      	ldr	r3, [pc, #336]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003050:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003058:	4950      	ldr	r1, [pc, #320]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306c:	4b4b      	ldr	r3, [pc, #300]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	4948      	ldr	r1, [pc, #288]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800308e:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	493f      	ldr	r1, [pc, #252]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d028      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b0:	4b3a      	ldr	r3, [pc, #232]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030be:	4937      	ldr	r1, [pc, #220]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ce:	d106      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d0:	4b32      	ldr	r3, [pc, #200]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a31      	ldr	r2, [pc, #196]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030da:	60d3      	str	r3, [r2, #12]
 80030dc:	e011      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030e6:	d10c      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f8c8 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800310e:	4b23      	ldr	r3, [pc, #140]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	491f      	ldr	r1, [pc, #124]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312c:	d106      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312e:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4a1a      	ldr	r2, [pc, #104]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003138:	60d3      	str	r3, [r2, #12]
 800313a:	e011      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f899 	bl	8003284 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02b      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317a:	4908      	ldr	r1, [pc, #32]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800318a:	d109      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800318c:	4b03      	ldr	r3, [pc, #12]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a02      	ldr	r2, [pc, #8]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003196:	60d3      	str	r3, [r2, #12]
 8003198:	e014      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f867 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02f      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031de:	4928      	ldr	r1, [pc, #160]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031ee:	d10d      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f844 	bl	8003284 <RCCEx_PLLSAI1_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d014      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	74bb      	strb	r3, [r7, #18]
 800320a:	e011      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3320      	adds	r3, #32
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f925 	bl	800346c <RCCEx_PLLSAI2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800323c:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324a:	490d      	ldr	r1, [pc, #52]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800325e:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800326e:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003276:	7cbb      	ldrb	r3, [r7, #18]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000

08003284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003292:	4b75      	ldr	r3, [pc, #468]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800329e:	4b72      	ldr	r3, [pc, #456]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
       ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
       ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d047      	beq.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e044      	b.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d018      	beq.n	800330a <RCCEx_PLLSAI1_Config+0x86>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d825      	bhi.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0x62>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d009      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x74>
 80032e4:	e020      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e6:	4b60      	ldr	r3, [pc, #384]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e01a      	b.n	800332e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e013      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b57      	ldr	r3, [pc, #348]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003316:	4b54      	ldr	r3, [pc, #336]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003326:	e006      	b.n	8003336 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e004      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003336:	bf00      	nop
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333e:	4b4a      	ldr	r3, [pc, #296]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	430b      	orrs	r3, r1
 8003354:	4944      	ldr	r1, [pc, #272]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d17d      	bne.n	800345c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003360:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a40      	ldr	r2, [pc, #256]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800336a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fe fb4c 	bl	8001a08 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fe fb48 	bl	8001a08 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
        break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003388:	4b37      	ldr	r3, [pc, #220]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ef      	bne.n	8003374 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d160      	bne.n	800345c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d111      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033a0:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80033a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	0211      	lsls	r1, r2, #8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	0912      	lsrs	r2, r2, #4
 80033b8:	0452      	lsls	r2, r2, #17
 80033ba:	430a      	orrs	r2, r1
 80033bc:	492a      	ldr	r1, [pc, #168]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	610b      	str	r3, [r1, #16]
 80033c2:	e027      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d112      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ca:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	0211      	lsls	r1, r2, #8
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6912      	ldr	r2, [r2, #16]
 80033e0:	0852      	lsrs	r2, r2, #1
 80033e2:	3a01      	subs	r2, #1
 80033e4:	0552      	lsls	r2, r2, #21
 80033e6:	430a      	orrs	r2, r1
 80033e8:	491f      	ldr	r1, [pc, #124]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]
 80033ee:	e011      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6892      	ldr	r2, [r2, #8]
 8003400:	0211      	lsls	r1, r2, #8
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6952      	ldr	r2, [r2, #20]
 8003406:	0852      	lsrs	r2, r2, #1
 8003408:	3a01      	subs	r2, #1
 800340a:	0652      	lsls	r2, r2, #25
 800340c:	430a      	orrs	r2, r1
 800340e:	4916      	ldr	r1, [pc, #88]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003414:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a13      	ldr	r2, [pc, #76]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800341e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe faf2 	bl	8001a08 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003426:	e009      	b.n	800343c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003428:	f7fe faee 	bl	8001a08 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	73fb      	strb	r3, [r7, #15]
          break;
 800343a:	e005      	b.n	8003448 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	4904      	ldr	r1, [pc, #16]	@ (8003468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347a:	4b6a      	ldr	r3, [pc, #424]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003486:	4b67      	ldr	r3, [pc, #412]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d10d      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
       ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800349e:	4b61      	ldr	r3, [pc, #388]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
       ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d047      	beq.n	8003542 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	e044      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d018      	beq.n	80034f2 <RCCEx_PLLSAI2_Config+0x86>
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d825      	bhi.n	8003510 <RCCEx_PLLSAI2_Config+0xa4>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <RCCEx_PLLSAI2_Config+0x62>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d009      	beq.n	80034e0 <RCCEx_PLLSAI2_Config+0x74>
 80034cc:	e020      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ce:	4b55      	ldr	r3, [pc, #340]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11d      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034de:	e01a      	b.n	8003516 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e0:	4b50      	ldr	r3, [pc, #320]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e013      	b.n	800351a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fe:	4b49      	ldr	r3, [pc, #292]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350e:	e006      	b.n	800351e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e004      	b.n	8003520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800351e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003526:	4b3f      	ldr	r3, [pc, #252]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	430b      	orrs	r3, r1
 800353c:	4939      	ldr	r1, [pc, #228]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d167      	bne.n	8003618 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003548:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a35      	ldr	r2, [pc, #212]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fe fa58 	bl	8001a08 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800355a:	e009      	b.n	8003570 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800355c:	f7fe fa54 	bl	8001a08 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d902      	bls.n	8003570 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	73fb      	strb	r3, [r7, #15]
        break;
 800356e:	e005      	b.n	800357c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003570:	4b2c      	ldr	r3, [pc, #176]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ef      	bne.n	800355c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d14a      	bne.n	8003618 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003588:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	0211      	lsls	r1, r2, #8
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	0912      	lsrs	r2, r2, #4
 80035a0:	0452      	lsls	r2, r2, #17
 80035a2:	430a      	orrs	r2, r1
 80035a4:	491f      	ldr	r1, [pc, #124]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	614b      	str	r3, [r1, #20]
 80035aa:	e011      	b.n	80035d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	0211      	lsls	r1, r2, #8
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6912      	ldr	r2, [r2, #16]
 80035c2:	0852      	lsrs	r2, r2, #1
 80035c4:	3a01      	subs	r2, #1
 80035c6:	0652      	lsls	r2, r2, #25
 80035c8:	430a      	orrs	r2, r1
 80035ca:	4916      	ldr	r1, [pc, #88]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035d0:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a13      	ldr	r2, [pc, #76]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fa14 	bl	8001a08 <HAL_GetTick>
 80035e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035e2:	e009      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035e4:	f7fe fa10 	bl	8001a08 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d902      	bls.n	80035f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	73fb      	strb	r3, [r7, #15]
          break;
 80035f6:	e005      	b.n	8003604 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4904      	ldr	r1, [pc, #16]	@ (8003624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003614:	4313      	orrs	r3, r2
 8003616:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e049      	b.n	80036ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd ff68 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 f89e 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d001      	beq.n	80036f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e047      	b.n	8003780 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	@ (800378c <HAL_TIM_Base_Start+0xb4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01d      	beq.n	800373e <HAL_TIM_Base_Start+0x66>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370a:	d018      	beq.n	800373e <HAL_TIM_Base_Start+0x66>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_TIM_Base_Start+0xb8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_TIM_Base_Start+0x66>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <HAL_TIM_Base_Start+0xbc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_TIM_Base_Start+0x66>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <HAL_TIM_Base_Start+0xc0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_TIM_Base_Start+0x66>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_TIM_Base_Start+0xc4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIM_Base_Start+0x66>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <HAL_TIM_Base_Start+0xc8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d115      	bne.n	800376a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HAL_TIM_Base_Start+0xcc>)
 8003746:	4013      	ands	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d015      	beq.n	800377c <HAL_TIM_Base_Start+0xa4>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003756:	d011      	beq.n	800377c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	e008      	b.n	800377c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e000      	b.n	800377e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40013400 	.word	0x40013400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	00010007 	.word	0x00010007

080037a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a46      	ldr	r2, [pc, #280]	@ (80038d4 <TIM_Base_SetConfig+0x12c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c6:	d00f      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <TIM_Base_SetConfig+0x130>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <TIM_Base_SetConfig+0x134>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a41      	ldr	r2, [pc, #260]	@ (80038e0 <TIM_Base_SetConfig+0x138>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a40      	ldr	r2, [pc, #256]	@ (80038e4 <TIM_Base_SetConfig+0x13c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a35      	ldr	r2, [pc, #212]	@ (80038d4 <TIM_Base_SetConfig+0x12c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01f      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003808:	d01b      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a32      	ldr	r2, [pc, #200]	@ (80038d8 <TIM_Base_SetConfig+0x130>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d017      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a31      	ldr	r2, [pc, #196]	@ (80038dc <TIM_Base_SetConfig+0x134>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a30      	ldr	r2, [pc, #192]	@ (80038e0 <TIM_Base_SetConfig+0x138>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00f      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2f      	ldr	r2, [pc, #188]	@ (80038e4 <TIM_Base_SetConfig+0x13c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2e      	ldr	r2, [pc, #184]	@ (80038e8 <TIM_Base_SetConfig+0x140>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2d      	ldr	r2, [pc, #180]	@ (80038ec <TIM_Base_SetConfig+0x144>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_Base_SetConfig+0x9a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2c      	ldr	r2, [pc, #176]	@ (80038f0 <TIM_Base_SetConfig+0x148>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d108      	bne.n	8003854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <TIM_Base_SetConfig+0x12c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0xf8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a18      	ldr	r2, [pc, #96]	@ (80038e4 <TIM_Base_SetConfig+0x13c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0xf8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <TIM_Base_SetConfig+0x140>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0xf8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <TIM_Base_SetConfig+0x144>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0xf8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <TIM_Base_SetConfig+0x148>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d103      	bne.n	80038a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]
  }
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40013400 	.word	0x40013400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800

080038f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e068      	b.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2e      	ldr	r2, [pc, #184]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2d      	ldr	r2, [pc, #180]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1e      	ldr	r2, [pc, #120]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01d      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397e:	d018      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1b      	ldr	r2, [pc, #108]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a13      	ldr	r2, [pc, #76]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10c      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40013400 	.word	0x40013400
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40000c00 	.word	0x40000c00
 8003a00:	40014000 	.word	0x40014000

08003a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e040      	b.n	8003a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fdcc 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	@ 0x24
 8003a30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb6a 	bl	8004124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8af 	bl	8003bb4 <UART_SetConfig>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e01b      	b.n	8003a98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fbe9 	bl	8004268 <UART_CheckIdleState>
 8003a96:	4603      	mov	r3, r0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	@ 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d177      	bne.n	8003ba8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_UART_Transmit+0x24>
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e070      	b.n	8003baa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	@ 0x21
 8003ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd ff97 	bl	8001a08 <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x68>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b10:	e02f      	b.n	8003b72 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	@ 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fc4b 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e03b      	b.n	8003baa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b44:	b292      	uxth	r2, r2
 8003b46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e007      	b.n	8003b60 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1c9      	bne.n	8003b12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	2140      	movs	r1, #64	@ 0x40
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fc15 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e005      	b.n	8003baa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b08a      	sub	sp, #40	@ 0x28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4ba4      	ldr	r3, [pc, #656]	@ (8003e74 <UART_SetConfig+0x2c0>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a99      	ldr	r2, [pc, #612]	@ (8003e78 <UART_SetConfig+0x2c4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a90      	ldr	r2, [pc, #576]	@ (8003e7c <UART_SetConfig+0x2c8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d126      	bne.n	8003c8c <UART_SetConfig+0xd8>
 8003c3e:	4b90      	ldr	r3, [pc, #576]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d81b      	bhi.n	8003c84 <UART_SetConfig+0xd0>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <UART_SetConfig+0xa0>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c75 	.word	0x08003c75
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c7d 	.word	0x08003c7d
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e116      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e112      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e10e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e10a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8a:	e106      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a7c      	ldr	r2, [pc, #496]	@ (8003e84 <UART_SetConfig+0x2d0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d138      	bne.n	8003d08 <UART_SetConfig+0x154>
 8003c96:	4b7a      	ldr	r3, [pc, #488]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d82d      	bhi.n	8003d00 <UART_SetConfig+0x14c>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0xf8>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003d01 	.word	0x08003d01
 8003cb4:	08003d01 	.word	0x08003d01
 8003cb8:	08003d01 	.word	0x08003d01
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003d01 	.word	0x08003d01
 8003cc4:	08003d01 	.word	0x08003d01
 8003cc8:	08003d01 	.word	0x08003d01
 8003ccc:	08003ce9 	.word	0x08003ce9
 8003cd0:	08003d01 	.word	0x08003d01
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce6:	e0d8      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cee:	e0d4      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e0d0      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e0cc      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e0c8      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e88 <UART_SetConfig+0x2d4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d125      	bne.n	8003d5e <UART_SetConfig+0x1aa>
 8003d12:	4b5b      	ldr	r3, [pc, #364]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d1c:	2b30      	cmp	r3, #48	@ 0x30
 8003d1e:	d016      	beq.n	8003d4e <UART_SetConfig+0x19a>
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d818      	bhi.n	8003d56 <UART_SetConfig+0x1a2>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d00a      	beq.n	8003d3e <UART_SetConfig+0x18a>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d814      	bhi.n	8003d56 <UART_SetConfig+0x1a2>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <UART_SetConfig+0x182>
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d008      	beq.n	8003d46 <UART_SetConfig+0x192>
 8003d34:	e00f      	b.n	8003d56 <UART_SetConfig+0x1a2>
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3c:	e0ad      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d44:	e0a9      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d46:	2304      	movs	r3, #4
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4c:	e0a5      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d54:	e0a1      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d56:	2310      	movs	r3, #16
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5c:	e09d      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4a      	ldr	r2, [pc, #296]	@ (8003e8c <UART_SetConfig+0x2d8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d125      	bne.n	8003db4 <UART_SetConfig+0x200>
 8003d68:	4b45      	ldr	r3, [pc, #276]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d74:	d016      	beq.n	8003da4 <UART_SetConfig+0x1f0>
 8003d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d78:	d818      	bhi.n	8003dac <UART_SetConfig+0x1f8>
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d00a      	beq.n	8003d94 <UART_SetConfig+0x1e0>
 8003d7e:	2b80      	cmp	r3, #128	@ 0x80
 8003d80:	d814      	bhi.n	8003dac <UART_SetConfig+0x1f8>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <UART_SetConfig+0x1d8>
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x1e8>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x1f8>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e082      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e07e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e07a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e076      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e072      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a35      	ldr	r2, [pc, #212]	@ (8003e90 <UART_SetConfig+0x2dc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d12a      	bne.n	8003e14 <UART_SetConfig+0x260>
 8003dbe:	4b30      	ldr	r3, [pc, #192]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dcc:	d01a      	beq.n	8003e04 <UART_SetConfig+0x250>
 8003dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd2:	d81b      	bhi.n	8003e0c <UART_SetConfig+0x258>
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd8:	d00c      	beq.n	8003df4 <UART_SetConfig+0x240>
 8003dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dde:	d815      	bhi.n	8003e0c <UART_SetConfig+0x258>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <UART_SetConfig+0x238>
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de8:	d008      	beq.n	8003dfc <UART_SetConfig+0x248>
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x258>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e052      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e04e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e02:	e04a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e04:	2308      	movs	r3, #8
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e046      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e042      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <UART_SetConfig+0x2c4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d13a      	bne.n	8003e94 <UART_SetConfig+0x2e0>
 8003e1e:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e2c:	d01a      	beq.n	8003e64 <UART_SetConfig+0x2b0>
 8003e2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e32:	d81b      	bhi.n	8003e6c <UART_SetConfig+0x2b8>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e38:	d00c      	beq.n	8003e54 <UART_SetConfig+0x2a0>
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3e:	d815      	bhi.n	8003e6c <UART_SetConfig+0x2b8>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0x298>
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e48:	d008      	beq.n	8003e5c <UART_SetConfig+0x2a8>
 8003e4a:	e00f      	b.n	8003e6c <UART_SetConfig+0x2b8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e022      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e01e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e01a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e016      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e012      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e74:	efff69f3 	.word	0xefff69f3
 8003e78:	40008000 	.word	0x40008000
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40004400 	.word	0x40004400
 8003e88:	40004800 	.word	0x40004800
 8003e8c:	40004c00 	.word	0x40004c00
 8003e90:	40005000 	.word	0x40005000
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a9f      	ldr	r2, [pc, #636]	@ (800411c <UART_SetConfig+0x568>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d17a      	bne.n	8003f9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d824      	bhi.n	8003ef6 <UART_SetConfig+0x342>
 8003eac:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb4 <UART_SetConfig+0x300>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ee7 	.word	0x08003ee7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7fe fe5e 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003edc:	61f8      	str	r0, [r7, #28]
        break;
 8003ede:	e010      	b.n	8003f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8004120 <UART_SetConfig+0x56c>)
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e00d      	b.n	8003f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fe fdbf 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8003eea:	61f8      	str	r0, [r7, #28]
        break;
 8003eec:	e009      	b.n	8003f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef2:	61fb      	str	r3, [r7, #28]
        break;
 8003ef4:	e005      	b.n	8003f02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80fb 	beq.w	8004100 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d305      	bcc.n	8003f26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d903      	bls.n	8003f2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f2c:	e0e8      	b.n	8004100 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	461c      	mov	r4, r3
 8003f34:	4615      	mov	r5, r2
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	022b      	lsls	r3, r5, #8
 8003f40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f44:	0222      	lsls	r2, r4, #8
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	6849      	ldr	r1, [r1, #4]
 8003f4a:	0849      	lsrs	r1, r1, #1
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4681      	mov	r9, r0
 8003f52:	eb12 0a08 	adds.w	sl, r2, r8
 8003f56:	eb43 0b09 	adc.w	fp, r3, r9
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f68:	4650      	mov	r0, sl
 8003f6a:	4659      	mov	r1, fp
 8003f6c:	f7fc fe1c 	bl	8000ba8 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7e:	d308      	bcc.n	8003f92 <UART_SetConfig+0x3de>
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f86:	d204      	bcs.n	8003f92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	e0b6      	b.n	8004100 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f98:	e0b2      	b.n	8004100 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa2:	d15e      	bne.n	8004062 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d828      	bhi.n	8003ffe <UART_SetConfig+0x44a>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <UART_SetConfig+0x400>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fff 	.word	0x08003fff
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7fe fdde 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	61f8      	str	r0, [r7, #28]
        break;
 8003fde:	e014      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe0:	f7fe fdf0 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8004120 <UART_SetConfig+0x56c>)
 8003fea:	61fb      	str	r3, [r7, #28]
        break;
 8003fec:	e00d      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7fe fd3b 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8003ff2:	61f8      	str	r0, [r7, #28]
        break;
 8003ff4:	e009      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffa:	61fb      	str	r3, [r7, #28]
        break;
 8003ffc:	e005      	b.n	800400a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d077      	beq.n	8004100 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005a      	lsls	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d916      	bls.n	800405a <UART_SetConfig+0x4a6>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004032:	d212      	bcs.n	800405a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f023 030f 	bic.w	r3, r3, #15
 800403c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	b29b      	uxth	r3, r3
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	b29a      	uxth	r2, r3
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	4313      	orrs	r3, r2
 800404e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	8afa      	ldrh	r2, [r7, #22]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	e052      	b.n	8004100 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004060:	e04e      	b.n	8004100 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004062:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004066:	2b08      	cmp	r3, #8
 8004068:	d827      	bhi.n	80040ba <UART_SetConfig+0x506>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <UART_SetConfig+0x4bc>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004095 	.word	0x08004095
 8004074:	0800409d 	.word	0x0800409d
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040bb 	.word	0x080040bb
 8004080:	080040ab 	.word	0x080040ab
 8004084:	080040bb 	.word	0x080040bb
 8004088:	080040bb 	.word	0x080040bb
 800408c:	080040bb 	.word	0x080040bb
 8004090:	080040b3 	.word	0x080040b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fd80 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8004098:	61f8      	str	r0, [r7, #28]
        break;
 800409a:	e014      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7fe fd92 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
        break;
 80040a2:	e010      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <UART_SetConfig+0x56c>)
 80040a6:	61fb      	str	r3, [r7, #28]
        break;
 80040a8:	e00d      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040aa:	f7fe fcdd 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80040ae:	61f8      	str	r0, [r7, #28]
        break;
 80040b0:	e009      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b6:	61fb      	str	r3, [r7, #28]
        break;
 80040b8:	e005      	b.n	80040c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040c4:	bf00      	nop
    }

    if (pclk != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d019      	beq.n	8004100 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085a      	lsrs	r2, r3, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	441a      	add	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	d909      	bls.n	80040fa <UART_SetConfig+0x546>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ec:	d205      	bcs.n	80040fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	e002      	b.n	8004100 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800410c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	@ 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	40008000 	.word	0x40008000
 8004120:	00f42400 	.word	0x00f42400

08004124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01a      	beq.n	800423a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004222:	d10a      	bne.n	800423a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b098      	sub	sp, #96	@ 0x60
 800426c:	af02      	add	r7, sp, #8
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004278:	f7fd fbc6 	bl	8001a08 <HAL_GetTick>
 800427c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d12e      	bne.n	80042ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f88c 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d021      	beq.n	80042ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e6      	bne.n	80042a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e062      	b.n	80043b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d149      	bne.n	800438c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f856 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03c      	beq.n	800438c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	623b      	str	r3, [r7, #32]
   return(result);
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60fb      	str	r3, [r7, #12]
   return(result);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004364:	61fa      	str	r2, [r7, #28]
 8004366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	617b      	str	r3, [r7, #20]
   return(result);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e011      	b.n	80043b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3758      	adds	r7, #88	@ 0x58
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c8:	e04f      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d04b      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fd fb19 	bl	8001a08 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e04e      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d037      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b80      	cmp	r3, #128	@ 0x80
 80043fe:	d034      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d031      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d110      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2208      	movs	r2, #8
 800441a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f838 	bl	8004492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2208      	movs	r2, #8
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e029      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004444:	d111      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800444e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f81e 	bl	8004492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00f      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d0a0      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004492:	b480      	push	{r7}
 8004494:	b095      	sub	sp, #84	@ 0x54
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	61fb      	str	r3, [r7, #28]
   return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004504:	2b01      	cmp	r3, #1
 8004506:	d118      	bne.n	800453a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	60bb      	str	r3, [r7, #8]
   return(result);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f023 0310 	bic.w	r3, r3, #16
 800451c:	647b      	str	r3, [r7, #68]	@ 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	613b      	str	r3, [r7, #16]
   return(result);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e6      	bne.n	8004508 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800454e:	bf00      	nop
 8004550:	3754      	adds	r7, #84	@ 0x54
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <__cvt>:
 800455a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800455e:	ec57 6b10 	vmov	r6, r7, d0
 8004562:	2f00      	cmp	r7, #0
 8004564:	460c      	mov	r4, r1
 8004566:	4619      	mov	r1, r3
 8004568:	463b      	mov	r3, r7
 800456a:	bfbb      	ittet	lt
 800456c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004570:	461f      	movlt	r7, r3
 8004572:	2300      	movge	r3, #0
 8004574:	232d      	movlt	r3, #45	@ 0x2d
 8004576:	700b      	strb	r3, [r1, #0]
 8004578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800457a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800457e:	4691      	mov	r9, r2
 8004580:	f023 0820 	bic.w	r8, r3, #32
 8004584:	bfbc      	itt	lt
 8004586:	4632      	movlt	r2, r6
 8004588:	4616      	movlt	r6, r2
 800458a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800458e:	d005      	beq.n	800459c <__cvt+0x42>
 8004590:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004594:	d100      	bne.n	8004598 <__cvt+0x3e>
 8004596:	3401      	adds	r4, #1
 8004598:	2102      	movs	r1, #2
 800459a:	e000      	b.n	800459e <__cvt+0x44>
 800459c:	2103      	movs	r1, #3
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	ab02      	add	r3, sp, #8
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	ec47 6b10 	vmov	d0, r6, r7
 80045aa:	4653      	mov	r3, sl
 80045ac:	4622      	mov	r2, r4
 80045ae:	f000 ff3f 	bl	8005430 <_dtoa_r>
 80045b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045b6:	4605      	mov	r5, r0
 80045b8:	d119      	bne.n	80045ee <__cvt+0x94>
 80045ba:	f019 0f01 	tst.w	r9, #1
 80045be:	d00e      	beq.n	80045de <__cvt+0x84>
 80045c0:	eb00 0904 	add.w	r9, r0, r4
 80045c4:	2200      	movs	r2, #0
 80045c6:	2300      	movs	r3, #0
 80045c8:	4630      	mov	r0, r6
 80045ca:	4639      	mov	r1, r7
 80045cc:	f7fc fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80045d0:	b108      	cbz	r0, 80045d6 <__cvt+0x7c>
 80045d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80045d6:	2230      	movs	r2, #48	@ 0x30
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	454b      	cmp	r3, r9
 80045dc:	d31e      	bcc.n	800461c <__cvt+0xc2>
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045e2:	1b5b      	subs	r3, r3, r5
 80045e4:	4628      	mov	r0, r5
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	b004      	add	sp, #16
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045f2:	eb00 0904 	add.w	r9, r0, r4
 80045f6:	d1e5      	bne.n	80045c4 <__cvt+0x6a>
 80045f8:	7803      	ldrb	r3, [r0, #0]
 80045fa:	2b30      	cmp	r3, #48	@ 0x30
 80045fc:	d10a      	bne.n	8004614 <__cvt+0xba>
 80045fe:	2200      	movs	r2, #0
 8004600:	2300      	movs	r3, #0
 8004602:	4630      	mov	r0, r6
 8004604:	4639      	mov	r1, r7
 8004606:	f7fc fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800460a:	b918      	cbnz	r0, 8004614 <__cvt+0xba>
 800460c:	f1c4 0401 	rsb	r4, r4, #1
 8004610:	f8ca 4000 	str.w	r4, [sl]
 8004614:	f8da 3000 	ldr.w	r3, [sl]
 8004618:	4499      	add	r9, r3
 800461a:	e7d3      	b.n	80045c4 <__cvt+0x6a>
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	9103      	str	r1, [sp, #12]
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e7d9      	b.n	80045d8 <__cvt+0x7e>

08004624 <__exponent>:
 8004624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004626:	2900      	cmp	r1, #0
 8004628:	bfba      	itte	lt
 800462a:	4249      	neglt	r1, r1
 800462c:	232d      	movlt	r3, #45	@ 0x2d
 800462e:	232b      	movge	r3, #43	@ 0x2b
 8004630:	2909      	cmp	r1, #9
 8004632:	7002      	strb	r2, [r0, #0]
 8004634:	7043      	strb	r3, [r0, #1]
 8004636:	dd29      	ble.n	800468c <__exponent+0x68>
 8004638:	f10d 0307 	add.w	r3, sp, #7
 800463c:	461d      	mov	r5, r3
 800463e:	270a      	movs	r7, #10
 8004640:	461a      	mov	r2, r3
 8004642:	fbb1 f6f7 	udiv	r6, r1, r7
 8004646:	fb07 1416 	mls	r4, r7, r6, r1
 800464a:	3430      	adds	r4, #48	@ 0x30
 800464c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004650:	460c      	mov	r4, r1
 8004652:	2c63      	cmp	r4, #99	@ 0x63
 8004654:	f103 33ff 	add.w	r3, r3, #4294967295
 8004658:	4631      	mov	r1, r6
 800465a:	dcf1      	bgt.n	8004640 <__exponent+0x1c>
 800465c:	3130      	adds	r1, #48	@ 0x30
 800465e:	1e94      	subs	r4, r2, #2
 8004660:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004664:	1c41      	adds	r1, r0, #1
 8004666:	4623      	mov	r3, r4
 8004668:	42ab      	cmp	r3, r5
 800466a:	d30a      	bcc.n	8004682 <__exponent+0x5e>
 800466c:	f10d 0309 	add.w	r3, sp, #9
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	42ac      	cmp	r4, r5
 8004674:	bf88      	it	hi
 8004676:	2300      	movhi	r3, #0
 8004678:	3302      	adds	r3, #2
 800467a:	4403      	add	r3, r0
 800467c:	1a18      	subs	r0, r3, r0
 800467e:	b003      	add	sp, #12
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004682:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004686:	f801 6f01 	strb.w	r6, [r1, #1]!
 800468a:	e7ed      	b.n	8004668 <__exponent+0x44>
 800468c:	2330      	movs	r3, #48	@ 0x30
 800468e:	3130      	adds	r1, #48	@ 0x30
 8004690:	7083      	strb	r3, [r0, #2]
 8004692:	70c1      	strb	r1, [r0, #3]
 8004694:	1d03      	adds	r3, r0, #4
 8004696:	e7f1      	b.n	800467c <__exponent+0x58>

08004698 <_printf_float>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	b08d      	sub	sp, #52	@ 0x34
 800469e:	460c      	mov	r4, r1
 80046a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80046a4:	4616      	mov	r6, r2
 80046a6:	461f      	mov	r7, r3
 80046a8:	4605      	mov	r5, r0
 80046aa:	f000 fdbf 	bl	800522c <_localeconv_r>
 80046ae:	6803      	ldr	r3, [r0, #0]
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fddc 	bl	8000270 <strlen>
 80046b8:	2300      	movs	r3, #0
 80046ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80046bc:	f8d8 3000 	ldr.w	r3, [r8]
 80046c0:	9005      	str	r0, [sp, #20]
 80046c2:	3307      	adds	r3, #7
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	f103 0208 	add.w	r2, r3, #8
 80046cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046d0:	f8d4 b000 	ldr.w	fp, [r4]
 80046d4:	f8c8 2000 	str.w	r2, [r8]
 80046d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046e0:	9307      	str	r3, [sp, #28]
 80046e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80046e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004960 <_printf_float+0x2c8>)
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	f7fc fa1a 	bl	8000b2c <__aeabi_dcmpun>
 80046f8:	bb70      	cbnz	r0, 8004758 <_printf_float+0xc0>
 80046fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046fe:	4b98      	ldr	r3, [pc, #608]	@ (8004960 <_printf_float+0x2c8>)
 8004700:	f04f 32ff 	mov.w	r2, #4294967295
 8004704:	f7fc f9f4 	bl	8000af0 <__aeabi_dcmple>
 8004708:	bb30      	cbnz	r0, 8004758 <_printf_float+0xc0>
 800470a:	2200      	movs	r2, #0
 800470c:	2300      	movs	r3, #0
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f7fc f9e3 	bl	8000adc <__aeabi_dcmplt>
 8004716:	b110      	cbz	r0, 800471e <_printf_float+0x86>
 8004718:	232d      	movs	r3, #45	@ 0x2d
 800471a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800471e:	4a91      	ldr	r2, [pc, #580]	@ (8004964 <_printf_float+0x2cc>)
 8004720:	4b91      	ldr	r3, [pc, #580]	@ (8004968 <_printf_float+0x2d0>)
 8004722:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004726:	bf94      	ite	ls
 8004728:	4690      	movls	r8, r2
 800472a:	4698      	movhi	r8, r3
 800472c:	2303      	movs	r3, #3
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	f02b 0304 	bic.w	r3, fp, #4
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	f04f 0900 	mov.w	r9, #0
 800473a:	9700      	str	r7, [sp, #0]
 800473c:	4633      	mov	r3, r6
 800473e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f9d2 	bl	8004aec <_printf_common>
 8004748:	3001      	adds	r0, #1
 800474a:	f040 808d 	bne.w	8004868 <_printf_float+0x1d0>
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	b00d      	add	sp, #52	@ 0x34
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	4640      	mov	r0, r8
 800475e:	4649      	mov	r1, r9
 8004760:	f7fc f9e4 	bl	8000b2c <__aeabi_dcmpun>
 8004764:	b140      	cbz	r0, 8004778 <_printf_float+0xe0>
 8004766:	464b      	mov	r3, r9
 8004768:	2b00      	cmp	r3, #0
 800476a:	bfbc      	itt	lt
 800476c:	232d      	movlt	r3, #45	@ 0x2d
 800476e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004772:	4a7e      	ldr	r2, [pc, #504]	@ (800496c <_printf_float+0x2d4>)
 8004774:	4b7e      	ldr	r3, [pc, #504]	@ (8004970 <_printf_float+0x2d8>)
 8004776:	e7d4      	b.n	8004722 <_printf_float+0x8a>
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800477e:	9206      	str	r2, [sp, #24]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	d13b      	bne.n	80047fc <_printf_float+0x164>
 8004784:	2306      	movs	r3, #6
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800478c:	2300      	movs	r3, #0
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	9303      	str	r3, [sp, #12]
 8004792:	ab0a      	add	r3, sp, #40	@ 0x28
 8004794:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004798:	ab09      	add	r3, sp, #36	@ 0x24
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	6861      	ldr	r1, [r4, #4]
 800479e:	ec49 8b10 	vmov	d0, r8, r9
 80047a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80047a6:	4628      	mov	r0, r5
 80047a8:	f7ff fed7 	bl	800455a <__cvt>
 80047ac:	9b06      	ldr	r3, [sp, #24]
 80047ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047b0:	2b47      	cmp	r3, #71	@ 0x47
 80047b2:	4680      	mov	r8, r0
 80047b4:	d129      	bne.n	800480a <_printf_float+0x172>
 80047b6:	1cc8      	adds	r0, r1, #3
 80047b8:	db02      	blt.n	80047c0 <_printf_float+0x128>
 80047ba:	6863      	ldr	r3, [r4, #4]
 80047bc:	4299      	cmp	r1, r3
 80047be:	dd41      	ble.n	8004844 <_printf_float+0x1ac>
 80047c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80047c4:	fa5f fa8a 	uxtb.w	sl, sl
 80047c8:	3901      	subs	r1, #1
 80047ca:	4652      	mov	r2, sl
 80047cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80047d2:	f7ff ff27 	bl	8004624 <__exponent>
 80047d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047d8:	1813      	adds	r3, r2, r0
 80047da:	2a01      	cmp	r2, #1
 80047dc:	4681      	mov	r9, r0
 80047de:	6123      	str	r3, [r4, #16]
 80047e0:	dc02      	bgt.n	80047e8 <_printf_float+0x150>
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	07d2      	lsls	r2, r2, #31
 80047e6:	d501      	bpl.n	80047ec <_printf_float+0x154>
 80047e8:	3301      	adds	r3, #1
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0a2      	beq.n	800473a <_printf_float+0xa2>
 80047f4:	232d      	movs	r3, #45	@ 0x2d
 80047f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047fa:	e79e      	b.n	800473a <_printf_float+0xa2>
 80047fc:	9a06      	ldr	r2, [sp, #24]
 80047fe:	2a47      	cmp	r2, #71	@ 0x47
 8004800:	d1c2      	bne.n	8004788 <_printf_float+0xf0>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1c0      	bne.n	8004788 <_printf_float+0xf0>
 8004806:	2301      	movs	r3, #1
 8004808:	e7bd      	b.n	8004786 <_printf_float+0xee>
 800480a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800480e:	d9db      	bls.n	80047c8 <_printf_float+0x130>
 8004810:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004814:	d118      	bne.n	8004848 <_printf_float+0x1b0>
 8004816:	2900      	cmp	r1, #0
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	dd0b      	ble.n	8004834 <_printf_float+0x19c>
 800481c:	6121      	str	r1, [r4, #16]
 800481e:	b913      	cbnz	r3, 8004826 <_printf_float+0x18e>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	07d0      	lsls	r0, r2, #31
 8004824:	d502      	bpl.n	800482c <_printf_float+0x194>
 8004826:	3301      	adds	r3, #1
 8004828:	440b      	add	r3, r1
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800482e:	f04f 0900 	mov.w	r9, #0
 8004832:	e7db      	b.n	80047ec <_printf_float+0x154>
 8004834:	b913      	cbnz	r3, 800483c <_printf_float+0x1a4>
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	07d2      	lsls	r2, r2, #31
 800483a:	d501      	bpl.n	8004840 <_printf_float+0x1a8>
 800483c:	3302      	adds	r3, #2
 800483e:	e7f4      	b.n	800482a <_printf_float+0x192>
 8004840:	2301      	movs	r3, #1
 8004842:	e7f2      	b.n	800482a <_printf_float+0x192>
 8004844:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800484a:	4299      	cmp	r1, r3
 800484c:	db05      	blt.n	800485a <_printf_float+0x1c2>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	6121      	str	r1, [r4, #16]
 8004852:	07d8      	lsls	r0, r3, #31
 8004854:	d5ea      	bpl.n	800482c <_printf_float+0x194>
 8004856:	1c4b      	adds	r3, r1, #1
 8004858:	e7e7      	b.n	800482a <_printf_float+0x192>
 800485a:	2900      	cmp	r1, #0
 800485c:	bfd4      	ite	le
 800485e:	f1c1 0202 	rsble	r2, r1, #2
 8004862:	2201      	movgt	r2, #1
 8004864:	4413      	add	r3, r2
 8004866:	e7e0      	b.n	800482a <_printf_float+0x192>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	055a      	lsls	r2, r3, #21
 800486c:	d407      	bmi.n	800487e <_printf_float+0x1e6>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	4642      	mov	r2, r8
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	d12b      	bne.n	80048d4 <_printf_float+0x23c>
 800487c:	e767      	b.n	800474e <_printf_float+0xb6>
 800487e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004882:	f240 80dd 	bls.w	8004a40 <_printf_float+0x3a8>
 8004886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	f7fc f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004892:	2800      	cmp	r0, #0
 8004894:	d033      	beq.n	80048fe <_printf_float+0x266>
 8004896:	4a37      	ldr	r2, [pc, #220]	@ (8004974 <_printf_float+0x2dc>)
 8004898:	2301      	movs	r3, #1
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	f43f af54 	beq.w	800474e <_printf_float+0xb6>
 80048a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80048aa:	4543      	cmp	r3, r8
 80048ac:	db02      	blt.n	80048b4 <_printf_float+0x21c>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	07d8      	lsls	r0, r3, #31
 80048b2:	d50f      	bpl.n	80048d4 <_printf_float+0x23c>
 80048b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af45 	beq.w	800474e <_printf_float+0xb6>
 80048c4:	f04f 0900 	mov.w	r9, #0
 80048c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80048cc:	f104 0a1a 	add.w	sl, r4, #26
 80048d0:	45c8      	cmp	r8, r9
 80048d2:	dc09      	bgt.n	80048e8 <_printf_float+0x250>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	f100 8103 	bmi.w	8004ae2 <_printf_float+0x44a>
 80048dc:	68e0      	ldr	r0, [r4, #12]
 80048de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048e0:	4298      	cmp	r0, r3
 80048e2:	bfb8      	it	lt
 80048e4:	4618      	movlt	r0, r3
 80048e6:	e734      	b.n	8004752 <_printf_float+0xba>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4652      	mov	r2, sl
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f af2b 	beq.w	800474e <_printf_float+0xb6>
 80048f8:	f109 0901 	add.w	r9, r9, #1
 80048fc:	e7e8      	b.n	80048d0 <_printf_float+0x238>
 80048fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	dc39      	bgt.n	8004978 <_printf_float+0x2e0>
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <_printf_float+0x2dc>)
 8004906:	2301      	movs	r3, #1
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af1d 	beq.w	800474e <_printf_float+0xb6>
 8004914:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004918:	ea59 0303 	orrs.w	r3, r9, r3
 800491c:	d102      	bne.n	8004924 <_printf_float+0x28c>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	07d9      	lsls	r1, r3, #31
 8004922:	d5d7      	bpl.n	80048d4 <_printf_float+0x23c>
 8004924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af0d 	beq.w	800474e <_printf_float+0xb6>
 8004934:	f04f 0a00 	mov.w	sl, #0
 8004938:	f104 0b1a 	add.w	fp, r4, #26
 800493c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800493e:	425b      	negs	r3, r3
 8004940:	4553      	cmp	r3, sl
 8004942:	dc01      	bgt.n	8004948 <_printf_float+0x2b0>
 8004944:	464b      	mov	r3, r9
 8004946:	e793      	b.n	8004870 <_printf_float+0x1d8>
 8004948:	2301      	movs	r3, #1
 800494a:	465a      	mov	r2, fp
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f aefb 	beq.w	800474e <_printf_float+0xb6>
 8004958:	f10a 0a01 	add.w	sl, sl, #1
 800495c:	e7ee      	b.n	800493c <_printf_float+0x2a4>
 800495e:	bf00      	nop
 8004960:	7fefffff 	.word	0x7fefffff
 8004964:	08006ff8 	.word	0x08006ff8
 8004968:	08006ffc 	.word	0x08006ffc
 800496c:	08007000 	.word	0x08007000
 8004970:	08007004 	.word	0x08007004
 8004974:	08007008 	.word	0x08007008
 8004978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800497a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800497e:	4553      	cmp	r3, sl
 8004980:	bfa8      	it	ge
 8004982:	4653      	movge	r3, sl
 8004984:	2b00      	cmp	r3, #0
 8004986:	4699      	mov	r9, r3
 8004988:	dc36      	bgt.n	80049f8 <_printf_float+0x360>
 800498a:	f04f 0b00 	mov.w	fp, #0
 800498e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004992:	f104 021a 	add.w	r2, r4, #26
 8004996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004998:	9306      	str	r3, [sp, #24]
 800499a:	eba3 0309 	sub.w	r3, r3, r9
 800499e:	455b      	cmp	r3, fp
 80049a0:	dc31      	bgt.n	8004a06 <_printf_float+0x36e>
 80049a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a4:	459a      	cmp	sl, r3
 80049a6:	dc3a      	bgt.n	8004a1e <_printf_float+0x386>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	07da      	lsls	r2, r3, #31
 80049ac:	d437      	bmi.n	8004a1e <_printf_float+0x386>
 80049ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b0:	ebaa 0903 	sub.w	r9, sl, r3
 80049b4:	9b06      	ldr	r3, [sp, #24]
 80049b6:	ebaa 0303 	sub.w	r3, sl, r3
 80049ba:	4599      	cmp	r9, r3
 80049bc:	bfa8      	it	ge
 80049be:	4699      	movge	r9, r3
 80049c0:	f1b9 0f00 	cmp.w	r9, #0
 80049c4:	dc33      	bgt.n	8004a2e <_printf_float+0x396>
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ce:	f104 0b1a 	add.w	fp, r4, #26
 80049d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d4:	ebaa 0303 	sub.w	r3, sl, r3
 80049d8:	eba3 0309 	sub.w	r3, r3, r9
 80049dc:	4543      	cmp	r3, r8
 80049de:	f77f af79 	ble.w	80048d4 <_printf_float+0x23c>
 80049e2:	2301      	movs	r3, #1
 80049e4:	465a      	mov	r2, fp
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f aeae 	beq.w	800474e <_printf_float+0xb6>
 80049f2:	f108 0801 	add.w	r8, r8, #1
 80049f6:	e7ec      	b.n	80049d2 <_printf_float+0x33a>
 80049f8:	4642      	mov	r2, r8
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	d1c2      	bne.n	800498a <_printf_float+0x2f2>
 8004a04:	e6a3      	b.n	800474e <_printf_float+0xb6>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	9206      	str	r2, [sp, #24]
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f ae9c 	beq.w	800474e <_printf_float+0xb6>
 8004a16:	9a06      	ldr	r2, [sp, #24]
 8004a18:	f10b 0b01 	add.w	fp, fp, #1
 8004a1c:	e7bb      	b.n	8004996 <_printf_float+0x2fe>
 8004a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d1c0      	bne.n	80049ae <_printf_float+0x316>
 8004a2c:	e68f      	b.n	800474e <_printf_float+0xb6>
 8004a2e:	9a06      	ldr	r2, [sp, #24]
 8004a30:	464b      	mov	r3, r9
 8004a32:	4442      	add	r2, r8
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d1c3      	bne.n	80049c6 <_printf_float+0x32e>
 8004a3e:	e686      	b.n	800474e <_printf_float+0xb6>
 8004a40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a44:	f1ba 0f01 	cmp.w	sl, #1
 8004a48:	dc01      	bgt.n	8004a4e <_printf_float+0x3b6>
 8004a4a:	07db      	lsls	r3, r3, #31
 8004a4c:	d536      	bpl.n	8004abc <_printf_float+0x424>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4642      	mov	r2, r8
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f ae78 	beq.w	800474e <_printf_float+0xb6>
 8004a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f ae70 	beq.w	800474e <_printf_float+0xb6>
 8004a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a72:	2200      	movs	r2, #0
 8004a74:	2300      	movs	r3, #0
 8004a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a7a:	f7fc f825 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a7e:	b9c0      	cbnz	r0, 8004ab2 <_printf_float+0x41a>
 8004a80:	4653      	mov	r3, sl
 8004a82:	f108 0201 	add.w	r2, r8, #1
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d10c      	bne.n	8004aaa <_printf_float+0x412>
 8004a90:	e65d      	b.n	800474e <_printf_float+0xb6>
 8004a92:	2301      	movs	r3, #1
 8004a94:	465a      	mov	r2, fp
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f ae56 	beq.w	800474e <_printf_float+0xb6>
 8004aa2:	f108 0801 	add.w	r8, r8, #1
 8004aa6:	45d0      	cmp	r8, sl
 8004aa8:	dbf3      	blt.n	8004a92 <_printf_float+0x3fa>
 8004aaa:	464b      	mov	r3, r9
 8004aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ab0:	e6df      	b.n	8004872 <_printf_float+0x1da>
 8004ab2:	f04f 0800 	mov.w	r8, #0
 8004ab6:	f104 0b1a 	add.w	fp, r4, #26
 8004aba:	e7f4      	b.n	8004aa6 <_printf_float+0x40e>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4642      	mov	r2, r8
 8004ac0:	e7e1      	b.n	8004a86 <_printf_float+0x3ee>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	464a      	mov	r2, r9
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f ae3e 	beq.w	800474e <_printf_float+0xb6>
 8004ad2:	f108 0801 	add.w	r8, r8, #1
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ada:	1a5b      	subs	r3, r3, r1
 8004adc:	4543      	cmp	r3, r8
 8004ade:	dcf0      	bgt.n	8004ac2 <_printf_float+0x42a>
 8004ae0:	e6fc      	b.n	80048dc <_printf_float+0x244>
 8004ae2:	f04f 0800 	mov.w	r8, #0
 8004ae6:	f104 0919 	add.w	r9, r4, #25
 8004aea:	e7f4      	b.n	8004ad6 <_printf_float+0x43e>

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4616      	mov	r6, r2
 8004af2:	4698      	mov	r8, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bfb8      	it	lt
 8004b00:	4613      	movlt	r3, r2
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b08:	4607      	mov	r7, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	b10a      	cbz	r2, 8004b12 <_printf_common+0x26>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	6833      	ldrmi	r3, [r6, #0]
 8004b1a:	3302      	addmi	r3, #2
 8004b1c:	6033      	strmi	r3, [r6, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	f015 0506 	ands.w	r5, r5, #6
 8004b24:	d106      	bne.n	8004b34 <_printf_common+0x48>
 8004b26:	f104 0a19 	add.w	sl, r4, #25
 8004b2a:	68e3      	ldr	r3, [r4, #12]
 8004b2c:	6832      	ldr	r2, [r6, #0]
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	42ab      	cmp	r3, r5
 8004b32:	dc26      	bgt.n	8004b82 <_printf_common+0x96>
 8004b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	3b00      	subs	r3, #0
 8004b3c:	bf18      	it	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	0692      	lsls	r2, r2, #26
 8004b42:	d42b      	bmi.n	8004b9c <_printf_common+0xb0>
 8004b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b48:	4641      	mov	r1, r8
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c8      	blx	r9
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d01e      	beq.n	8004b90 <_printf_common+0xa4>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	bf02      	ittt	eq
 8004b5e:	68e5      	ldreq	r5, [r4, #12]
 8004b60:	6833      	ldreq	r3, [r6, #0]
 8004b62:	1aed      	subeq	r5, r5, r3
 8004b64:	68a3      	ldr	r3, [r4, #8]
 8004b66:	bf0c      	ite	eq
 8004b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b6c:	2500      	movne	r5, #0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bfc4      	itt	gt
 8004b72:	1a9b      	subgt	r3, r3, r2
 8004b74:	18ed      	addgt	r5, r5, r3
 8004b76:	2600      	movs	r6, #0
 8004b78:	341a      	adds	r4, #26
 8004b7a:	42b5      	cmp	r5, r6
 8004b7c:	d11a      	bne.n	8004bb4 <_printf_common+0xc8>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e008      	b.n	8004b94 <_printf_common+0xa8>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4652      	mov	r2, sl
 8004b86:	4641      	mov	r1, r8
 8004b88:	4638      	mov	r0, r7
 8004b8a:	47c8      	blx	r9
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_printf_common+0xac>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	3501      	adds	r5, #1
 8004b9a:	e7c6      	b.n	8004b2a <_printf_common+0x3e>
 8004b9c:	18e1      	adds	r1, r4, r3
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	2030      	movs	r0, #48	@ 0x30
 8004ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ba6:	4422      	add	r2, r4
 8004ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	e7c7      	b.n	8004b44 <_printf_common+0x58>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4641      	mov	r1, r8
 8004bba:	4638      	mov	r0, r7
 8004bbc:	47c8      	blx	r9
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d0e6      	beq.n	8004b90 <_printf_common+0xa4>
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7d9      	b.n	8004b7a <_printf_common+0x8e>
	...

08004bc8 <_printf_i>:
 8004bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	7e0f      	ldrb	r7, [r1, #24]
 8004bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bd0:	2f78      	cmp	r7, #120	@ 0x78
 8004bd2:	4691      	mov	r9, r2
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	469a      	mov	sl, r3
 8004bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bde:	d807      	bhi.n	8004bf0 <_printf_i+0x28>
 8004be0:	2f62      	cmp	r7, #98	@ 0x62
 8004be2:	d80a      	bhi.n	8004bfa <_printf_i+0x32>
 8004be4:	2f00      	cmp	r7, #0
 8004be6:	f000 80d2 	beq.w	8004d8e <_printf_i+0x1c6>
 8004bea:	2f58      	cmp	r7, #88	@ 0x58
 8004bec:	f000 80b9 	beq.w	8004d62 <_printf_i+0x19a>
 8004bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bf8:	e03a      	b.n	8004c70 <_printf_i+0xa8>
 8004bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bfe:	2b15      	cmp	r3, #21
 8004c00:	d8f6      	bhi.n	8004bf0 <_printf_i+0x28>
 8004c02:	a101      	add	r1, pc, #4	@ (adr r1, 8004c08 <_printf_i+0x40>)
 8004c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c75 	.word	0x08004c75
 8004c10:	08004bf1 	.word	0x08004bf1
 8004c14:	08004bf1 	.word	0x08004bf1
 8004c18:	08004bf1 	.word	0x08004bf1
 8004c1c:	08004bf1 	.word	0x08004bf1
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004bf1 	.word	0x08004bf1
 8004c28:	08004bf1 	.word	0x08004bf1
 8004c2c:	08004bf1 	.word	0x08004bf1
 8004c30:	08004bf1 	.word	0x08004bf1
 8004c34:	08004d75 	.word	0x08004d75
 8004c38:	08004c9f 	.word	0x08004c9f
 8004c3c:	08004d2f 	.word	0x08004d2f
 8004c40:	08004bf1 	.word	0x08004bf1
 8004c44:	08004bf1 	.word	0x08004bf1
 8004c48:	08004d97 	.word	0x08004d97
 8004c4c:	08004bf1 	.word	0x08004bf1
 8004c50:	08004c9f 	.word	0x08004c9f
 8004c54:	08004bf1 	.word	0x08004bf1
 8004c58:	08004bf1 	.word	0x08004bf1
 8004c5c:	08004d37 	.word	0x08004d37
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6032      	str	r2, [r6, #0]
 8004c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c70:	2301      	movs	r3, #1
 8004c72:	e09d      	b.n	8004db0 <_printf_i+0x1e8>
 8004c74:	6833      	ldr	r3, [r6, #0]
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	1d19      	adds	r1, r3, #4
 8004c7a:	6031      	str	r1, [r6, #0]
 8004c7c:	0606      	lsls	r6, r0, #24
 8004c7e:	d501      	bpl.n	8004c84 <_printf_i+0xbc>
 8004c80:	681d      	ldr	r5, [r3, #0]
 8004c82:	e003      	b.n	8004c8c <_printf_i+0xc4>
 8004c84:	0645      	lsls	r5, r0, #25
 8004c86:	d5fb      	bpl.n	8004c80 <_printf_i+0xb8>
 8004c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	da03      	bge.n	8004c98 <_printf_i+0xd0>
 8004c90:	232d      	movs	r3, #45	@ 0x2d
 8004c92:	426d      	negs	r5, r5
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c98:	4859      	ldr	r0, [pc, #356]	@ (8004e00 <_printf_i+0x238>)
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	e011      	b.n	8004cc2 <_printf_i+0xfa>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	0608      	lsls	r0, r1, #24
 8004ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ca8:	d402      	bmi.n	8004cb0 <_printf_i+0xe8>
 8004caa:	0649      	lsls	r1, r1, #25
 8004cac:	bf48      	it	mi
 8004cae:	b2ad      	uxthmi	r5, r5
 8004cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cb2:	4853      	ldr	r0, [pc, #332]	@ (8004e00 <_printf_i+0x238>)
 8004cb4:	6033      	str	r3, [r6, #0]
 8004cb6:	bf14      	ite	ne
 8004cb8:	230a      	movne	r3, #10
 8004cba:	2308      	moveq	r3, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cc2:	6866      	ldr	r6, [r4, #4]
 8004cc4:	60a6      	str	r6, [r4, #8]
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	bfa2      	ittt	ge
 8004cca:	6821      	ldrge	r1, [r4, #0]
 8004ccc:	f021 0104 	bicge.w	r1, r1, #4
 8004cd0:	6021      	strge	r1, [r4, #0]
 8004cd2:	b90d      	cbnz	r5, 8004cd8 <_printf_i+0x110>
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d04b      	beq.n	8004d70 <_printf_i+0x1a8>
 8004cd8:	4616      	mov	r6, r2
 8004cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cde:	fb03 5711 	mls	r7, r3, r1, r5
 8004ce2:	5dc7      	ldrb	r7, [r0, r7]
 8004ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ce8:	462f      	mov	r7, r5
 8004cea:	42bb      	cmp	r3, r7
 8004cec:	460d      	mov	r5, r1
 8004cee:	d9f4      	bls.n	8004cda <_printf_i+0x112>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d10b      	bne.n	8004d0c <_printf_i+0x144>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	07df      	lsls	r7, r3, #31
 8004cf8:	d508      	bpl.n	8004d0c <_printf_i+0x144>
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	6861      	ldr	r1, [r4, #4]
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	bfde      	ittt	le
 8004d02:	2330      	movle	r3, #48	@ 0x30
 8004d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d0c:	1b92      	subs	r2, r2, r6
 8004d0e:	6122      	str	r2, [r4, #16]
 8004d10:	f8cd a000 	str.w	sl, [sp]
 8004d14:	464b      	mov	r3, r9
 8004d16:	aa03      	add	r2, sp, #12
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	f7ff fee6 	bl	8004aec <_printf_common>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d14a      	bne.n	8004dba <_printf_i+0x1f2>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	b004      	add	sp, #16
 8004d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	f043 0320 	orr.w	r3, r3, #32
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	4833      	ldr	r0, [pc, #204]	@ (8004e04 <_printf_i+0x23c>)
 8004d38:	2778      	movs	r7, #120	@ 0x78
 8004d3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	6831      	ldr	r1, [r6, #0]
 8004d42:	061f      	lsls	r7, r3, #24
 8004d44:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d48:	d402      	bmi.n	8004d50 <_printf_i+0x188>
 8004d4a:	065f      	lsls	r7, r3, #25
 8004d4c:	bf48      	it	mi
 8004d4e:	b2ad      	uxthmi	r5, r5
 8004d50:	6031      	str	r1, [r6, #0]
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	bf44      	itt	mi
 8004d56:	f043 0320 	orrmi.w	r3, r3, #32
 8004d5a:	6023      	strmi	r3, [r4, #0]
 8004d5c:	b11d      	cbz	r5, 8004d66 <_printf_i+0x19e>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	e7ac      	b.n	8004cbc <_printf_i+0xf4>
 8004d62:	4827      	ldr	r0, [pc, #156]	@ (8004e00 <_printf_i+0x238>)
 8004d64:	e7e9      	b.n	8004d3a <_printf_i+0x172>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f023 0320 	bic.w	r3, r3, #32
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	e7f6      	b.n	8004d5e <_printf_i+0x196>
 8004d70:	4616      	mov	r6, r2
 8004d72:	e7bd      	b.n	8004cf0 <_printf_i+0x128>
 8004d74:	6833      	ldr	r3, [r6, #0]
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	6961      	ldr	r1, [r4, #20]
 8004d7a:	1d18      	adds	r0, r3, #4
 8004d7c:	6030      	str	r0, [r6, #0]
 8004d7e:	062e      	lsls	r6, r5, #24
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	d501      	bpl.n	8004d88 <_printf_i+0x1c0>
 8004d84:	6019      	str	r1, [r3, #0]
 8004d86:	e002      	b.n	8004d8e <_printf_i+0x1c6>
 8004d88:	0668      	lsls	r0, r5, #25
 8004d8a:	d5fb      	bpl.n	8004d84 <_printf_i+0x1bc>
 8004d8c:	8019      	strh	r1, [r3, #0]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	4616      	mov	r6, r2
 8004d94:	e7bc      	b.n	8004d10 <_printf_i+0x148>
 8004d96:	6833      	ldr	r3, [r6, #0]
 8004d98:	1d1a      	adds	r2, r3, #4
 8004d9a:	6032      	str	r2, [r6, #0]
 8004d9c:	681e      	ldr	r6, [r3, #0]
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	2100      	movs	r1, #0
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7fb fa14 	bl	80001d0 <memchr>
 8004da8:	b108      	cbz	r0, 8004dae <_printf_i+0x1e6>
 8004daa:	1b80      	subs	r0, r0, r6
 8004dac:	6060      	str	r0, [r4, #4]
 8004dae:	6863      	ldr	r3, [r4, #4]
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	2300      	movs	r3, #0
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db8:	e7aa      	b.n	8004d10 <_printf_i+0x148>
 8004dba:	6923      	ldr	r3, [r4, #16]
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	47d0      	blx	sl
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d0ad      	beq.n	8004d24 <_printf_i+0x15c>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	079b      	lsls	r3, r3, #30
 8004dcc:	d413      	bmi.n	8004df6 <_printf_i+0x22e>
 8004dce:	68e0      	ldr	r0, [r4, #12]
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	4298      	cmp	r0, r3
 8004dd4:	bfb8      	it	lt
 8004dd6:	4618      	movlt	r0, r3
 8004dd8:	e7a6      	b.n	8004d28 <_printf_i+0x160>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4632      	mov	r2, r6
 8004dde:	4649      	mov	r1, r9
 8004de0:	4640      	mov	r0, r8
 8004de2:	47d0      	blx	sl
 8004de4:	3001      	adds	r0, #1
 8004de6:	d09d      	beq.n	8004d24 <_printf_i+0x15c>
 8004de8:	3501      	adds	r5, #1
 8004dea:	68e3      	ldr	r3, [r4, #12]
 8004dec:	9903      	ldr	r1, [sp, #12]
 8004dee:	1a5b      	subs	r3, r3, r1
 8004df0:	42ab      	cmp	r3, r5
 8004df2:	dcf2      	bgt.n	8004dda <_printf_i+0x212>
 8004df4:	e7eb      	b.n	8004dce <_printf_i+0x206>
 8004df6:	2500      	movs	r5, #0
 8004df8:	f104 0619 	add.w	r6, r4, #25
 8004dfc:	e7f5      	b.n	8004dea <_printf_i+0x222>
 8004dfe:	bf00      	nop
 8004e00:	0800700a 	.word	0x0800700a
 8004e04:	0800701b 	.word	0x0800701b

08004e08 <std>:
 8004e08:	2300      	movs	r3, #0
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e16:	6083      	str	r3, [r0, #8]
 8004e18:	8181      	strh	r1, [r0, #12]
 8004e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e1c:	81c2      	strh	r2, [r0, #14]
 8004e1e:	6183      	str	r3, [r0, #24]
 8004e20:	4619      	mov	r1, r3
 8004e22:	2208      	movs	r2, #8
 8004e24:	305c      	adds	r0, #92	@ 0x5c
 8004e26:	f000 f9f9 	bl	800521c <memset>
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <std+0x58>)
 8004e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <std+0x5c>)
 8004e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e32:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <std+0x60>)
 8004e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e36:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <std+0x64>)
 8004e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <std+0x68>)
 8004e3c:	6224      	str	r4, [r4, #32]
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d006      	beq.n	8004e50 <std+0x48>
 8004e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e46:	4294      	cmp	r4, r2
 8004e48:	d002      	beq.n	8004e50 <std+0x48>
 8004e4a:	33d0      	adds	r3, #208	@ 0xd0
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d105      	bne.n	8004e5c <std+0x54>
 8004e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	f000 ba5c 	b.w	8005314 <__retarget_lock_init_recursive>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	bf00      	nop
 8004e60:	0800506d 	.word	0x0800506d
 8004e64:	0800508f 	.word	0x0800508f
 8004e68:	080050c7 	.word	0x080050c7
 8004e6c:	080050eb 	.word	0x080050eb
 8004e70:	200002cc 	.word	0x200002cc

08004e74 <stdio_exit_handler>:
 8004e74:	4a02      	ldr	r2, [pc, #8]	@ (8004e80 <stdio_exit_handler+0xc>)
 8004e76:	4903      	ldr	r1, [pc, #12]	@ (8004e84 <stdio_exit_handler+0x10>)
 8004e78:	4803      	ldr	r0, [pc, #12]	@ (8004e88 <stdio_exit_handler+0x14>)
 8004e7a:	f000 b869 	b.w	8004f50 <_fwalk_sglue>
 8004e7e:	bf00      	nop
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	08006c49 	.word	0x08006c49
 8004e88:	2000001c 	.word	0x2000001c

08004e8c <cleanup_stdio>:
 8004e8c:	6841      	ldr	r1, [r0, #4]
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <cleanup_stdio+0x34>)
 8004e90:	4299      	cmp	r1, r3
 8004e92:	b510      	push	{r4, lr}
 8004e94:	4604      	mov	r4, r0
 8004e96:	d001      	beq.n	8004e9c <cleanup_stdio+0x10>
 8004e98:	f001 fed6 	bl	8006c48 <_fflush_r>
 8004e9c:	68a1      	ldr	r1, [r4, #8]
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <cleanup_stdio+0x38>)
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <cleanup_stdio+0x1e>
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f001 fecf 	bl	8006c48 <_fflush_r>
 8004eaa:	68e1      	ldr	r1, [r4, #12]
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <cleanup_stdio+0x3c>)
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	d004      	beq.n	8004ebc <cleanup_stdio+0x30>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb8:	f001 bec6 	b.w	8006c48 <_fflush_r>
 8004ebc:	bd10      	pop	{r4, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200002cc 	.word	0x200002cc
 8004ec4:	20000334 	.word	0x20000334
 8004ec8:	2000039c 	.word	0x2000039c

08004ecc <global_stdio_init.part.0>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <global_stdio_init.part.0+0x30>)
 8004ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8004f00 <global_stdio_init.part.0+0x34>)
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f04 <global_stdio_init.part.0+0x38>)
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2104      	movs	r1, #4
 8004edc:	f7ff ff94 	bl	8004e08 <std>
 8004ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2109      	movs	r1, #9
 8004ee8:	f7ff ff8e 	bl	8004e08 <std>
 8004eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef6:	2112      	movs	r1, #18
 8004ef8:	f7ff bf86 	b.w	8004e08 <std>
 8004efc:	20000404 	.word	0x20000404
 8004f00:	200002cc 	.word	0x200002cc
 8004f04:	08004e75 	.word	0x08004e75

08004f08 <__sfp_lock_acquire>:
 8004f08:	4801      	ldr	r0, [pc, #4]	@ (8004f10 <__sfp_lock_acquire+0x8>)
 8004f0a:	f000 ba04 	b.w	8005316 <__retarget_lock_acquire_recursive>
 8004f0e:	bf00      	nop
 8004f10:	2000040d 	.word	0x2000040d

08004f14 <__sfp_lock_release>:
 8004f14:	4801      	ldr	r0, [pc, #4]	@ (8004f1c <__sfp_lock_release+0x8>)
 8004f16:	f000 b9ff 	b.w	8005318 <__retarget_lock_release_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	2000040d 	.word	0x2000040d

08004f20 <__sinit>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4604      	mov	r4, r0
 8004f24:	f7ff fff0 	bl	8004f08 <__sfp_lock_acquire>
 8004f28:	6a23      	ldr	r3, [r4, #32]
 8004f2a:	b11b      	cbz	r3, 8004f34 <__sinit+0x14>
 8004f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f30:	f7ff bff0 	b.w	8004f14 <__sfp_lock_release>
 8004f34:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <__sinit+0x28>)
 8004f36:	6223      	str	r3, [r4, #32]
 8004f38:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <__sinit+0x2c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f5      	bne.n	8004f2c <__sinit+0xc>
 8004f40:	f7ff ffc4 	bl	8004ecc <global_stdio_init.part.0>
 8004f44:	e7f2      	b.n	8004f2c <__sinit+0xc>
 8004f46:	bf00      	nop
 8004f48:	08004e8d 	.word	0x08004e8d
 8004f4c:	20000404 	.word	0x20000404

08004f50 <_fwalk_sglue>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	4607      	mov	r7, r0
 8004f56:	4688      	mov	r8, r1
 8004f58:	4614      	mov	r4, r2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f60:	f1b9 0901 	subs.w	r9, r9, #1
 8004f64:	d505      	bpl.n	8004f72 <_fwalk_sglue+0x22>
 8004f66:	6824      	ldr	r4, [r4, #0]
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	d1f7      	bne.n	8004f5c <_fwalk_sglue+0xc>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f72:	89ab      	ldrh	r3, [r5, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d907      	bls.n	8004f88 <_fwalk_sglue+0x38>
 8004f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	d003      	beq.n	8004f88 <_fwalk_sglue+0x38>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c0      	blx	r8
 8004f86:	4306      	orrs	r6, r0
 8004f88:	3568      	adds	r5, #104	@ 0x68
 8004f8a:	e7e9      	b.n	8004f60 <_fwalk_sglue+0x10>

08004f8c <iprintf>:
 8004f8c:	b40f      	push	{r0, r1, r2, r3}
 8004f8e:	b507      	push	{r0, r1, r2, lr}
 8004f90:	4906      	ldr	r1, [pc, #24]	@ (8004fac <iprintf+0x20>)
 8004f92:	ab04      	add	r3, sp, #16
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f9a:	6881      	ldr	r1, [r0, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	f001 fcb7 	bl	8006910 <_vfiprintf_r>
 8004fa2:	b003      	add	sp, #12
 8004fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	20000018 	.word	0x20000018

08004fb0 <_puts_r>:
 8004fb0:	6a03      	ldr	r3, [r0, #32]
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	6884      	ldr	r4, [r0, #8]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	460e      	mov	r6, r1
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_puts_r+0x10>
 8004fbc:	f7ff ffb0 	bl	8004f20 <__sinit>
 8004fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fc2:	07db      	lsls	r3, r3, #31
 8004fc4:	d405      	bmi.n	8004fd2 <_puts_r+0x22>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	0598      	lsls	r0, r3, #22
 8004fca:	d402      	bmi.n	8004fd2 <_puts_r+0x22>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fce:	f000 f9a2 	bl	8005316 <__retarget_lock_acquire_recursive>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	0719      	lsls	r1, r3, #28
 8004fd6:	d502      	bpl.n	8004fde <_puts_r+0x2e>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d135      	bne.n	800504a <_puts_r+0x9a>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f8c5 	bl	8005170 <__swsetup_r>
 8004fe6:	b380      	cbz	r0, 800504a <_puts_r+0x9a>
 8004fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fee:	07da      	lsls	r2, r3, #31
 8004ff0:	d405      	bmi.n	8004ffe <_puts_r+0x4e>
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	059b      	lsls	r3, r3, #22
 8004ff6:	d402      	bmi.n	8004ffe <_puts_r+0x4e>
 8004ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffa:	f000 f98d 	bl	8005318 <__retarget_lock_release_recursive>
 8004ffe:	4628      	mov	r0, r5
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	2b00      	cmp	r3, #0
 8005004:	da04      	bge.n	8005010 <_puts_r+0x60>
 8005006:	69a2      	ldr	r2, [r4, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	dc17      	bgt.n	800503c <_puts_r+0x8c>
 800500c:	290a      	cmp	r1, #10
 800500e:	d015      	beq.n	800503c <_puts_r+0x8c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	7019      	strb	r1, [r3, #0]
 8005018:	68a3      	ldr	r3, [r4, #8]
 800501a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800501e:	3b01      	subs	r3, #1
 8005020:	60a3      	str	r3, [r4, #8]
 8005022:	2900      	cmp	r1, #0
 8005024:	d1ed      	bne.n	8005002 <_puts_r+0x52>
 8005026:	2b00      	cmp	r3, #0
 8005028:	da11      	bge.n	800504e <_puts_r+0x9e>
 800502a:	4622      	mov	r2, r4
 800502c:	210a      	movs	r1, #10
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f85f 	bl	80050f2 <__swbuf_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d0d7      	beq.n	8004fe8 <_puts_r+0x38>
 8005038:	250a      	movs	r5, #10
 800503a:	e7d7      	b.n	8004fec <_puts_r+0x3c>
 800503c:	4622      	mov	r2, r4
 800503e:	4628      	mov	r0, r5
 8005040:	f000 f857 	bl	80050f2 <__swbuf_r>
 8005044:	3001      	adds	r0, #1
 8005046:	d1e7      	bne.n	8005018 <_puts_r+0x68>
 8005048:	e7ce      	b.n	8004fe8 <_puts_r+0x38>
 800504a:	3e01      	subs	r6, #1
 800504c:	e7e4      	b.n	8005018 <_puts_r+0x68>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	220a      	movs	r2, #10
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e7ee      	b.n	8005038 <_puts_r+0x88>
	...

0800505c <puts>:
 800505c:	4b02      	ldr	r3, [pc, #8]	@ (8005068 <puts+0xc>)
 800505e:	4601      	mov	r1, r0
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	f7ff bfa5 	b.w	8004fb0 <_puts_r>
 8005066:	bf00      	nop
 8005068:	20000018 	.word	0x20000018

0800506c <__sread>:
 800506c:	b510      	push	{r4, lr}
 800506e:	460c      	mov	r4, r1
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	f000 f900 	bl	8005278 <_read_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	bfab      	itete	ge
 800507c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800507e:	89a3      	ldrhlt	r3, [r4, #12]
 8005080:	181b      	addge	r3, r3, r0
 8005082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005086:	bfac      	ite	ge
 8005088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800508a:	81a3      	strhlt	r3, [r4, #12]
 800508c:	bd10      	pop	{r4, pc}

0800508e <__swrite>:
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	461f      	mov	r7, r3
 8005094:	898b      	ldrh	r3, [r1, #12]
 8005096:	05db      	lsls	r3, r3, #23
 8005098:	4605      	mov	r5, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4616      	mov	r6, r2
 800509e:	d505      	bpl.n	80050ac <__swrite+0x1e>
 80050a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a4:	2302      	movs	r3, #2
 80050a6:	2200      	movs	r2, #0
 80050a8:	f000 f8d4 	bl	8005254 <_lseek_r>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	4632      	mov	r2, r6
 80050ba:	463b      	mov	r3, r7
 80050bc:	4628      	mov	r0, r5
 80050be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c2:	f000 b8eb 	b.w	800529c <_write_r>

080050c6 <__sseek>:
 80050c6:	b510      	push	{r4, lr}
 80050c8:	460c      	mov	r4, r1
 80050ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ce:	f000 f8c1 	bl	8005254 <_lseek_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	bf15      	itete	ne
 80050d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050e2:	81a3      	strheq	r3, [r4, #12]
 80050e4:	bf18      	it	ne
 80050e6:	81a3      	strhne	r3, [r4, #12]
 80050e8:	bd10      	pop	{r4, pc}

080050ea <__sclose>:
 80050ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ee:	f000 b8a1 	b.w	8005234 <_close_r>

080050f2 <__swbuf_r>:
 80050f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f4:	460e      	mov	r6, r1
 80050f6:	4614      	mov	r4, r2
 80050f8:	4605      	mov	r5, r0
 80050fa:	b118      	cbz	r0, 8005104 <__swbuf_r+0x12>
 80050fc:	6a03      	ldr	r3, [r0, #32]
 80050fe:	b90b      	cbnz	r3, 8005104 <__swbuf_r+0x12>
 8005100:	f7ff ff0e 	bl	8004f20 <__sinit>
 8005104:	69a3      	ldr	r3, [r4, #24]
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	071a      	lsls	r2, r3, #28
 800510c:	d501      	bpl.n	8005112 <__swbuf_r+0x20>
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	b943      	cbnz	r3, 8005124 <__swbuf_r+0x32>
 8005112:	4621      	mov	r1, r4
 8005114:	4628      	mov	r0, r5
 8005116:	f000 f82b 	bl	8005170 <__swsetup_r>
 800511a:	b118      	cbz	r0, 8005124 <__swbuf_r+0x32>
 800511c:	f04f 37ff 	mov.w	r7, #4294967295
 8005120:	4638      	mov	r0, r7
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	6922      	ldr	r2, [r4, #16]
 8005128:	1a98      	subs	r0, r3, r2
 800512a:	6963      	ldr	r3, [r4, #20]
 800512c:	b2f6      	uxtb	r6, r6
 800512e:	4283      	cmp	r3, r0
 8005130:	4637      	mov	r7, r6
 8005132:	dc05      	bgt.n	8005140 <__swbuf_r+0x4e>
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f001 fd86 	bl	8006c48 <_fflush_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	d1ed      	bne.n	800511c <__swbuf_r+0x2a>
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	3b01      	subs	r3, #1
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	6022      	str	r2, [r4, #0]
 800514c:	701e      	strb	r6, [r3, #0]
 800514e:	6962      	ldr	r2, [r4, #20]
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	429a      	cmp	r2, r3
 8005154:	d004      	beq.n	8005160 <__swbuf_r+0x6e>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d5e1      	bpl.n	8005120 <__swbuf_r+0x2e>
 800515c:	2e0a      	cmp	r6, #10
 800515e:	d1df      	bne.n	8005120 <__swbuf_r+0x2e>
 8005160:	4621      	mov	r1, r4
 8005162:	4628      	mov	r0, r5
 8005164:	f001 fd70 	bl	8006c48 <_fflush_r>
 8005168:	2800      	cmp	r0, #0
 800516a:	d0d9      	beq.n	8005120 <__swbuf_r+0x2e>
 800516c:	e7d6      	b.n	800511c <__swbuf_r+0x2a>
	...

08005170 <__swsetup_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <__swsetup_r+0xa8>)
 8005174:	4605      	mov	r5, r0
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	460c      	mov	r4, r1
 800517a:	b118      	cbz	r0, 8005184 <__swsetup_r+0x14>
 800517c:	6a03      	ldr	r3, [r0, #32]
 800517e:	b90b      	cbnz	r3, 8005184 <__swsetup_r+0x14>
 8005180:	f7ff fece 	bl	8004f20 <__sinit>
 8005184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d422      	bmi.n	80051d2 <__swsetup_r+0x62>
 800518c:	06da      	lsls	r2, r3, #27
 800518e:	d407      	bmi.n	80051a0 <__swsetup_r+0x30>
 8005190:	2209      	movs	r2, #9
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e033      	b.n	8005208 <__swsetup_r+0x98>
 80051a0:	0758      	lsls	r0, r3, #29
 80051a2:	d512      	bpl.n	80051ca <__swsetup_r+0x5a>
 80051a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051a6:	b141      	cbz	r1, 80051ba <__swsetup_r+0x4a>
 80051a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ac:	4299      	cmp	r1, r3
 80051ae:	d002      	beq.n	80051b6 <__swsetup_r+0x46>
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 ff01 	bl	8005fb8 <_free_r>
 80051b6:	2300      	movs	r3, #0
 80051b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	2300      	movs	r3, #0
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	b94b      	cbnz	r3, 80051ea <__swsetup_r+0x7a>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e0:	d003      	beq.n	80051ea <__swsetup_r+0x7a>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f001 fd7d 	bl	8006ce4 <__smakebuf_r>
 80051ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ee:	f013 0201 	ands.w	r2, r3, #1
 80051f2:	d00a      	beq.n	800520a <__swsetup_r+0x9a>
 80051f4:	2200      	movs	r2, #0
 80051f6:	60a2      	str	r2, [r4, #8]
 80051f8:	6962      	ldr	r2, [r4, #20]
 80051fa:	4252      	negs	r2, r2
 80051fc:	61a2      	str	r2, [r4, #24]
 80051fe:	6922      	ldr	r2, [r4, #16]
 8005200:	b942      	cbnz	r2, 8005214 <__swsetup_r+0xa4>
 8005202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005206:	d1c5      	bne.n	8005194 <__swsetup_r+0x24>
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	0799      	lsls	r1, r3, #30
 800520c:	bf58      	it	pl
 800520e:	6962      	ldrpl	r2, [r4, #20]
 8005210:	60a2      	str	r2, [r4, #8]
 8005212:	e7f4      	b.n	80051fe <__swsetup_r+0x8e>
 8005214:	2000      	movs	r0, #0
 8005216:	e7f7      	b.n	8005208 <__swsetup_r+0x98>
 8005218:	20000018 	.word	0x20000018

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <_localeconv_r>:
 800522c:	4800      	ldr	r0, [pc, #0]	@ (8005230 <_localeconv_r+0x4>)
 800522e:	4770      	bx	lr
 8005230:	20000158 	.word	0x20000158

08005234 <_close_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d06      	ldr	r5, [pc, #24]	@ (8005250 <_close_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f7fc f8bd 	bl	80013be <_close>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_close_r+0x1a>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_close_r+0x1a>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	20000408 	.word	0x20000408

08005254 <_lseek_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d07      	ldr	r5, [pc, #28]	@ (8005274 <_lseek_r+0x20>)
 8005258:	4604      	mov	r4, r0
 800525a:	4608      	mov	r0, r1
 800525c:	4611      	mov	r1, r2
 800525e:	2200      	movs	r2, #0
 8005260:	602a      	str	r2, [r5, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f7fc f8d2 	bl	800140c <_lseek>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_lseek_r+0x1e>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_lseek_r+0x1e>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	20000408 	.word	0x20000408

08005278 <_read_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4d07      	ldr	r5, [pc, #28]	@ (8005298 <_read_r+0x20>)
 800527c:	4604      	mov	r4, r0
 800527e:	4608      	mov	r0, r1
 8005280:	4611      	mov	r1, r2
 8005282:	2200      	movs	r2, #0
 8005284:	602a      	str	r2, [r5, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	f7fc f860 	bl	800134c <_read>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_read_r+0x1e>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_read_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	20000408 	.word	0x20000408

0800529c <_write_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4d07      	ldr	r5, [pc, #28]	@ (80052bc <_write_r+0x20>)
 80052a0:	4604      	mov	r4, r0
 80052a2:	4608      	mov	r0, r1
 80052a4:	4611      	mov	r1, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	602a      	str	r2, [r5, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fc f86b 	bl	8001386 <_write>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_write_r+0x1e>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_write_r+0x1e>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20000408 	.word	0x20000408

080052c0 <__errno>:
 80052c0:	4b01      	ldr	r3, [pc, #4]	@ (80052c8 <__errno+0x8>)
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000018 	.word	0x20000018

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005304 <__libc_init_array+0x38>)
 80052d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005308 <__libc_init_array+0x3c>)
 80052d2:	1b64      	subs	r4, r4, r5
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	2600      	movs	r6, #0
 80052d8:	42a6      	cmp	r6, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	4d0b      	ldr	r5, [pc, #44]	@ (800530c <__libc_init_array+0x40>)
 80052de:	4c0c      	ldr	r4, [pc, #48]	@ (8005310 <__libc_init_array+0x44>)
 80052e0:	f001 fe2c 	bl	8006f3c <_init>
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	2600      	movs	r6, #0
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f4:	4798      	blx	r3
 80052f6:	3601      	adds	r6, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fe:	4798      	blx	r3
 8005300:	3601      	adds	r6, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	08007370 	.word	0x08007370
 8005308:	08007370 	.word	0x08007370
 800530c:	08007370 	.word	0x08007370
 8005310:	08007374 	.word	0x08007374

08005314 <__retarget_lock_init_recursive>:
 8005314:	4770      	bx	lr

08005316 <__retarget_lock_acquire_recursive>:
 8005316:	4770      	bx	lr

08005318 <__retarget_lock_release_recursive>:
 8005318:	4770      	bx	lr

0800531a <quorem>:
 800531a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531e:	6903      	ldr	r3, [r0, #16]
 8005320:	690c      	ldr	r4, [r1, #16]
 8005322:	42a3      	cmp	r3, r4
 8005324:	4607      	mov	r7, r0
 8005326:	db7e      	blt.n	8005426 <quorem+0x10c>
 8005328:	3c01      	subs	r4, #1
 800532a:	f101 0814 	add.w	r8, r1, #20
 800532e:	00a3      	lsls	r3, r4, #2
 8005330:	f100 0514 	add.w	r5, r0, #20
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005344:	3301      	adds	r3, #1
 8005346:	429a      	cmp	r2, r3
 8005348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800534c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005350:	d32e      	bcc.n	80053b0 <quorem+0x96>
 8005352:	f04f 0a00 	mov.w	sl, #0
 8005356:	46c4      	mov	ip, r8
 8005358:	46ae      	mov	lr, r5
 800535a:	46d3      	mov	fp, sl
 800535c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005360:	b298      	uxth	r0, r3
 8005362:	fb06 a000 	mla	r0, r6, r0, sl
 8005366:	0c02      	lsrs	r2, r0, #16
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	fb06 2303 	mla	r3, r6, r3, r2
 800536e:	f8de 2000 	ldr.w	r2, [lr]
 8005372:	b280      	uxth	r0, r0
 8005374:	b292      	uxth	r2, r2
 8005376:	1a12      	subs	r2, r2, r0
 8005378:	445a      	add	r2, fp
 800537a:	f8de 0000 	ldr.w	r0, [lr]
 800537e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005382:	b29b      	uxth	r3, r3
 8005384:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005388:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800538c:	b292      	uxth	r2, r2
 800538e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005392:	45e1      	cmp	r9, ip
 8005394:	f84e 2b04 	str.w	r2, [lr], #4
 8005398:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800539c:	d2de      	bcs.n	800535c <quorem+0x42>
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	58eb      	ldr	r3, [r5, r3]
 80053a2:	b92b      	cbnz	r3, 80053b0 <quorem+0x96>
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	429d      	cmp	r5, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	d32f      	bcc.n	800540e <quorem+0xf4>
 80053ae:	613c      	str	r4, [r7, #16]
 80053b0:	4638      	mov	r0, r7
 80053b2:	f001 f97b 	bl	80066ac <__mcmp>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	db25      	blt.n	8005406 <quorem+0xec>
 80053ba:	4629      	mov	r1, r5
 80053bc:	2000      	movs	r0, #0
 80053be:	f858 2b04 	ldr.w	r2, [r8], #4
 80053c2:	f8d1 c000 	ldr.w	ip, [r1]
 80053c6:	fa1f fe82 	uxth.w	lr, r2
 80053ca:	fa1f f38c 	uxth.w	r3, ip
 80053ce:	eba3 030e 	sub.w	r3, r3, lr
 80053d2:	4403      	add	r3, r0
 80053d4:	0c12      	lsrs	r2, r2, #16
 80053d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e4:	45c1      	cmp	r9, r8
 80053e6:	f841 3b04 	str.w	r3, [r1], #4
 80053ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053ee:	d2e6      	bcs.n	80053be <quorem+0xa4>
 80053f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053f8:	b922      	cbnz	r2, 8005404 <quorem+0xea>
 80053fa:	3b04      	subs	r3, #4
 80053fc:	429d      	cmp	r5, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	d30b      	bcc.n	800541a <quorem+0x100>
 8005402:	613c      	str	r4, [r7, #16]
 8005404:	3601      	adds	r6, #1
 8005406:	4630      	mov	r0, r6
 8005408:	b003      	add	sp, #12
 800540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	3b04      	subs	r3, #4
 8005412:	2a00      	cmp	r2, #0
 8005414:	d1cb      	bne.n	80053ae <quorem+0x94>
 8005416:	3c01      	subs	r4, #1
 8005418:	e7c6      	b.n	80053a8 <quorem+0x8e>
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	3b04      	subs	r3, #4
 800541e:	2a00      	cmp	r2, #0
 8005420:	d1ef      	bne.n	8005402 <quorem+0xe8>
 8005422:	3c01      	subs	r4, #1
 8005424:	e7ea      	b.n	80053fc <quorem+0xe2>
 8005426:	2000      	movs	r0, #0
 8005428:	e7ee      	b.n	8005408 <quorem+0xee>
 800542a:	0000      	movs	r0, r0
 800542c:	0000      	movs	r0, r0
	...

08005430 <_dtoa_r>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	69c7      	ldr	r7, [r0, #28]
 8005436:	b099      	sub	sp, #100	@ 0x64
 8005438:	ed8d 0b02 	vstr	d0, [sp, #8]
 800543c:	ec55 4b10 	vmov	r4, r5, d0
 8005440:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005442:	9109      	str	r1, [sp, #36]	@ 0x24
 8005444:	4683      	mov	fp, r0
 8005446:	920e      	str	r2, [sp, #56]	@ 0x38
 8005448:	9313      	str	r3, [sp, #76]	@ 0x4c
 800544a:	b97f      	cbnz	r7, 800546c <_dtoa_r+0x3c>
 800544c:	2010      	movs	r0, #16
 800544e:	f000 fdfd 	bl	800604c <malloc>
 8005452:	4602      	mov	r2, r0
 8005454:	f8cb 001c 	str.w	r0, [fp, #28]
 8005458:	b920      	cbnz	r0, 8005464 <_dtoa_r+0x34>
 800545a:	4ba7      	ldr	r3, [pc, #668]	@ (80056f8 <_dtoa_r+0x2c8>)
 800545c:	21ef      	movs	r1, #239	@ 0xef
 800545e:	48a7      	ldr	r0, [pc, #668]	@ (80056fc <_dtoa_r+0x2cc>)
 8005460:	f001 fcbc 	bl	8006ddc <__assert_func>
 8005464:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005468:	6007      	str	r7, [r0, #0]
 800546a:	60c7      	str	r7, [r0, #12]
 800546c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	b159      	cbz	r1, 800548c <_dtoa_r+0x5c>
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	604a      	str	r2, [r1, #4]
 8005478:	2301      	movs	r3, #1
 800547a:	4093      	lsls	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
 800547e:	4658      	mov	r0, fp
 8005480:	f000 feda 	bl	8006238 <_Bfree>
 8005484:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	1e2b      	subs	r3, r5, #0
 800548e:	bfb9      	ittee	lt
 8005490:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005494:	9303      	strlt	r3, [sp, #12]
 8005496:	2300      	movge	r3, #0
 8005498:	6033      	strge	r3, [r6, #0]
 800549a:	9f03      	ldr	r7, [sp, #12]
 800549c:	4b98      	ldr	r3, [pc, #608]	@ (8005700 <_dtoa_r+0x2d0>)
 800549e:	bfbc      	itt	lt
 80054a0:	2201      	movlt	r2, #1
 80054a2:	6032      	strlt	r2, [r6, #0]
 80054a4:	43bb      	bics	r3, r7
 80054a6:	d112      	bne.n	80054ce <_dtoa_r+0x9e>
 80054a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054b4:	4323      	orrs	r3, r4
 80054b6:	f000 854d 	beq.w	8005f54 <_dtoa_r+0xb24>
 80054ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80054bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005714 <_dtoa_r+0x2e4>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 854f 	beq.w	8005f64 <_dtoa_r+0xb34>
 80054c6:	f10a 0303 	add.w	r3, sl, #3
 80054ca:	f000 bd49 	b.w	8005f60 <_dtoa_r+0xb30>
 80054ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	ec51 0b17 	vmov	r0, r1, d7
 80054d8:	2300      	movs	r3, #0
 80054da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80054de:	f7fb faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e2:	4680      	mov	r8, r0
 80054e4:	b158      	cbz	r0, 80054fe <_dtoa_r+0xce>
 80054e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054e8:	2301      	movs	r3, #1
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80054ee:	b113      	cbz	r3, 80054f6 <_dtoa_r+0xc6>
 80054f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80054f2:	4b84      	ldr	r3, [pc, #528]	@ (8005704 <_dtoa_r+0x2d4>)
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005718 <_dtoa_r+0x2e8>
 80054fa:	f000 bd33 	b.w	8005f64 <_dtoa_r+0xb34>
 80054fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005502:	aa16      	add	r2, sp, #88	@ 0x58
 8005504:	a917      	add	r1, sp, #92	@ 0x5c
 8005506:	4658      	mov	r0, fp
 8005508:	f001 f980 	bl	800680c <__d2b>
 800550c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005510:	4681      	mov	r9, r0
 8005512:	2e00      	cmp	r6, #0
 8005514:	d077      	beq.n	8005606 <_dtoa_r+0x1d6>
 8005516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005518:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800551c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005524:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005528:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800552c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005530:	4619      	mov	r1, r3
 8005532:	2200      	movs	r2, #0
 8005534:	4b74      	ldr	r3, [pc, #464]	@ (8005708 <_dtoa_r+0x2d8>)
 8005536:	f7fa fea7 	bl	8000288 <__aeabi_dsub>
 800553a:	a369      	add	r3, pc, #420	@ (adr r3, 80056e0 <_dtoa_r+0x2b0>)
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fb f85a 	bl	80005f8 <__aeabi_dmul>
 8005544:	a368      	add	r3, pc, #416	@ (adr r3, 80056e8 <_dtoa_r+0x2b8>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa fe9f 	bl	800028c <__adddf3>
 800554e:	4604      	mov	r4, r0
 8005550:	4630      	mov	r0, r6
 8005552:	460d      	mov	r5, r1
 8005554:	f7fa ffe6 	bl	8000524 <__aeabi_i2d>
 8005558:	a365      	add	r3, pc, #404	@ (adr r3, 80056f0 <_dtoa_r+0x2c0>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fb f84b 	bl	80005f8 <__aeabi_dmul>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fa fe8f 	bl	800028c <__adddf3>
 800556e:	4604      	mov	r4, r0
 8005570:	460d      	mov	r5, r1
 8005572:	f7fb faf1 	bl	8000b58 <__aeabi_d2iz>
 8005576:	2200      	movs	r2, #0
 8005578:	4607      	mov	r7, r0
 800557a:	2300      	movs	r3, #0
 800557c:	4620      	mov	r0, r4
 800557e:	4629      	mov	r1, r5
 8005580:	f7fb faac 	bl	8000adc <__aeabi_dcmplt>
 8005584:	b140      	cbz	r0, 8005598 <_dtoa_r+0x168>
 8005586:	4638      	mov	r0, r7
 8005588:	f7fa ffcc 	bl	8000524 <__aeabi_i2d>
 800558c:	4622      	mov	r2, r4
 800558e:	462b      	mov	r3, r5
 8005590:	f7fb fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005594:	b900      	cbnz	r0, 8005598 <_dtoa_r+0x168>
 8005596:	3f01      	subs	r7, #1
 8005598:	2f16      	cmp	r7, #22
 800559a:	d851      	bhi.n	8005640 <_dtoa_r+0x210>
 800559c:	4b5b      	ldr	r3, [pc, #364]	@ (800570c <_dtoa_r+0x2dc>)
 800559e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055aa:	f7fb fa97 	bl	8000adc <__aeabi_dcmplt>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d048      	beq.n	8005644 <_dtoa_r+0x214>
 80055b2:	3f01      	subs	r7, #1
 80055b4:	2300      	movs	r3, #0
 80055b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80055b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055ba:	1b9b      	subs	r3, r3, r6
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	bf44      	itt	mi
 80055c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80055c4:	2300      	movmi	r3, #0
 80055c6:	9208      	str	r2, [sp, #32]
 80055c8:	bf54      	ite	pl
 80055ca:	f04f 0800 	movpl.w	r8, #0
 80055ce:	9308      	strmi	r3, [sp, #32]
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	db39      	blt.n	8005648 <_dtoa_r+0x218>
 80055d4:	9b08      	ldr	r3, [sp, #32]
 80055d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80055d8:	443b      	add	r3, r7
 80055da:	9308      	str	r3, [sp, #32]
 80055dc:	2300      	movs	r3, #0
 80055de:	930a      	str	r3, [sp, #40]	@ 0x28
 80055e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d864      	bhi.n	80056b0 <_dtoa_r+0x280>
 80055e6:	2b05      	cmp	r3, #5
 80055e8:	bfc4      	itt	gt
 80055ea:	3b04      	subgt	r3, #4
 80055ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80055ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f0:	f1a3 0302 	sub.w	r3, r3, #2
 80055f4:	bfcc      	ite	gt
 80055f6:	2400      	movgt	r4, #0
 80055f8:	2401      	movle	r4, #1
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d863      	bhi.n	80056c6 <_dtoa_r+0x296>
 80055fe:	e8df f003 	tbb	[pc, r3]
 8005602:	372a      	.short	0x372a
 8005604:	5535      	.short	0x5535
 8005606:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800560a:	441e      	add	r6, r3
 800560c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005610:	2b20      	cmp	r3, #32
 8005612:	bfc1      	itttt	gt
 8005614:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005618:	409f      	lslgt	r7, r3
 800561a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800561e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005622:	bfd6      	itet	le
 8005624:	f1c3 0320 	rsble	r3, r3, #32
 8005628:	ea47 0003 	orrgt.w	r0, r7, r3
 800562c:	fa04 f003 	lslle.w	r0, r4, r3
 8005630:	f7fa ff68 	bl	8000504 <__aeabi_ui2d>
 8005634:	2201      	movs	r2, #1
 8005636:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800563a:	3e01      	subs	r6, #1
 800563c:	9214      	str	r2, [sp, #80]	@ 0x50
 800563e:	e777      	b.n	8005530 <_dtoa_r+0x100>
 8005640:	2301      	movs	r3, #1
 8005642:	e7b8      	b.n	80055b6 <_dtoa_r+0x186>
 8005644:	9012      	str	r0, [sp, #72]	@ 0x48
 8005646:	e7b7      	b.n	80055b8 <_dtoa_r+0x188>
 8005648:	427b      	negs	r3, r7
 800564a:	930a      	str	r3, [sp, #40]	@ 0x28
 800564c:	2300      	movs	r3, #0
 800564e:	eba8 0807 	sub.w	r8, r8, r7
 8005652:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005654:	e7c4      	b.n	80055e0 <_dtoa_r+0x1b0>
 8005656:	2300      	movs	r3, #0
 8005658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800565a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	dc35      	bgt.n	80056cc <_dtoa_r+0x29c>
 8005660:	2301      	movs	r3, #1
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	9307      	str	r3, [sp, #28]
 8005666:	461a      	mov	r2, r3
 8005668:	920e      	str	r2, [sp, #56]	@ 0x38
 800566a:	e00b      	b.n	8005684 <_dtoa_r+0x254>
 800566c:	2301      	movs	r3, #1
 800566e:	e7f3      	b.n	8005658 <_dtoa_r+0x228>
 8005670:	2300      	movs	r3, #0
 8005672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	bfb8      	it	lt
 8005682:	2301      	movlt	r3, #1
 8005684:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005688:	2100      	movs	r1, #0
 800568a:	2204      	movs	r2, #4
 800568c:	f102 0514 	add.w	r5, r2, #20
 8005690:	429d      	cmp	r5, r3
 8005692:	d91f      	bls.n	80056d4 <_dtoa_r+0x2a4>
 8005694:	6041      	str	r1, [r0, #4]
 8005696:	4658      	mov	r0, fp
 8005698:	f000 fd8e 	bl	80061b8 <_Balloc>
 800569c:	4682      	mov	sl, r0
 800569e:	2800      	cmp	r0, #0
 80056a0:	d13c      	bne.n	800571c <_dtoa_r+0x2ec>
 80056a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <_dtoa_r+0x2e0>)
 80056a4:	4602      	mov	r2, r0
 80056a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80056aa:	e6d8      	b.n	800545e <_dtoa_r+0x2e>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e7e0      	b.n	8005672 <_dtoa_r+0x242>
 80056b0:	2401      	movs	r4, #1
 80056b2:	2300      	movs	r3, #0
 80056b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	9307      	str	r3, [sp, #28]
 80056c0:	2200      	movs	r2, #0
 80056c2:	2312      	movs	r3, #18
 80056c4:	e7d0      	b.n	8005668 <_dtoa_r+0x238>
 80056c6:	2301      	movs	r3, #1
 80056c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056ca:	e7f5      	b.n	80056b8 <_dtoa_r+0x288>
 80056cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	9307      	str	r3, [sp, #28]
 80056d2:	e7d7      	b.n	8005684 <_dtoa_r+0x254>
 80056d4:	3101      	adds	r1, #1
 80056d6:	0052      	lsls	r2, r2, #1
 80056d8:	e7d8      	b.n	800568c <_dtoa_r+0x25c>
 80056da:	bf00      	nop
 80056dc:	f3af 8000 	nop.w
 80056e0:	636f4361 	.word	0x636f4361
 80056e4:	3fd287a7 	.word	0x3fd287a7
 80056e8:	8b60c8b3 	.word	0x8b60c8b3
 80056ec:	3fc68a28 	.word	0x3fc68a28
 80056f0:	509f79fb 	.word	0x509f79fb
 80056f4:	3fd34413 	.word	0x3fd34413
 80056f8:	08007039 	.word	0x08007039
 80056fc:	08007050 	.word	0x08007050
 8005700:	7ff00000 	.word	0x7ff00000
 8005704:	08007009 	.word	0x08007009
 8005708:	3ff80000 	.word	0x3ff80000
 800570c:	08007148 	.word	0x08007148
 8005710:	080070a8 	.word	0x080070a8
 8005714:	08007035 	.word	0x08007035
 8005718:	08007008 	.word	0x08007008
 800571c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005720:	6018      	str	r0, [r3, #0]
 8005722:	9b07      	ldr	r3, [sp, #28]
 8005724:	2b0e      	cmp	r3, #14
 8005726:	f200 80a4 	bhi.w	8005872 <_dtoa_r+0x442>
 800572a:	2c00      	cmp	r4, #0
 800572c:	f000 80a1 	beq.w	8005872 <_dtoa_r+0x442>
 8005730:	2f00      	cmp	r7, #0
 8005732:	dd33      	ble.n	800579c <_dtoa_r+0x36c>
 8005734:	4bad      	ldr	r3, [pc, #692]	@ (80059ec <_dtoa_r+0x5bc>)
 8005736:	f007 020f 	and.w	r2, r7, #15
 800573a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800573e:	ed93 7b00 	vldr	d7, [r3]
 8005742:	05f8      	lsls	r0, r7, #23
 8005744:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005748:	ea4f 1427 	mov.w	r4, r7, asr #4
 800574c:	d516      	bpl.n	800577c <_dtoa_r+0x34c>
 800574e:	4ba8      	ldr	r3, [pc, #672]	@ (80059f0 <_dtoa_r+0x5c0>)
 8005750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005758:	f7fb f878 	bl	800084c <__aeabi_ddiv>
 800575c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005760:	f004 040f 	and.w	r4, r4, #15
 8005764:	2603      	movs	r6, #3
 8005766:	4da2      	ldr	r5, [pc, #648]	@ (80059f0 <_dtoa_r+0x5c0>)
 8005768:	b954      	cbnz	r4, 8005780 <_dtoa_r+0x350>
 800576a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005772:	f7fb f86b 	bl	800084c <__aeabi_ddiv>
 8005776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577a:	e028      	b.n	80057ce <_dtoa_r+0x39e>
 800577c:	2602      	movs	r6, #2
 800577e:	e7f2      	b.n	8005766 <_dtoa_r+0x336>
 8005780:	07e1      	lsls	r1, r4, #31
 8005782:	d508      	bpl.n	8005796 <_dtoa_r+0x366>
 8005784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800578c:	f7fa ff34 	bl	80005f8 <__aeabi_dmul>
 8005790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005794:	3601      	adds	r6, #1
 8005796:	1064      	asrs	r4, r4, #1
 8005798:	3508      	adds	r5, #8
 800579a:	e7e5      	b.n	8005768 <_dtoa_r+0x338>
 800579c:	f000 80d2 	beq.w	8005944 <_dtoa_r+0x514>
 80057a0:	427c      	negs	r4, r7
 80057a2:	4b92      	ldr	r3, [pc, #584]	@ (80059ec <_dtoa_r+0x5bc>)
 80057a4:	4d92      	ldr	r5, [pc, #584]	@ (80059f0 <_dtoa_r+0x5c0>)
 80057a6:	f004 020f 	and.w	r2, r4, #15
 80057aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057b6:	f7fa ff1f 	bl	80005f8 <__aeabi_dmul>
 80057ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057be:	1124      	asrs	r4, r4, #4
 80057c0:	2300      	movs	r3, #0
 80057c2:	2602      	movs	r6, #2
 80057c4:	2c00      	cmp	r4, #0
 80057c6:	f040 80b2 	bne.w	800592e <_dtoa_r+0x4fe>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1d3      	bne.n	8005776 <_dtoa_r+0x346>
 80057ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80057d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80b7 	beq.w	8005948 <_dtoa_r+0x518>
 80057da:	4b86      	ldr	r3, [pc, #536]	@ (80059f4 <_dtoa_r+0x5c4>)
 80057dc:	2200      	movs	r2, #0
 80057de:	4620      	mov	r0, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7fb f97b 	bl	8000adc <__aeabi_dcmplt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f000 80ae 	beq.w	8005948 <_dtoa_r+0x518>
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80aa 	beq.w	8005948 <_dtoa_r+0x518>
 80057f4:	9b00      	ldr	r3, [sp, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd37      	ble.n	800586a <_dtoa_r+0x43a>
 80057fa:	1e7b      	subs	r3, r7, #1
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	4620      	mov	r0, r4
 8005800:	4b7d      	ldr	r3, [pc, #500]	@ (80059f8 <_dtoa_r+0x5c8>)
 8005802:	2200      	movs	r2, #0
 8005804:	4629      	mov	r1, r5
 8005806:	f7fa fef7 	bl	80005f8 <__aeabi_dmul>
 800580a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800580e:	9c00      	ldr	r4, [sp, #0]
 8005810:	3601      	adds	r6, #1
 8005812:	4630      	mov	r0, r6
 8005814:	f7fa fe86 	bl	8000524 <__aeabi_i2d>
 8005818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581c:	f7fa feec 	bl	80005f8 <__aeabi_dmul>
 8005820:	4b76      	ldr	r3, [pc, #472]	@ (80059fc <_dtoa_r+0x5cc>)
 8005822:	2200      	movs	r2, #0
 8005824:	f7fa fd32 	bl	800028c <__adddf3>
 8005828:	4605      	mov	r5, r0
 800582a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800582e:	2c00      	cmp	r4, #0
 8005830:	f040 808d 	bne.w	800594e <_dtoa_r+0x51e>
 8005834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005838:	4b71      	ldr	r3, [pc, #452]	@ (8005a00 <_dtoa_r+0x5d0>)
 800583a:	2200      	movs	r2, #0
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005848:	462a      	mov	r2, r5
 800584a:	4633      	mov	r3, r6
 800584c:	f7fb f964 	bl	8000b18 <__aeabi_dcmpgt>
 8005850:	2800      	cmp	r0, #0
 8005852:	f040 828b 	bne.w	8005d6c <_dtoa_r+0x93c>
 8005856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585a:	462a      	mov	r2, r5
 800585c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005860:	f7fb f93c 	bl	8000adc <__aeabi_dcmplt>
 8005864:	2800      	cmp	r0, #0
 8005866:	f040 8128 	bne.w	8005aba <_dtoa_r+0x68a>
 800586a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800586e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005872:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005874:	2b00      	cmp	r3, #0
 8005876:	f2c0 815a 	blt.w	8005b2e <_dtoa_r+0x6fe>
 800587a:	2f0e      	cmp	r7, #14
 800587c:	f300 8157 	bgt.w	8005b2e <_dtoa_r+0x6fe>
 8005880:	4b5a      	ldr	r3, [pc, #360]	@ (80059ec <_dtoa_r+0x5bc>)
 8005882:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005886:	ed93 7b00 	vldr	d7, [r3]
 800588a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	ed8d 7b00 	vstr	d7, [sp]
 8005892:	da03      	bge.n	800589c <_dtoa_r+0x46c>
 8005894:	9b07      	ldr	r3, [sp, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f340 8101 	ble.w	8005a9e <_dtoa_r+0x66e>
 800589c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80058a0:	4656      	mov	r6, sl
 80058a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7fa ffcf 	bl	800084c <__aeabi_ddiv>
 80058ae:	f7fb f953 	bl	8000b58 <__aeabi_d2iz>
 80058b2:	4680      	mov	r8, r0
 80058b4:	f7fa fe36 	bl	8000524 <__aeabi_i2d>
 80058b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058bc:	f7fa fe9c 	bl	80005f8 <__aeabi_dmul>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	f806 4b01 	strb.w	r4, [r6], #1
 80058d4:	9d07      	ldr	r5, [sp, #28]
 80058d6:	eba6 040a 	sub.w	r4, r6, sl
 80058da:	42a5      	cmp	r5, r4
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	f040 8117 	bne.w	8005b12 <_dtoa_r+0x6e2>
 80058e4:	f7fa fcd2 	bl	800028c <__adddf3>
 80058e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	f7fb f912 	bl	8000b18 <__aeabi_dcmpgt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f040 80f9 	bne.w	8005aec <_dtoa_r+0x6bc>
 80058fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058fe:	4620      	mov	r0, r4
 8005900:	4629      	mov	r1, r5
 8005902:	f7fb f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005906:	b118      	cbz	r0, 8005910 <_dtoa_r+0x4e0>
 8005908:	f018 0f01 	tst.w	r8, #1
 800590c:	f040 80ee 	bne.w	8005aec <_dtoa_r+0x6bc>
 8005910:	4649      	mov	r1, r9
 8005912:	4658      	mov	r0, fp
 8005914:	f000 fc90 	bl	8006238 <_Bfree>
 8005918:	2300      	movs	r3, #0
 800591a:	7033      	strb	r3, [r6, #0]
 800591c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800591e:	3701      	adds	r7, #1
 8005920:	601f      	str	r7, [r3, #0]
 8005922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 831d 	beq.w	8005f64 <_dtoa_r+0xb34>
 800592a:	601e      	str	r6, [r3, #0]
 800592c:	e31a      	b.n	8005f64 <_dtoa_r+0xb34>
 800592e:	07e2      	lsls	r2, r4, #31
 8005930:	d505      	bpl.n	800593e <_dtoa_r+0x50e>
 8005932:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005936:	f7fa fe5f 	bl	80005f8 <__aeabi_dmul>
 800593a:	3601      	adds	r6, #1
 800593c:	2301      	movs	r3, #1
 800593e:	1064      	asrs	r4, r4, #1
 8005940:	3508      	adds	r5, #8
 8005942:	e73f      	b.n	80057c4 <_dtoa_r+0x394>
 8005944:	2602      	movs	r6, #2
 8005946:	e742      	b.n	80057ce <_dtoa_r+0x39e>
 8005948:	9c07      	ldr	r4, [sp, #28]
 800594a:	9704      	str	r7, [sp, #16]
 800594c:	e761      	b.n	8005812 <_dtoa_r+0x3e2>
 800594e:	4b27      	ldr	r3, [pc, #156]	@ (80059ec <_dtoa_r+0x5bc>)
 8005950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005952:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005956:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800595a:	4454      	add	r4, sl
 800595c:	2900      	cmp	r1, #0
 800595e:	d053      	beq.n	8005a08 <_dtoa_r+0x5d8>
 8005960:	4928      	ldr	r1, [pc, #160]	@ (8005a04 <_dtoa_r+0x5d4>)
 8005962:	2000      	movs	r0, #0
 8005964:	f7fa ff72 	bl	800084c <__aeabi_ddiv>
 8005968:	4633      	mov	r3, r6
 800596a:	462a      	mov	r2, r5
 800596c:	f7fa fc8c 	bl	8000288 <__aeabi_dsub>
 8005970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005974:	4656      	mov	r6, sl
 8005976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800597a:	f7fb f8ed 	bl	8000b58 <__aeabi_d2iz>
 800597e:	4605      	mov	r5, r0
 8005980:	f7fa fdd0 	bl	8000524 <__aeabi_i2d>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800598c:	f7fa fc7c 	bl	8000288 <__aeabi_dsub>
 8005990:	3530      	adds	r5, #48	@ 0x30
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800599a:	f806 5b01 	strb.w	r5, [r6], #1
 800599e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059a2:	f7fb f89b 	bl	8000adc <__aeabi_dcmplt>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d171      	bne.n	8005a8e <_dtoa_r+0x65e>
 80059aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ae:	4911      	ldr	r1, [pc, #68]	@ (80059f4 <_dtoa_r+0x5c4>)
 80059b0:	2000      	movs	r0, #0
 80059b2:	f7fa fc69 	bl	8000288 <__aeabi_dsub>
 80059b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059ba:	f7fb f88f 	bl	8000adc <__aeabi_dcmplt>
 80059be:	2800      	cmp	r0, #0
 80059c0:	f040 8095 	bne.w	8005aee <_dtoa_r+0x6be>
 80059c4:	42a6      	cmp	r6, r4
 80059c6:	f43f af50 	beq.w	800586a <_dtoa_r+0x43a>
 80059ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059ce:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <_dtoa_r+0x5c8>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	f7fa fe11 	bl	80005f8 <__aeabi_dmul>
 80059d6:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <_dtoa_r+0x5c8>)
 80059d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059dc:	2200      	movs	r2, #0
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	f7fa fe09 	bl	80005f8 <__aeabi_dmul>
 80059e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ea:	e7c4      	b.n	8005976 <_dtoa_r+0x546>
 80059ec:	08007148 	.word	0x08007148
 80059f0:	08007120 	.word	0x08007120
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	401c0000 	.word	0x401c0000
 8005a00:	40140000 	.word	0x40140000
 8005a04:	3fe00000 	.word	0x3fe00000
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f7fa fdf4 	bl	80005f8 <__aeabi_dmul>
 8005a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a14:	9415      	str	r4, [sp, #84]	@ 0x54
 8005a16:	4656      	mov	r6, sl
 8005a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a1c:	f7fb f89c 	bl	8000b58 <__aeabi_d2iz>
 8005a20:	4605      	mov	r5, r0
 8005a22:	f7fa fd7f 	bl	8000524 <__aeabi_i2d>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2e:	f7fa fc2b 	bl	8000288 <__aeabi_dsub>
 8005a32:	3530      	adds	r5, #48	@ 0x30
 8005a34:	f806 5b01 	strb.w	r5, [r6], #1
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	d124      	bne.n	8005a92 <_dtoa_r+0x662>
 8005a48:	4bac      	ldr	r3, [pc, #688]	@ (8005cfc <_dtoa_r+0x8cc>)
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a5a:	f7fb f85d 	bl	8000b18 <__aeabi_dcmpgt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d145      	bne.n	8005aee <_dtoa_r+0x6be>
 8005a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a66:	49a5      	ldr	r1, [pc, #660]	@ (8005cfc <_dtoa_r+0x8cc>)
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f7fa fc0d 	bl	8000288 <__aeabi_dsub>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a76:	f7fb f831 	bl	8000adc <__aeabi_dcmplt>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f43f aef5 	beq.w	800586a <_dtoa_r+0x43a>
 8005a80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005a82:	1e73      	subs	r3, r6, #1
 8005a84:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a8a:	2b30      	cmp	r3, #48	@ 0x30
 8005a8c:	d0f8      	beq.n	8005a80 <_dtoa_r+0x650>
 8005a8e:	9f04      	ldr	r7, [sp, #16]
 8005a90:	e73e      	b.n	8005910 <_dtoa_r+0x4e0>
 8005a92:	4b9b      	ldr	r3, [pc, #620]	@ (8005d00 <_dtoa_r+0x8d0>)
 8005a94:	f7fa fdb0 	bl	80005f8 <__aeabi_dmul>
 8005a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a9c:	e7bc      	b.n	8005a18 <_dtoa_r+0x5e8>
 8005a9e:	d10c      	bne.n	8005aba <_dtoa_r+0x68a>
 8005aa0:	4b98      	ldr	r3, [pc, #608]	@ (8005d04 <_dtoa_r+0x8d4>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aa8:	f7fa fda6 	bl	80005f8 <__aeabi_dmul>
 8005aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ab0:	f7fb f828 	bl	8000b04 <__aeabi_dcmpge>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f000 8157 	beq.w	8005d68 <_dtoa_r+0x938>
 8005aba:	2400      	movs	r4, #0
 8005abc:	4625      	mov	r5, r4
 8005abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	4656      	mov	r6, sl
 8005ac6:	2700      	movs	r7, #0
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4658      	mov	r0, fp
 8005acc:	f000 fbb4 	bl	8006238 <_Bfree>
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	d0dc      	beq.n	8005a8e <_dtoa_r+0x65e>
 8005ad4:	b12f      	cbz	r7, 8005ae2 <_dtoa_r+0x6b2>
 8005ad6:	42af      	cmp	r7, r5
 8005ad8:	d003      	beq.n	8005ae2 <_dtoa_r+0x6b2>
 8005ada:	4639      	mov	r1, r7
 8005adc:	4658      	mov	r0, fp
 8005ade:	f000 fbab 	bl	8006238 <_Bfree>
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	4658      	mov	r0, fp
 8005ae6:	f000 fba7 	bl	8006238 <_Bfree>
 8005aea:	e7d0      	b.n	8005a8e <_dtoa_r+0x65e>
 8005aec:	9704      	str	r7, [sp, #16]
 8005aee:	4633      	mov	r3, r6
 8005af0:	461e      	mov	r6, r3
 8005af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af6:	2a39      	cmp	r2, #57	@ 0x39
 8005af8:	d107      	bne.n	8005b0a <_dtoa_r+0x6da>
 8005afa:	459a      	cmp	sl, r3
 8005afc:	d1f8      	bne.n	8005af0 <_dtoa_r+0x6c0>
 8005afe:	9a04      	ldr	r2, [sp, #16]
 8005b00:	3201      	adds	r2, #1
 8005b02:	9204      	str	r2, [sp, #16]
 8005b04:	2230      	movs	r2, #48	@ 0x30
 8005b06:	f88a 2000 	strb.w	r2, [sl]
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e7bd      	b.n	8005a8e <_dtoa_r+0x65e>
 8005b12:	4b7b      	ldr	r3, [pc, #492]	@ (8005d00 <_dtoa_r+0x8d0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	f7fa fd6f 	bl	80005f8 <__aeabi_dmul>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4604      	mov	r4, r0
 8005b20:	460d      	mov	r5, r1
 8005b22:	f7fa ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f43f aebb 	beq.w	80058a2 <_dtoa_r+0x472>
 8005b2c:	e6f0      	b.n	8005910 <_dtoa_r+0x4e0>
 8005b2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	f000 80db 	beq.w	8005cec <_dtoa_r+0x8bc>
 8005b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b38:	2a01      	cmp	r2, #1
 8005b3a:	f300 80bf 	bgt.w	8005cbc <_dtoa_r+0x88c>
 8005b3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005b40:	2a00      	cmp	r2, #0
 8005b42:	f000 80b7 	beq.w	8005cb4 <_dtoa_r+0x884>
 8005b46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b4c:	4646      	mov	r6, r8
 8005b4e:	9a08      	ldr	r2, [sp, #32]
 8005b50:	2101      	movs	r1, #1
 8005b52:	441a      	add	r2, r3
 8005b54:	4658      	mov	r0, fp
 8005b56:	4498      	add	r8, r3
 8005b58:	9208      	str	r2, [sp, #32]
 8005b5a:	f000 fc21 	bl	80063a0 <__i2b>
 8005b5e:	4605      	mov	r5, r0
 8005b60:	b15e      	cbz	r6, 8005b7a <_dtoa_r+0x74a>
 8005b62:	9b08      	ldr	r3, [sp, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dd08      	ble.n	8005b7a <_dtoa_r+0x74a>
 8005b68:	42b3      	cmp	r3, r6
 8005b6a:	9a08      	ldr	r2, [sp, #32]
 8005b6c:	bfa8      	it	ge
 8005b6e:	4633      	movge	r3, r6
 8005b70:	eba8 0803 	sub.w	r8, r8, r3
 8005b74:	1af6      	subs	r6, r6, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	9308      	str	r3, [sp, #32]
 8005b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b7c:	b1f3      	cbz	r3, 8005bbc <_dtoa_r+0x78c>
 8005b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80b7 	beq.w	8005cf4 <_dtoa_r+0x8c4>
 8005b86:	b18c      	cbz	r4, 8005bac <_dtoa_r+0x77c>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	f000 fcc7 	bl	8006520 <__pow5mult>
 8005b92:	464a      	mov	r2, r9
 8005b94:	4601      	mov	r1, r0
 8005b96:	4605      	mov	r5, r0
 8005b98:	4658      	mov	r0, fp
 8005b9a:	f000 fc17 	bl	80063cc <__multiply>
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	9004      	str	r0, [sp, #16]
 8005ba2:	4658      	mov	r0, fp
 8005ba4:	f000 fb48 	bl	8006238 <_Bfree>
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	4699      	mov	r9, r3
 8005bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bae:	1b1a      	subs	r2, r3, r4
 8005bb0:	d004      	beq.n	8005bbc <_dtoa_r+0x78c>
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4658      	mov	r0, fp
 8005bb6:	f000 fcb3 	bl	8006520 <__pow5mult>
 8005bba:	4681      	mov	r9, r0
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4658      	mov	r0, fp
 8005bc0:	f000 fbee 	bl	80063a0 <__i2b>
 8005bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 81cf 	beq.w	8005f6c <_dtoa_r+0xb3c>
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4601      	mov	r1, r0
 8005bd2:	4658      	mov	r0, fp
 8005bd4:	f000 fca4 	bl	8006520 <__pow5mult>
 8005bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	4604      	mov	r4, r0
 8005bde:	f300 8095 	bgt.w	8005d0c <_dtoa_r+0x8dc>
 8005be2:	9b02      	ldr	r3, [sp, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 8087 	bne.w	8005cf8 <_dtoa_r+0x8c8>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f040 8089 	bne.w	8005d08 <_dtoa_r+0x8d8>
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bfc:	0d1b      	lsrs	r3, r3, #20
 8005bfe:	051b      	lsls	r3, r3, #20
 8005c00:	b12b      	cbz	r3, 8005c0e <_dtoa_r+0x7de>
 8005c02:	9b08      	ldr	r3, [sp, #32]
 8005c04:	3301      	adds	r3, #1
 8005c06:	9308      	str	r3, [sp, #32]
 8005c08:	f108 0801 	add.w	r8, r8, #1
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 81b0 	beq.w	8005f78 <_dtoa_r+0xb48>
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c1e:	6918      	ldr	r0, [r3, #16]
 8005c20:	f000 fb72 	bl	8006308 <__hi0bits>
 8005c24:	f1c0 0020 	rsb	r0, r0, #32
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	4418      	add	r0, r3
 8005c2c:	f010 001f 	ands.w	r0, r0, #31
 8005c30:	d077      	beq.n	8005d22 <_dtoa_r+0x8f2>
 8005c32:	f1c0 0320 	rsb	r3, r0, #32
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	dd6b      	ble.n	8005d12 <_dtoa_r+0x8e2>
 8005c3a:	9b08      	ldr	r3, [sp, #32]
 8005c3c:	f1c0 001c 	rsb	r0, r0, #28
 8005c40:	4403      	add	r3, r0
 8005c42:	4480      	add	r8, r0
 8005c44:	4406      	add	r6, r0
 8005c46:	9308      	str	r3, [sp, #32]
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	dd05      	ble.n	8005c5a <_dtoa_r+0x82a>
 8005c4e:	4649      	mov	r1, r9
 8005c50:	4642      	mov	r2, r8
 8005c52:	4658      	mov	r0, fp
 8005c54:	f000 fcbe 	bl	80065d4 <__lshift>
 8005c58:	4681      	mov	r9, r0
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dd05      	ble.n	8005c6c <_dtoa_r+0x83c>
 8005c60:	4621      	mov	r1, r4
 8005c62:	461a      	mov	r2, r3
 8005c64:	4658      	mov	r0, fp
 8005c66:	f000 fcb5 	bl	80065d4 <__lshift>
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d059      	beq.n	8005d26 <_dtoa_r+0x8f6>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4648      	mov	r0, r9
 8005c76:	f000 fd19 	bl	80066ac <__mcmp>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	da53      	bge.n	8005d26 <_dtoa_r+0x8f6>
 8005c7e:	1e7b      	subs	r3, r7, #1
 8005c80:	9304      	str	r3, [sp, #16]
 8005c82:	4649      	mov	r1, r9
 8005c84:	2300      	movs	r3, #0
 8005c86:	220a      	movs	r2, #10
 8005c88:	4658      	mov	r0, fp
 8005c8a:	f000 faf7 	bl	800627c <__multadd>
 8005c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c90:	4681      	mov	r9, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8172 	beq.w	8005f7c <_dtoa_r+0xb4c>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	220a      	movs	r2, #10
 8005c9e:	4658      	mov	r0, fp
 8005ca0:	f000 faec 	bl	800627c <__multadd>
 8005ca4:	9b00      	ldr	r3, [sp, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	4605      	mov	r5, r0
 8005caa:	dc67      	bgt.n	8005d7c <_dtoa_r+0x94c>
 8005cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	dc41      	bgt.n	8005d36 <_dtoa_r+0x906>
 8005cb2:	e063      	b.n	8005d7c <_dtoa_r+0x94c>
 8005cb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005cba:	e746      	b.n	8005b4a <_dtoa_r+0x71a>
 8005cbc:	9b07      	ldr	r3, [sp, #28]
 8005cbe:	1e5c      	subs	r4, r3, #1
 8005cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	bfbf      	itttt	lt
 8005cc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005cc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005cca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ccc:	1ae3      	sublt	r3, r4, r3
 8005cce:	bfb4      	ite	lt
 8005cd0:	18d2      	addlt	r2, r2, r3
 8005cd2:	1b1c      	subge	r4, r3, r4
 8005cd4:	9b07      	ldr	r3, [sp, #28]
 8005cd6:	bfbc      	itt	lt
 8005cd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005cda:	2400      	movlt	r4, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bfb5      	itete	lt
 8005ce0:	eba8 0603 	sublt.w	r6, r8, r3
 8005ce4:	9b07      	ldrge	r3, [sp, #28]
 8005ce6:	2300      	movlt	r3, #0
 8005ce8:	4646      	movge	r6, r8
 8005cea:	e730      	b.n	8005b4e <_dtoa_r+0x71e>
 8005cec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005cee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005cf0:	4646      	mov	r6, r8
 8005cf2:	e735      	b.n	8005b60 <_dtoa_r+0x730>
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cf6:	e75c      	b.n	8005bb2 <_dtoa_r+0x782>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e788      	b.n	8005c0e <_dtoa_r+0x7de>
 8005cfc:	3fe00000 	.word	0x3fe00000
 8005d00:	40240000 	.word	0x40240000
 8005d04:	40140000 	.word	0x40140000
 8005d08:	9b02      	ldr	r3, [sp, #8]
 8005d0a:	e780      	b.n	8005c0e <_dtoa_r+0x7de>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d10:	e782      	b.n	8005c18 <_dtoa_r+0x7e8>
 8005d12:	d099      	beq.n	8005c48 <_dtoa_r+0x818>
 8005d14:	9a08      	ldr	r2, [sp, #32]
 8005d16:	331c      	adds	r3, #28
 8005d18:	441a      	add	r2, r3
 8005d1a:	4498      	add	r8, r3
 8005d1c:	441e      	add	r6, r3
 8005d1e:	9208      	str	r2, [sp, #32]
 8005d20:	e792      	b.n	8005c48 <_dtoa_r+0x818>
 8005d22:	4603      	mov	r3, r0
 8005d24:	e7f6      	b.n	8005d14 <_dtoa_r+0x8e4>
 8005d26:	9b07      	ldr	r3, [sp, #28]
 8005d28:	9704      	str	r7, [sp, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dc20      	bgt.n	8005d70 <_dtoa_r+0x940>
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	dd1e      	ble.n	8005d74 <_dtoa_r+0x944>
 8005d36:	9b00      	ldr	r3, [sp, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f47f aec0 	bne.w	8005abe <_dtoa_r+0x68e>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	2205      	movs	r2, #5
 8005d42:	4658      	mov	r0, fp
 8005d44:	f000 fa9a 	bl	800627c <__multadd>
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f000 fcad 	bl	80066ac <__mcmp>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f77f aeb3 	ble.w	8005abe <_dtoa_r+0x68e>
 8005d58:	4656      	mov	r6, sl
 8005d5a:	2331      	movs	r3, #49	@ 0x31
 8005d5c:	f806 3b01 	strb.w	r3, [r6], #1
 8005d60:	9b04      	ldr	r3, [sp, #16]
 8005d62:	3301      	adds	r3, #1
 8005d64:	9304      	str	r3, [sp, #16]
 8005d66:	e6ae      	b.n	8005ac6 <_dtoa_r+0x696>
 8005d68:	9c07      	ldr	r4, [sp, #28]
 8005d6a:	9704      	str	r7, [sp, #16]
 8005d6c:	4625      	mov	r5, r4
 8005d6e:	e7f3      	b.n	8005d58 <_dtoa_r+0x928>
 8005d70:	9b07      	ldr	r3, [sp, #28]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8104 	beq.w	8005f84 <_dtoa_r+0xb54>
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	dd05      	ble.n	8005d8c <_dtoa_r+0x95c>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4632      	mov	r2, r6
 8005d84:	4658      	mov	r0, fp
 8005d86:	f000 fc25 	bl	80065d4 <__lshift>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05a      	beq.n	8005e48 <_dtoa_r+0xa18>
 8005d92:	6869      	ldr	r1, [r5, #4]
 8005d94:	4658      	mov	r0, fp
 8005d96:	f000 fa0f 	bl	80061b8 <_Balloc>
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	b928      	cbnz	r0, 8005daa <_dtoa_r+0x97a>
 8005d9e:	4b84      	ldr	r3, [pc, #528]	@ (8005fb0 <_dtoa_r+0xb80>)
 8005da0:	4602      	mov	r2, r0
 8005da2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005da6:	f7ff bb5a 	b.w	800545e <_dtoa_r+0x2e>
 8005daa:	692a      	ldr	r2, [r5, #16]
 8005dac:	3202      	adds	r2, #2
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	f105 010c 	add.w	r1, r5, #12
 8005db4:	300c      	adds	r0, #12
 8005db6:	f001 f803 	bl	8006dc0 <memcpy>
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4658      	mov	r0, fp
 8005dc0:	f000 fc08 	bl	80065d4 <__lshift>
 8005dc4:	f10a 0301 	add.w	r3, sl, #1
 8005dc8:	9307      	str	r3, [sp, #28]
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	4453      	add	r3, sl
 8005dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	462f      	mov	r7, r5
 8005dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dda:	4605      	mov	r5, r0
 8005ddc:	9b07      	ldr	r3, [sp, #28]
 8005dde:	4621      	mov	r1, r4
 8005de0:	3b01      	subs	r3, #1
 8005de2:	4648      	mov	r0, r9
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	f7ff fa98 	bl	800531a <quorem>
 8005dea:	4639      	mov	r1, r7
 8005dec:	9002      	str	r0, [sp, #8]
 8005dee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005df2:	4648      	mov	r0, r9
 8005df4:	f000 fc5a 	bl	80066ac <__mcmp>
 8005df8:	462a      	mov	r2, r5
 8005dfa:	9008      	str	r0, [sp, #32]
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4658      	mov	r0, fp
 8005e00:	f000 fc70 	bl	80066e4 <__mdiff>
 8005e04:	68c2      	ldr	r2, [r0, #12]
 8005e06:	4606      	mov	r6, r0
 8005e08:	bb02      	cbnz	r2, 8005e4c <_dtoa_r+0xa1c>
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4648      	mov	r0, r9
 8005e0e:	f000 fc4d 	bl	80066ac <__mcmp>
 8005e12:	4602      	mov	r2, r0
 8005e14:	4631      	mov	r1, r6
 8005e16:	4658      	mov	r0, fp
 8005e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e1a:	f000 fa0d 	bl	8006238 <_Bfree>
 8005e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e22:	9e07      	ldr	r6, [sp, #28]
 8005e24:	ea43 0102 	orr.w	r1, r3, r2
 8005e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2a:	4319      	orrs	r1, r3
 8005e2c:	d110      	bne.n	8005e50 <_dtoa_r+0xa20>
 8005e2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e32:	d029      	beq.n	8005e88 <_dtoa_r+0xa58>
 8005e34:	9b08      	ldr	r3, [sp, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	dd02      	ble.n	8005e40 <_dtoa_r+0xa10>
 8005e3a:	9b02      	ldr	r3, [sp, #8]
 8005e3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005e40:	9b00      	ldr	r3, [sp, #0]
 8005e42:	f883 8000 	strb.w	r8, [r3]
 8005e46:	e63f      	b.n	8005ac8 <_dtoa_r+0x698>
 8005e48:	4628      	mov	r0, r5
 8005e4a:	e7bb      	b.n	8005dc4 <_dtoa_r+0x994>
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	e7e1      	b.n	8005e14 <_dtoa_r+0x9e4>
 8005e50:	9b08      	ldr	r3, [sp, #32]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db04      	blt.n	8005e60 <_dtoa_r+0xa30>
 8005e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	d120      	bne.n	8005ea2 <_dtoa_r+0xa72>
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	dded      	ble.n	8005e40 <_dtoa_r+0xa10>
 8005e64:	4649      	mov	r1, r9
 8005e66:	2201      	movs	r2, #1
 8005e68:	4658      	mov	r0, fp
 8005e6a:	f000 fbb3 	bl	80065d4 <__lshift>
 8005e6e:	4621      	mov	r1, r4
 8005e70:	4681      	mov	r9, r0
 8005e72:	f000 fc1b 	bl	80066ac <__mcmp>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	dc03      	bgt.n	8005e82 <_dtoa_r+0xa52>
 8005e7a:	d1e1      	bne.n	8005e40 <_dtoa_r+0xa10>
 8005e7c:	f018 0f01 	tst.w	r8, #1
 8005e80:	d0de      	beq.n	8005e40 <_dtoa_r+0xa10>
 8005e82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e86:	d1d8      	bne.n	8005e3a <_dtoa_r+0xa0a>
 8005e88:	9a00      	ldr	r2, [sp, #0]
 8005e8a:	2339      	movs	r3, #57	@ 0x39
 8005e8c:	7013      	strb	r3, [r2, #0]
 8005e8e:	4633      	mov	r3, r6
 8005e90:	461e      	mov	r6, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e98:	2a39      	cmp	r2, #57	@ 0x39
 8005e9a:	d052      	beq.n	8005f42 <_dtoa_r+0xb12>
 8005e9c:	3201      	adds	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e612      	b.n	8005ac8 <_dtoa_r+0x698>
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	dd07      	ble.n	8005eb6 <_dtoa_r+0xa86>
 8005ea6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005eaa:	d0ed      	beq.n	8005e88 <_dtoa_r+0xa58>
 8005eac:	9a00      	ldr	r2, [sp, #0]
 8005eae:	f108 0301 	add.w	r3, r8, #1
 8005eb2:	7013      	strb	r3, [r2, #0]
 8005eb4:	e608      	b.n	8005ac8 <_dtoa_r+0x698>
 8005eb6:	9b07      	ldr	r3, [sp, #28]
 8005eb8:	9a07      	ldr	r2, [sp, #28]
 8005eba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d028      	beq.n	8005f16 <_dtoa_r+0xae6>
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	220a      	movs	r2, #10
 8005eca:	4658      	mov	r0, fp
 8005ecc:	f000 f9d6 	bl	800627c <__multadd>
 8005ed0:	42af      	cmp	r7, r5
 8005ed2:	4681      	mov	r9, r0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	f04f 020a 	mov.w	r2, #10
 8005edc:	4639      	mov	r1, r7
 8005ede:	4658      	mov	r0, fp
 8005ee0:	d107      	bne.n	8005ef2 <_dtoa_r+0xac2>
 8005ee2:	f000 f9cb 	bl	800627c <__multadd>
 8005ee6:	4607      	mov	r7, r0
 8005ee8:	4605      	mov	r5, r0
 8005eea:	9b07      	ldr	r3, [sp, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	e774      	b.n	8005ddc <_dtoa_r+0x9ac>
 8005ef2:	f000 f9c3 	bl	800627c <__multadd>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4607      	mov	r7, r0
 8005efa:	2300      	movs	r3, #0
 8005efc:	220a      	movs	r2, #10
 8005efe:	4658      	mov	r0, fp
 8005f00:	f000 f9bc 	bl	800627c <__multadd>
 8005f04:	4605      	mov	r5, r0
 8005f06:	e7f0      	b.n	8005eea <_dtoa_r+0xaba>
 8005f08:	9b00      	ldr	r3, [sp, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bfcc      	ite	gt
 8005f0e:	461e      	movgt	r6, r3
 8005f10:	2601      	movle	r6, #1
 8005f12:	4456      	add	r6, sl
 8005f14:	2700      	movs	r7, #0
 8005f16:	4649      	mov	r1, r9
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4658      	mov	r0, fp
 8005f1c:	f000 fb5a 	bl	80065d4 <__lshift>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4681      	mov	r9, r0
 8005f24:	f000 fbc2 	bl	80066ac <__mcmp>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	dcb0      	bgt.n	8005e8e <_dtoa_r+0xa5e>
 8005f2c:	d102      	bne.n	8005f34 <_dtoa_r+0xb04>
 8005f2e:	f018 0f01 	tst.w	r8, #1
 8005f32:	d1ac      	bne.n	8005e8e <_dtoa_r+0xa5e>
 8005f34:	4633      	mov	r3, r6
 8005f36:	461e      	mov	r6, r3
 8005f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f3c:	2a30      	cmp	r2, #48	@ 0x30
 8005f3e:	d0fa      	beq.n	8005f36 <_dtoa_r+0xb06>
 8005f40:	e5c2      	b.n	8005ac8 <_dtoa_r+0x698>
 8005f42:	459a      	cmp	sl, r3
 8005f44:	d1a4      	bne.n	8005e90 <_dtoa_r+0xa60>
 8005f46:	9b04      	ldr	r3, [sp, #16]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	2331      	movs	r3, #49	@ 0x31
 8005f4e:	f88a 3000 	strb.w	r3, [sl]
 8005f52:	e5b9      	b.n	8005ac8 <_dtoa_r+0x698>
 8005f54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005fb4 <_dtoa_r+0xb84>
 8005f5a:	b11b      	cbz	r3, 8005f64 <_dtoa_r+0xb34>
 8005f5c:	f10a 0308 	add.w	r3, sl, #8
 8005f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	4650      	mov	r0, sl
 8005f66:	b019      	add	sp, #100	@ 0x64
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	f77f ae37 	ble.w	8005be2 <_dtoa_r+0x7b2>
 8005f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e655      	b.n	8005c28 <_dtoa_r+0x7f8>
 8005f7c:	9b00      	ldr	r3, [sp, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f77f aed6 	ble.w	8005d30 <_dtoa_r+0x900>
 8005f84:	4656      	mov	r6, sl
 8005f86:	4621      	mov	r1, r4
 8005f88:	4648      	mov	r0, r9
 8005f8a:	f7ff f9c6 	bl	800531a <quorem>
 8005f8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f92:	f806 8b01 	strb.w	r8, [r6], #1
 8005f96:	9b00      	ldr	r3, [sp, #0]
 8005f98:	eba6 020a 	sub.w	r2, r6, sl
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	ddb3      	ble.n	8005f08 <_dtoa_r+0xad8>
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	220a      	movs	r2, #10
 8005fa6:	4658      	mov	r0, fp
 8005fa8:	f000 f968 	bl	800627c <__multadd>
 8005fac:	4681      	mov	r9, r0
 8005fae:	e7ea      	b.n	8005f86 <_dtoa_r+0xb56>
 8005fb0:	080070a8 	.word	0x080070a8
 8005fb4:	0800702c 	.word	0x0800702c

08005fb8 <_free_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4605      	mov	r5, r0
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d041      	beq.n	8006044 <_free_r+0x8c>
 8005fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc4:	1f0c      	subs	r4, r1, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	18e4      	addlt	r4, r4, r3
 8005fcc:	f000 f8e8 	bl	80061a0 <__malloc_lock>
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <_free_r+0x90>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	b933      	cbnz	r3, 8005fe4 <_free_r+0x2c>
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	6014      	str	r4, [r2, #0]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe0:	f000 b8e4 	b.w	80061ac <__malloc_unlock>
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d908      	bls.n	8005ffa <_free_r+0x42>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	1821      	adds	r1, r4, r0
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf01      	itttt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	e7ed      	b.n	8005fd6 <_free_r+0x1e>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b10b      	cbz	r3, 8006004 <_free_r+0x4c>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x42>
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	1850      	adds	r0, r2, r1
 8006008:	42a0      	cmp	r0, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x6c>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	4401      	add	r1, r0
 8006010:	1850      	adds	r0, r2, r1
 8006012:	4283      	cmp	r3, r0
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	d1e0      	bne.n	8005fda <_free_r+0x22>
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	6053      	str	r3, [r2, #4]
 800601e:	4408      	add	r0, r1
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	e7da      	b.n	8005fda <_free_r+0x22>
 8006024:	d902      	bls.n	800602c <_free_r+0x74>
 8006026:	230c      	movs	r3, #12
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	e7d6      	b.n	8005fda <_free_r+0x22>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428b      	cmp	r3, r1
 8006032:	bf04      	itt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	6063      	str	r3, [r4, #4]
 800603a:	bf04      	itt	eq
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	6054      	str	r4, [r2, #4]
 8006042:	e7ca      	b.n	8005fda <_free_r+0x22>
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	20000414 	.word	0x20000414

0800604c <malloc>:
 800604c:	4b02      	ldr	r3, [pc, #8]	@ (8006058 <malloc+0xc>)
 800604e:	4601      	mov	r1, r0
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f000 b825 	b.w	80060a0 <_malloc_r>
 8006056:	bf00      	nop
 8006058:	20000018 	.word	0x20000018

0800605c <sbrk_aligned>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4e0f      	ldr	r6, [pc, #60]	@ (800609c <sbrk_aligned+0x40>)
 8006060:	460c      	mov	r4, r1
 8006062:	6831      	ldr	r1, [r6, #0]
 8006064:	4605      	mov	r5, r0
 8006066:	b911      	cbnz	r1, 800606e <sbrk_aligned+0x12>
 8006068:	f000 fe9a 	bl	8006da0 <_sbrk_r>
 800606c:	6030      	str	r0, [r6, #0]
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 fe95 	bl	8006da0 <_sbrk_r>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	d103      	bne.n	8006082 <sbrk_aligned+0x26>
 800607a:	f04f 34ff 	mov.w	r4, #4294967295
 800607e:	4620      	mov	r0, r4
 8006080:	bd70      	pop	{r4, r5, r6, pc}
 8006082:	1cc4      	adds	r4, r0, #3
 8006084:	f024 0403 	bic.w	r4, r4, #3
 8006088:	42a0      	cmp	r0, r4
 800608a:	d0f8      	beq.n	800607e <sbrk_aligned+0x22>
 800608c:	1a21      	subs	r1, r4, r0
 800608e:	4628      	mov	r0, r5
 8006090:	f000 fe86 	bl	8006da0 <_sbrk_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d1f2      	bne.n	800607e <sbrk_aligned+0x22>
 8006098:	e7ef      	b.n	800607a <sbrk_aligned+0x1e>
 800609a:	bf00      	nop
 800609c:	20000410 	.word	0x20000410

080060a0 <_malloc_r>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	1ccd      	adds	r5, r1, #3
 80060a6:	f025 0503 	bic.w	r5, r5, #3
 80060aa:	3508      	adds	r5, #8
 80060ac:	2d0c      	cmp	r5, #12
 80060ae:	bf38      	it	cc
 80060b0:	250c      	movcc	r5, #12
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	4606      	mov	r6, r0
 80060b6:	db01      	blt.n	80060bc <_malloc_r+0x1c>
 80060b8:	42a9      	cmp	r1, r5
 80060ba:	d904      	bls.n	80060c6 <_malloc_r+0x26>
 80060bc:	230c      	movs	r3, #12
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	2000      	movs	r0, #0
 80060c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800619c <_malloc_r+0xfc>
 80060ca:	f000 f869 	bl	80061a0 <__malloc_lock>
 80060ce:	f8d8 3000 	ldr.w	r3, [r8]
 80060d2:	461c      	mov	r4, r3
 80060d4:	bb44      	cbnz	r4, 8006128 <_malloc_r+0x88>
 80060d6:	4629      	mov	r1, r5
 80060d8:	4630      	mov	r0, r6
 80060da:	f7ff ffbf 	bl	800605c <sbrk_aligned>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	4604      	mov	r4, r0
 80060e2:	d158      	bne.n	8006196 <_malloc_r+0xf6>
 80060e4:	f8d8 4000 	ldr.w	r4, [r8]
 80060e8:	4627      	mov	r7, r4
 80060ea:	2f00      	cmp	r7, #0
 80060ec:	d143      	bne.n	8006176 <_malloc_r+0xd6>
 80060ee:	2c00      	cmp	r4, #0
 80060f0:	d04b      	beq.n	800618a <_malloc_r+0xea>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	4639      	mov	r1, r7
 80060f6:	4630      	mov	r0, r6
 80060f8:	eb04 0903 	add.w	r9, r4, r3
 80060fc:	f000 fe50 	bl	8006da0 <_sbrk_r>
 8006100:	4581      	cmp	r9, r0
 8006102:	d142      	bne.n	800618a <_malloc_r+0xea>
 8006104:	6821      	ldr	r1, [r4, #0]
 8006106:	1a6d      	subs	r5, r5, r1
 8006108:	4629      	mov	r1, r5
 800610a:	4630      	mov	r0, r6
 800610c:	f7ff ffa6 	bl	800605c <sbrk_aligned>
 8006110:	3001      	adds	r0, #1
 8006112:	d03a      	beq.n	800618a <_malloc_r+0xea>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	442b      	add	r3, r5
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	f8d8 3000 	ldr.w	r3, [r8]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	bb62      	cbnz	r2, 800617c <_malloc_r+0xdc>
 8006122:	f8c8 7000 	str.w	r7, [r8]
 8006126:	e00f      	b.n	8006148 <_malloc_r+0xa8>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	1b52      	subs	r2, r2, r5
 800612c:	d420      	bmi.n	8006170 <_malloc_r+0xd0>
 800612e:	2a0b      	cmp	r2, #11
 8006130:	d917      	bls.n	8006162 <_malloc_r+0xc2>
 8006132:	1961      	adds	r1, r4, r5
 8006134:	42a3      	cmp	r3, r4
 8006136:	6025      	str	r5, [r4, #0]
 8006138:	bf18      	it	ne
 800613a:	6059      	strne	r1, [r3, #4]
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	bf08      	it	eq
 8006140:	f8c8 1000 	streq.w	r1, [r8]
 8006144:	5162      	str	r2, [r4, r5]
 8006146:	604b      	str	r3, [r1, #4]
 8006148:	4630      	mov	r0, r6
 800614a:	f000 f82f 	bl	80061ac <__malloc_unlock>
 800614e:	f104 000b 	add.w	r0, r4, #11
 8006152:	1d23      	adds	r3, r4, #4
 8006154:	f020 0007 	bic.w	r0, r0, #7
 8006158:	1ac2      	subs	r2, r0, r3
 800615a:	bf1c      	itt	ne
 800615c:	1a1b      	subne	r3, r3, r0
 800615e:	50a3      	strne	r3, [r4, r2]
 8006160:	e7af      	b.n	80060c2 <_malloc_r+0x22>
 8006162:	6862      	ldr	r2, [r4, #4]
 8006164:	42a3      	cmp	r3, r4
 8006166:	bf0c      	ite	eq
 8006168:	f8c8 2000 	streq.w	r2, [r8]
 800616c:	605a      	strne	r2, [r3, #4]
 800616e:	e7eb      	b.n	8006148 <_malloc_r+0xa8>
 8006170:	4623      	mov	r3, r4
 8006172:	6864      	ldr	r4, [r4, #4]
 8006174:	e7ae      	b.n	80060d4 <_malloc_r+0x34>
 8006176:	463c      	mov	r4, r7
 8006178:	687f      	ldr	r7, [r7, #4]
 800617a:	e7b6      	b.n	80060ea <_malloc_r+0x4a>
 800617c:	461a      	mov	r2, r3
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	42a3      	cmp	r3, r4
 8006182:	d1fb      	bne.n	800617c <_malloc_r+0xdc>
 8006184:	2300      	movs	r3, #0
 8006186:	6053      	str	r3, [r2, #4]
 8006188:	e7de      	b.n	8006148 <_malloc_r+0xa8>
 800618a:	230c      	movs	r3, #12
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	4630      	mov	r0, r6
 8006190:	f000 f80c 	bl	80061ac <__malloc_unlock>
 8006194:	e794      	b.n	80060c0 <_malloc_r+0x20>
 8006196:	6005      	str	r5, [r0, #0]
 8006198:	e7d6      	b.n	8006148 <_malloc_r+0xa8>
 800619a:	bf00      	nop
 800619c:	20000414 	.word	0x20000414

080061a0 <__malloc_lock>:
 80061a0:	4801      	ldr	r0, [pc, #4]	@ (80061a8 <__malloc_lock+0x8>)
 80061a2:	f7ff b8b8 	b.w	8005316 <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	2000040c 	.word	0x2000040c

080061ac <__malloc_unlock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	@ (80061b4 <__malloc_unlock+0x8>)
 80061ae:	f7ff b8b3 	b.w	8005318 <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	2000040c 	.word	0x2000040c

080061b8 <_Balloc>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	69c6      	ldr	r6, [r0, #28]
 80061bc:	4604      	mov	r4, r0
 80061be:	460d      	mov	r5, r1
 80061c0:	b976      	cbnz	r6, 80061e0 <_Balloc+0x28>
 80061c2:	2010      	movs	r0, #16
 80061c4:	f7ff ff42 	bl	800604c <malloc>
 80061c8:	4602      	mov	r2, r0
 80061ca:	61e0      	str	r0, [r4, #28]
 80061cc:	b920      	cbnz	r0, 80061d8 <_Balloc+0x20>
 80061ce:	4b18      	ldr	r3, [pc, #96]	@ (8006230 <_Balloc+0x78>)
 80061d0:	4818      	ldr	r0, [pc, #96]	@ (8006234 <_Balloc+0x7c>)
 80061d2:	216b      	movs	r1, #107	@ 0x6b
 80061d4:	f000 fe02 	bl	8006ddc <__assert_func>
 80061d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061dc:	6006      	str	r6, [r0, #0]
 80061de:	60c6      	str	r6, [r0, #12]
 80061e0:	69e6      	ldr	r6, [r4, #28]
 80061e2:	68f3      	ldr	r3, [r6, #12]
 80061e4:	b183      	cbz	r3, 8006208 <_Balloc+0x50>
 80061e6:	69e3      	ldr	r3, [r4, #28]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061ee:	b9b8      	cbnz	r0, 8006220 <_Balloc+0x68>
 80061f0:	2101      	movs	r1, #1
 80061f2:	fa01 f605 	lsl.w	r6, r1, r5
 80061f6:	1d72      	adds	r2, r6, #5
 80061f8:	0092      	lsls	r2, r2, #2
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 fe0c 	bl	8006e18 <_calloc_r>
 8006200:	b160      	cbz	r0, 800621c <_Balloc+0x64>
 8006202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006206:	e00e      	b.n	8006226 <_Balloc+0x6e>
 8006208:	2221      	movs	r2, #33	@ 0x21
 800620a:	2104      	movs	r1, #4
 800620c:	4620      	mov	r0, r4
 800620e:	f000 fe03 	bl	8006e18 <_calloc_r>
 8006212:	69e3      	ldr	r3, [r4, #28]
 8006214:	60f0      	str	r0, [r6, #12]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e4      	bne.n	80061e6 <_Balloc+0x2e>
 800621c:	2000      	movs	r0, #0
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	6802      	ldr	r2, [r0, #0]
 8006222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006226:	2300      	movs	r3, #0
 8006228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800622c:	e7f7      	b.n	800621e <_Balloc+0x66>
 800622e:	bf00      	nop
 8006230:	08007039 	.word	0x08007039
 8006234:	080070b9 	.word	0x080070b9

08006238 <_Bfree>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	69c6      	ldr	r6, [r0, #28]
 800623c:	4605      	mov	r5, r0
 800623e:	460c      	mov	r4, r1
 8006240:	b976      	cbnz	r6, 8006260 <_Bfree+0x28>
 8006242:	2010      	movs	r0, #16
 8006244:	f7ff ff02 	bl	800604c <malloc>
 8006248:	4602      	mov	r2, r0
 800624a:	61e8      	str	r0, [r5, #28]
 800624c:	b920      	cbnz	r0, 8006258 <_Bfree+0x20>
 800624e:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <_Bfree+0x3c>)
 8006250:	4809      	ldr	r0, [pc, #36]	@ (8006278 <_Bfree+0x40>)
 8006252:	218f      	movs	r1, #143	@ 0x8f
 8006254:	f000 fdc2 	bl	8006ddc <__assert_func>
 8006258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800625c:	6006      	str	r6, [r0, #0]
 800625e:	60c6      	str	r6, [r0, #12]
 8006260:	b13c      	cbz	r4, 8006272 <_Bfree+0x3a>
 8006262:	69eb      	ldr	r3, [r5, #28]
 8006264:	6862      	ldr	r2, [r4, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800626c:	6021      	str	r1, [r4, #0]
 800626e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	08007039 	.word	0x08007039
 8006278:	080070b9 	.word	0x080070b9

0800627c <__multadd>:
 800627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006280:	690d      	ldr	r5, [r1, #16]
 8006282:	4607      	mov	r7, r0
 8006284:	460c      	mov	r4, r1
 8006286:	461e      	mov	r6, r3
 8006288:	f101 0c14 	add.w	ip, r1, #20
 800628c:	2000      	movs	r0, #0
 800628e:	f8dc 3000 	ldr.w	r3, [ip]
 8006292:	b299      	uxth	r1, r3
 8006294:	fb02 6101 	mla	r1, r2, r1, r6
 8006298:	0c1e      	lsrs	r6, r3, #16
 800629a:	0c0b      	lsrs	r3, r1, #16
 800629c:	fb02 3306 	mla	r3, r2, r6, r3
 80062a0:	b289      	uxth	r1, r1
 80062a2:	3001      	adds	r0, #1
 80062a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062a8:	4285      	cmp	r5, r0
 80062aa:	f84c 1b04 	str.w	r1, [ip], #4
 80062ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062b2:	dcec      	bgt.n	800628e <__multadd+0x12>
 80062b4:	b30e      	cbz	r6, 80062fa <__multadd+0x7e>
 80062b6:	68a3      	ldr	r3, [r4, #8]
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	dc19      	bgt.n	80062f0 <__multadd+0x74>
 80062bc:	6861      	ldr	r1, [r4, #4]
 80062be:	4638      	mov	r0, r7
 80062c0:	3101      	adds	r1, #1
 80062c2:	f7ff ff79 	bl	80061b8 <_Balloc>
 80062c6:	4680      	mov	r8, r0
 80062c8:	b928      	cbnz	r0, 80062d6 <__multadd+0x5a>
 80062ca:	4602      	mov	r2, r0
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <__multadd+0x84>)
 80062ce:	480d      	ldr	r0, [pc, #52]	@ (8006304 <__multadd+0x88>)
 80062d0:	21ba      	movs	r1, #186	@ 0xba
 80062d2:	f000 fd83 	bl	8006ddc <__assert_func>
 80062d6:	6922      	ldr	r2, [r4, #16]
 80062d8:	3202      	adds	r2, #2
 80062da:	f104 010c 	add.w	r1, r4, #12
 80062de:	0092      	lsls	r2, r2, #2
 80062e0:	300c      	adds	r0, #12
 80062e2:	f000 fd6d 	bl	8006dc0 <memcpy>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ffa5 	bl	8006238 <_Bfree>
 80062ee:	4644      	mov	r4, r8
 80062f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062f4:	3501      	adds	r5, #1
 80062f6:	615e      	str	r6, [r3, #20]
 80062f8:	6125      	str	r5, [r4, #16]
 80062fa:	4620      	mov	r0, r4
 80062fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006300:	080070a8 	.word	0x080070a8
 8006304:	080070b9 	.word	0x080070b9

08006308 <__hi0bits>:
 8006308:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800630c:	4603      	mov	r3, r0
 800630e:	bf36      	itet	cc
 8006310:	0403      	lslcc	r3, r0, #16
 8006312:	2000      	movcs	r0, #0
 8006314:	2010      	movcc	r0, #16
 8006316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800631a:	bf3c      	itt	cc
 800631c:	021b      	lslcc	r3, r3, #8
 800631e:	3008      	addcc	r0, #8
 8006320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006324:	bf3c      	itt	cc
 8006326:	011b      	lslcc	r3, r3, #4
 8006328:	3004      	addcc	r0, #4
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632e:	bf3c      	itt	cc
 8006330:	009b      	lslcc	r3, r3, #2
 8006332:	3002      	addcc	r0, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	db05      	blt.n	8006344 <__hi0bits+0x3c>
 8006338:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800633c:	f100 0001 	add.w	r0, r0, #1
 8006340:	bf08      	it	eq
 8006342:	2020      	moveq	r0, #32
 8006344:	4770      	bx	lr

08006346 <__lo0bits>:
 8006346:	6803      	ldr	r3, [r0, #0]
 8006348:	4602      	mov	r2, r0
 800634a:	f013 0007 	ands.w	r0, r3, #7
 800634e:	d00b      	beq.n	8006368 <__lo0bits+0x22>
 8006350:	07d9      	lsls	r1, r3, #31
 8006352:	d421      	bmi.n	8006398 <__lo0bits+0x52>
 8006354:	0798      	lsls	r0, r3, #30
 8006356:	bf49      	itett	mi
 8006358:	085b      	lsrmi	r3, r3, #1
 800635a:	089b      	lsrpl	r3, r3, #2
 800635c:	2001      	movmi	r0, #1
 800635e:	6013      	strmi	r3, [r2, #0]
 8006360:	bf5c      	itt	pl
 8006362:	6013      	strpl	r3, [r2, #0]
 8006364:	2002      	movpl	r0, #2
 8006366:	4770      	bx	lr
 8006368:	b299      	uxth	r1, r3
 800636a:	b909      	cbnz	r1, 8006370 <__lo0bits+0x2a>
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	2010      	movs	r0, #16
 8006370:	b2d9      	uxtb	r1, r3
 8006372:	b909      	cbnz	r1, 8006378 <__lo0bits+0x32>
 8006374:	3008      	adds	r0, #8
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	0719      	lsls	r1, r3, #28
 800637a:	bf04      	itt	eq
 800637c:	091b      	lsreq	r3, r3, #4
 800637e:	3004      	addeq	r0, #4
 8006380:	0799      	lsls	r1, r3, #30
 8006382:	bf04      	itt	eq
 8006384:	089b      	lsreq	r3, r3, #2
 8006386:	3002      	addeq	r0, #2
 8006388:	07d9      	lsls	r1, r3, #31
 800638a:	d403      	bmi.n	8006394 <__lo0bits+0x4e>
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	f100 0001 	add.w	r0, r0, #1
 8006392:	d003      	beq.n	800639c <__lo0bits+0x56>
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	4770      	bx	lr
 8006398:	2000      	movs	r0, #0
 800639a:	4770      	bx	lr
 800639c:	2020      	movs	r0, #32
 800639e:	4770      	bx	lr

080063a0 <__i2b>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	460c      	mov	r4, r1
 80063a4:	2101      	movs	r1, #1
 80063a6:	f7ff ff07 	bl	80061b8 <_Balloc>
 80063aa:	4602      	mov	r2, r0
 80063ac:	b928      	cbnz	r0, 80063ba <__i2b+0x1a>
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <__i2b+0x24>)
 80063b0:	4805      	ldr	r0, [pc, #20]	@ (80063c8 <__i2b+0x28>)
 80063b2:	f240 1145 	movw	r1, #325	@ 0x145
 80063b6:	f000 fd11 	bl	8006ddc <__assert_func>
 80063ba:	2301      	movs	r3, #1
 80063bc:	6144      	str	r4, [r0, #20]
 80063be:	6103      	str	r3, [r0, #16]
 80063c0:	bd10      	pop	{r4, pc}
 80063c2:	bf00      	nop
 80063c4:	080070a8 	.word	0x080070a8
 80063c8:	080070b9 	.word	0x080070b9

080063cc <__multiply>:
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	4614      	mov	r4, r2
 80063d2:	690a      	ldr	r2, [r1, #16]
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	bfa8      	it	ge
 80063da:	4623      	movge	r3, r4
 80063dc:	460f      	mov	r7, r1
 80063de:	bfa4      	itt	ge
 80063e0:	460c      	movge	r4, r1
 80063e2:	461f      	movge	r7, r3
 80063e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80063e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80063ec:	68a3      	ldr	r3, [r4, #8]
 80063ee:	6861      	ldr	r1, [r4, #4]
 80063f0:	eb0a 0609 	add.w	r6, sl, r9
 80063f4:	42b3      	cmp	r3, r6
 80063f6:	b085      	sub	sp, #20
 80063f8:	bfb8      	it	lt
 80063fa:	3101      	addlt	r1, #1
 80063fc:	f7ff fedc 	bl	80061b8 <_Balloc>
 8006400:	b930      	cbnz	r0, 8006410 <__multiply+0x44>
 8006402:	4602      	mov	r2, r0
 8006404:	4b44      	ldr	r3, [pc, #272]	@ (8006518 <__multiply+0x14c>)
 8006406:	4845      	ldr	r0, [pc, #276]	@ (800651c <__multiply+0x150>)
 8006408:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800640c:	f000 fce6 	bl	8006ddc <__assert_func>
 8006410:	f100 0514 	add.w	r5, r0, #20
 8006414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006418:	462b      	mov	r3, r5
 800641a:	2200      	movs	r2, #0
 800641c:	4543      	cmp	r3, r8
 800641e:	d321      	bcc.n	8006464 <__multiply+0x98>
 8006420:	f107 0114 	add.w	r1, r7, #20
 8006424:	f104 0214 	add.w	r2, r4, #20
 8006428:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800642c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	1b13      	subs	r3, r2, r4
 8006434:	3b15      	subs	r3, #21
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	3304      	adds	r3, #4
 800643c:	f104 0715 	add.w	r7, r4, #21
 8006440:	42ba      	cmp	r2, r7
 8006442:	bf38      	it	cc
 8006444:	2304      	movcc	r3, #4
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	9b02      	ldr	r3, [sp, #8]
 800644a:	9103      	str	r1, [sp, #12]
 800644c:	428b      	cmp	r3, r1
 800644e:	d80c      	bhi.n	800646a <__multiply+0x9e>
 8006450:	2e00      	cmp	r6, #0
 8006452:	dd03      	ble.n	800645c <__multiply+0x90>
 8006454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006458:	2b00      	cmp	r3, #0
 800645a:	d05b      	beq.n	8006514 <__multiply+0x148>
 800645c:	6106      	str	r6, [r0, #16]
 800645e:	b005      	add	sp, #20
 8006460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006464:	f843 2b04 	str.w	r2, [r3], #4
 8006468:	e7d8      	b.n	800641c <__multiply+0x50>
 800646a:	f8b1 a000 	ldrh.w	sl, [r1]
 800646e:	f1ba 0f00 	cmp.w	sl, #0
 8006472:	d024      	beq.n	80064be <__multiply+0xf2>
 8006474:	f104 0e14 	add.w	lr, r4, #20
 8006478:	46a9      	mov	r9, r5
 800647a:	f04f 0c00 	mov.w	ip, #0
 800647e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006482:	f8d9 3000 	ldr.w	r3, [r9]
 8006486:	fa1f fb87 	uxth.w	fp, r7
 800648a:	b29b      	uxth	r3, r3
 800648c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006490:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006494:	f8d9 7000 	ldr.w	r7, [r9]
 8006498:	4463      	add	r3, ip
 800649a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800649e:	fb0a c70b 	mla	r7, sl, fp, ip
 80064a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064ac:	4572      	cmp	r2, lr
 80064ae:	f849 3b04 	str.w	r3, [r9], #4
 80064b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80064b6:	d8e2      	bhi.n	800647e <__multiply+0xb2>
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	f845 c003 	str.w	ip, [r5, r3]
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064c4:	3104      	adds	r1, #4
 80064c6:	f1b9 0f00 	cmp.w	r9, #0
 80064ca:	d021      	beq.n	8006510 <__multiply+0x144>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	f104 0c14 	add.w	ip, r4, #20
 80064d2:	46ae      	mov	lr, r5
 80064d4:	f04f 0a00 	mov.w	sl, #0
 80064d8:	f8bc b000 	ldrh.w	fp, [ip]
 80064dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80064e0:	fb09 770b 	mla	r7, r9, fp, r7
 80064e4:	4457      	add	r7, sl
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064ec:	f84e 3b04 	str.w	r3, [lr], #4
 80064f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064f8:	f8be 3000 	ldrh.w	r3, [lr]
 80064fc:	fb09 330a 	mla	r3, r9, sl, r3
 8006500:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006504:	4562      	cmp	r2, ip
 8006506:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800650a:	d8e5      	bhi.n	80064d8 <__multiply+0x10c>
 800650c:	9f01      	ldr	r7, [sp, #4]
 800650e:	51eb      	str	r3, [r5, r7]
 8006510:	3504      	adds	r5, #4
 8006512:	e799      	b.n	8006448 <__multiply+0x7c>
 8006514:	3e01      	subs	r6, #1
 8006516:	e79b      	b.n	8006450 <__multiply+0x84>
 8006518:	080070a8 	.word	0x080070a8
 800651c:	080070b9 	.word	0x080070b9

08006520 <__pow5mult>:
 8006520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006524:	4615      	mov	r5, r2
 8006526:	f012 0203 	ands.w	r2, r2, #3
 800652a:	4607      	mov	r7, r0
 800652c:	460e      	mov	r6, r1
 800652e:	d007      	beq.n	8006540 <__pow5mult+0x20>
 8006530:	4c25      	ldr	r4, [pc, #148]	@ (80065c8 <__pow5mult+0xa8>)
 8006532:	3a01      	subs	r2, #1
 8006534:	2300      	movs	r3, #0
 8006536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800653a:	f7ff fe9f 	bl	800627c <__multadd>
 800653e:	4606      	mov	r6, r0
 8006540:	10ad      	asrs	r5, r5, #2
 8006542:	d03d      	beq.n	80065c0 <__pow5mult+0xa0>
 8006544:	69fc      	ldr	r4, [r7, #28]
 8006546:	b97c      	cbnz	r4, 8006568 <__pow5mult+0x48>
 8006548:	2010      	movs	r0, #16
 800654a:	f7ff fd7f 	bl	800604c <malloc>
 800654e:	4602      	mov	r2, r0
 8006550:	61f8      	str	r0, [r7, #28]
 8006552:	b928      	cbnz	r0, 8006560 <__pow5mult+0x40>
 8006554:	4b1d      	ldr	r3, [pc, #116]	@ (80065cc <__pow5mult+0xac>)
 8006556:	481e      	ldr	r0, [pc, #120]	@ (80065d0 <__pow5mult+0xb0>)
 8006558:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800655c:	f000 fc3e 	bl	8006ddc <__assert_func>
 8006560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006564:	6004      	str	r4, [r0, #0]
 8006566:	60c4      	str	r4, [r0, #12]
 8006568:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800656c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006570:	b94c      	cbnz	r4, 8006586 <__pow5mult+0x66>
 8006572:	f240 2171 	movw	r1, #625	@ 0x271
 8006576:	4638      	mov	r0, r7
 8006578:	f7ff ff12 	bl	80063a0 <__i2b>
 800657c:	2300      	movs	r3, #0
 800657e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006582:	4604      	mov	r4, r0
 8006584:	6003      	str	r3, [r0, #0]
 8006586:	f04f 0900 	mov.w	r9, #0
 800658a:	07eb      	lsls	r3, r5, #31
 800658c:	d50a      	bpl.n	80065a4 <__pow5mult+0x84>
 800658e:	4631      	mov	r1, r6
 8006590:	4622      	mov	r2, r4
 8006592:	4638      	mov	r0, r7
 8006594:	f7ff ff1a 	bl	80063cc <__multiply>
 8006598:	4631      	mov	r1, r6
 800659a:	4680      	mov	r8, r0
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff fe4b 	bl	8006238 <_Bfree>
 80065a2:	4646      	mov	r6, r8
 80065a4:	106d      	asrs	r5, r5, #1
 80065a6:	d00b      	beq.n	80065c0 <__pow5mult+0xa0>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	b938      	cbnz	r0, 80065bc <__pow5mult+0x9c>
 80065ac:	4622      	mov	r2, r4
 80065ae:	4621      	mov	r1, r4
 80065b0:	4638      	mov	r0, r7
 80065b2:	f7ff ff0b 	bl	80063cc <__multiply>
 80065b6:	6020      	str	r0, [r4, #0]
 80065b8:	f8c0 9000 	str.w	r9, [r0]
 80065bc:	4604      	mov	r4, r0
 80065be:	e7e4      	b.n	800658a <__pow5mult+0x6a>
 80065c0:	4630      	mov	r0, r6
 80065c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c6:	bf00      	nop
 80065c8:	08007114 	.word	0x08007114
 80065cc:	08007039 	.word	0x08007039
 80065d0:	080070b9 	.word	0x080070b9

080065d4 <__lshift>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	460c      	mov	r4, r1
 80065da:	6849      	ldr	r1, [r1, #4]
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065e2:	68a3      	ldr	r3, [r4, #8]
 80065e4:	4607      	mov	r7, r0
 80065e6:	4691      	mov	r9, r2
 80065e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065ec:	f108 0601 	add.w	r6, r8, #1
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	db0b      	blt.n	800660c <__lshift+0x38>
 80065f4:	4638      	mov	r0, r7
 80065f6:	f7ff fddf 	bl	80061b8 <_Balloc>
 80065fa:	4605      	mov	r5, r0
 80065fc:	b948      	cbnz	r0, 8006612 <__lshift+0x3e>
 80065fe:	4602      	mov	r2, r0
 8006600:	4b28      	ldr	r3, [pc, #160]	@ (80066a4 <__lshift+0xd0>)
 8006602:	4829      	ldr	r0, [pc, #164]	@ (80066a8 <__lshift+0xd4>)
 8006604:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006608:	f000 fbe8 	bl	8006ddc <__assert_func>
 800660c:	3101      	adds	r1, #1
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	e7ee      	b.n	80065f0 <__lshift+0x1c>
 8006612:	2300      	movs	r3, #0
 8006614:	f100 0114 	add.w	r1, r0, #20
 8006618:	f100 0210 	add.w	r2, r0, #16
 800661c:	4618      	mov	r0, r3
 800661e:	4553      	cmp	r3, sl
 8006620:	db33      	blt.n	800668a <__lshift+0xb6>
 8006622:	6920      	ldr	r0, [r4, #16]
 8006624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006628:	f104 0314 	add.w	r3, r4, #20
 800662c:	f019 091f 	ands.w	r9, r9, #31
 8006630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006638:	d02b      	beq.n	8006692 <__lshift+0xbe>
 800663a:	f1c9 0e20 	rsb	lr, r9, #32
 800663e:	468a      	mov	sl, r1
 8006640:	2200      	movs	r2, #0
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	fa00 f009 	lsl.w	r0, r0, r9
 8006648:	4310      	orrs	r0, r2
 800664a:	f84a 0b04 	str.w	r0, [sl], #4
 800664e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006652:	459c      	cmp	ip, r3
 8006654:	fa22 f20e 	lsr.w	r2, r2, lr
 8006658:	d8f3      	bhi.n	8006642 <__lshift+0x6e>
 800665a:	ebac 0304 	sub.w	r3, ip, r4
 800665e:	3b15      	subs	r3, #21
 8006660:	f023 0303 	bic.w	r3, r3, #3
 8006664:	3304      	adds	r3, #4
 8006666:	f104 0015 	add.w	r0, r4, #21
 800666a:	4584      	cmp	ip, r0
 800666c:	bf38      	it	cc
 800666e:	2304      	movcc	r3, #4
 8006670:	50ca      	str	r2, [r1, r3]
 8006672:	b10a      	cbz	r2, 8006678 <__lshift+0xa4>
 8006674:	f108 0602 	add.w	r6, r8, #2
 8006678:	3e01      	subs	r6, #1
 800667a:	4638      	mov	r0, r7
 800667c:	612e      	str	r6, [r5, #16]
 800667e:	4621      	mov	r1, r4
 8006680:	f7ff fdda 	bl	8006238 <_Bfree>
 8006684:	4628      	mov	r0, r5
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668a:	f842 0f04 	str.w	r0, [r2, #4]!
 800668e:	3301      	adds	r3, #1
 8006690:	e7c5      	b.n	800661e <__lshift+0x4a>
 8006692:	3904      	subs	r1, #4
 8006694:	f853 2b04 	ldr.w	r2, [r3], #4
 8006698:	f841 2f04 	str.w	r2, [r1, #4]!
 800669c:	459c      	cmp	ip, r3
 800669e:	d8f9      	bhi.n	8006694 <__lshift+0xc0>
 80066a0:	e7ea      	b.n	8006678 <__lshift+0xa4>
 80066a2:	bf00      	nop
 80066a4:	080070a8 	.word	0x080070a8
 80066a8:	080070b9 	.word	0x080070b9

080066ac <__mcmp>:
 80066ac:	690a      	ldr	r2, [r1, #16]
 80066ae:	4603      	mov	r3, r0
 80066b0:	6900      	ldr	r0, [r0, #16]
 80066b2:	1a80      	subs	r0, r0, r2
 80066b4:	b530      	push	{r4, r5, lr}
 80066b6:	d10e      	bne.n	80066d6 <__mcmp+0x2a>
 80066b8:	3314      	adds	r3, #20
 80066ba:	3114      	adds	r1, #20
 80066bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066cc:	4295      	cmp	r5, r2
 80066ce:	d003      	beq.n	80066d8 <__mcmp+0x2c>
 80066d0:	d205      	bcs.n	80066de <__mcmp+0x32>
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	bd30      	pop	{r4, r5, pc}
 80066d8:	42a3      	cmp	r3, r4
 80066da:	d3f3      	bcc.n	80066c4 <__mcmp+0x18>
 80066dc:	e7fb      	b.n	80066d6 <__mcmp+0x2a>
 80066de:	2001      	movs	r0, #1
 80066e0:	e7f9      	b.n	80066d6 <__mcmp+0x2a>
	...

080066e4 <__mdiff>:
 80066e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	4689      	mov	r9, r1
 80066ea:	4606      	mov	r6, r0
 80066ec:	4611      	mov	r1, r2
 80066ee:	4648      	mov	r0, r9
 80066f0:	4614      	mov	r4, r2
 80066f2:	f7ff ffdb 	bl	80066ac <__mcmp>
 80066f6:	1e05      	subs	r5, r0, #0
 80066f8:	d112      	bne.n	8006720 <__mdiff+0x3c>
 80066fa:	4629      	mov	r1, r5
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7ff fd5b 	bl	80061b8 <_Balloc>
 8006702:	4602      	mov	r2, r0
 8006704:	b928      	cbnz	r0, 8006712 <__mdiff+0x2e>
 8006706:	4b3f      	ldr	r3, [pc, #252]	@ (8006804 <__mdiff+0x120>)
 8006708:	f240 2137 	movw	r1, #567	@ 0x237
 800670c:	483e      	ldr	r0, [pc, #248]	@ (8006808 <__mdiff+0x124>)
 800670e:	f000 fb65 	bl	8006ddc <__assert_func>
 8006712:	2301      	movs	r3, #1
 8006714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006718:	4610      	mov	r0, r2
 800671a:	b003      	add	sp, #12
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	bfbc      	itt	lt
 8006722:	464b      	movlt	r3, r9
 8006724:	46a1      	movlt	r9, r4
 8006726:	4630      	mov	r0, r6
 8006728:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800672c:	bfba      	itte	lt
 800672e:	461c      	movlt	r4, r3
 8006730:	2501      	movlt	r5, #1
 8006732:	2500      	movge	r5, #0
 8006734:	f7ff fd40 	bl	80061b8 <_Balloc>
 8006738:	4602      	mov	r2, r0
 800673a:	b918      	cbnz	r0, 8006744 <__mdiff+0x60>
 800673c:	4b31      	ldr	r3, [pc, #196]	@ (8006804 <__mdiff+0x120>)
 800673e:	f240 2145 	movw	r1, #581	@ 0x245
 8006742:	e7e3      	b.n	800670c <__mdiff+0x28>
 8006744:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006748:	6926      	ldr	r6, [r4, #16]
 800674a:	60c5      	str	r5, [r0, #12]
 800674c:	f109 0310 	add.w	r3, r9, #16
 8006750:	f109 0514 	add.w	r5, r9, #20
 8006754:	f104 0e14 	add.w	lr, r4, #20
 8006758:	f100 0b14 	add.w	fp, r0, #20
 800675c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006760:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	46d9      	mov	r9, fp
 8006768:	f04f 0c00 	mov.w	ip, #0
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006772:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	fa1f f38a 	uxth.w	r3, sl
 800677c:	4619      	mov	r1, r3
 800677e:	b283      	uxth	r3, r0
 8006780:	1acb      	subs	r3, r1, r3
 8006782:	0c00      	lsrs	r0, r0, #16
 8006784:	4463      	add	r3, ip
 8006786:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800678a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006794:	4576      	cmp	r6, lr
 8006796:	f849 3b04 	str.w	r3, [r9], #4
 800679a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800679e:	d8e5      	bhi.n	800676c <__mdiff+0x88>
 80067a0:	1b33      	subs	r3, r6, r4
 80067a2:	3b15      	subs	r3, #21
 80067a4:	f023 0303 	bic.w	r3, r3, #3
 80067a8:	3415      	adds	r4, #21
 80067aa:	3304      	adds	r3, #4
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	bf38      	it	cc
 80067b0:	2304      	movcc	r3, #4
 80067b2:	441d      	add	r5, r3
 80067b4:	445b      	add	r3, fp
 80067b6:	461e      	mov	r6, r3
 80067b8:	462c      	mov	r4, r5
 80067ba:	4544      	cmp	r4, r8
 80067bc:	d30e      	bcc.n	80067dc <__mdiff+0xf8>
 80067be:	f108 0103 	add.w	r1, r8, #3
 80067c2:	1b49      	subs	r1, r1, r5
 80067c4:	f021 0103 	bic.w	r1, r1, #3
 80067c8:	3d03      	subs	r5, #3
 80067ca:	45a8      	cmp	r8, r5
 80067cc:	bf38      	it	cc
 80067ce:	2100      	movcc	r1, #0
 80067d0:	440b      	add	r3, r1
 80067d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067d6:	b191      	cbz	r1, 80067fe <__mdiff+0x11a>
 80067d8:	6117      	str	r7, [r2, #16]
 80067da:	e79d      	b.n	8006718 <__mdiff+0x34>
 80067dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80067e0:	46e6      	mov	lr, ip
 80067e2:	0c08      	lsrs	r0, r1, #16
 80067e4:	fa1c fc81 	uxtah	ip, ip, r1
 80067e8:	4471      	add	r1, lr
 80067ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80067ee:	b289      	uxth	r1, r1
 80067f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067f4:	f846 1b04 	str.w	r1, [r6], #4
 80067f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067fc:	e7dd      	b.n	80067ba <__mdiff+0xd6>
 80067fe:	3f01      	subs	r7, #1
 8006800:	e7e7      	b.n	80067d2 <__mdiff+0xee>
 8006802:	bf00      	nop
 8006804:	080070a8 	.word	0x080070a8
 8006808:	080070b9 	.word	0x080070b9

0800680c <__d2b>:
 800680c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006810:	460f      	mov	r7, r1
 8006812:	2101      	movs	r1, #1
 8006814:	ec59 8b10 	vmov	r8, r9, d0
 8006818:	4616      	mov	r6, r2
 800681a:	f7ff fccd 	bl	80061b8 <_Balloc>
 800681e:	4604      	mov	r4, r0
 8006820:	b930      	cbnz	r0, 8006830 <__d2b+0x24>
 8006822:	4602      	mov	r2, r0
 8006824:	4b23      	ldr	r3, [pc, #140]	@ (80068b4 <__d2b+0xa8>)
 8006826:	4824      	ldr	r0, [pc, #144]	@ (80068b8 <__d2b+0xac>)
 8006828:	f240 310f 	movw	r1, #783	@ 0x30f
 800682c:	f000 fad6 	bl	8006ddc <__assert_func>
 8006830:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006838:	b10d      	cbz	r5, 800683e <__d2b+0x32>
 800683a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	f1b8 0300 	subs.w	r3, r8, #0
 8006844:	d023      	beq.n	800688e <__d2b+0x82>
 8006846:	4668      	mov	r0, sp
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	f7ff fd7c 	bl	8006346 <__lo0bits>
 800684e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006852:	b1d0      	cbz	r0, 800688a <__d2b+0x7e>
 8006854:	f1c0 0320 	rsb	r3, r0, #32
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	430b      	orrs	r3, r1
 800685e:	40c2      	lsrs	r2, r0
 8006860:	6163      	str	r3, [r4, #20]
 8006862:	9201      	str	r2, [sp, #4]
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	61a3      	str	r3, [r4, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2201      	moveq	r2, #1
 800686e:	2202      	movne	r2, #2
 8006870:	6122      	str	r2, [r4, #16]
 8006872:	b1a5      	cbz	r5, 800689e <__d2b+0x92>
 8006874:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006878:	4405      	add	r5, r0
 800687a:	603d      	str	r5, [r7, #0]
 800687c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006880:	6030      	str	r0, [r6, #0]
 8006882:	4620      	mov	r0, r4
 8006884:	b003      	add	sp, #12
 8006886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800688a:	6161      	str	r1, [r4, #20]
 800688c:	e7ea      	b.n	8006864 <__d2b+0x58>
 800688e:	a801      	add	r0, sp, #4
 8006890:	f7ff fd59 	bl	8006346 <__lo0bits>
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	6163      	str	r3, [r4, #20]
 8006898:	3020      	adds	r0, #32
 800689a:	2201      	movs	r2, #1
 800689c:	e7e8      	b.n	8006870 <__d2b+0x64>
 800689e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80068a6:	6038      	str	r0, [r7, #0]
 80068a8:	6918      	ldr	r0, [r3, #16]
 80068aa:	f7ff fd2d 	bl	8006308 <__hi0bits>
 80068ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068b2:	e7e5      	b.n	8006880 <__d2b+0x74>
 80068b4:	080070a8 	.word	0x080070a8
 80068b8:	080070b9 	.word	0x080070b9

080068bc <__sfputc_r>:
 80068bc:	6893      	ldr	r3, [r2, #8]
 80068be:	3b01      	subs	r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	b410      	push	{r4}
 80068c4:	6093      	str	r3, [r2, #8]
 80068c6:	da08      	bge.n	80068da <__sfputc_r+0x1e>
 80068c8:	6994      	ldr	r4, [r2, #24]
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	db01      	blt.n	80068d2 <__sfputc_r+0x16>
 80068ce:	290a      	cmp	r1, #10
 80068d0:	d103      	bne.n	80068da <__sfputc_r+0x1e>
 80068d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d6:	f7fe bc0c 	b.w	80050f2 <__swbuf_r>
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	1c58      	adds	r0, r3, #1
 80068de:	6010      	str	r0, [r2, #0]
 80068e0:	7019      	strb	r1, [r3, #0]
 80068e2:	4608      	mov	r0, r1
 80068e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <__sfputs_r>:
 80068ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ec:	4606      	mov	r6, r0
 80068ee:	460f      	mov	r7, r1
 80068f0:	4614      	mov	r4, r2
 80068f2:	18d5      	adds	r5, r2, r3
 80068f4:	42ac      	cmp	r4, r5
 80068f6:	d101      	bne.n	80068fc <__sfputs_r+0x12>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e007      	b.n	800690c <__sfputs_r+0x22>
 80068fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006900:	463a      	mov	r2, r7
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ffda 	bl	80068bc <__sfputc_r>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d1f3      	bne.n	80068f4 <__sfputs_r+0xa>
 800690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006910 <_vfiprintf_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	460d      	mov	r5, r1
 8006916:	b09d      	sub	sp, #116	@ 0x74
 8006918:	4614      	mov	r4, r2
 800691a:	4698      	mov	r8, r3
 800691c:	4606      	mov	r6, r0
 800691e:	b118      	cbz	r0, 8006928 <_vfiprintf_r+0x18>
 8006920:	6a03      	ldr	r3, [r0, #32]
 8006922:	b90b      	cbnz	r3, 8006928 <_vfiprintf_r+0x18>
 8006924:	f7fe fafc 	bl	8004f20 <__sinit>
 8006928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800692a:	07d9      	lsls	r1, r3, #31
 800692c:	d405      	bmi.n	800693a <_vfiprintf_r+0x2a>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	059a      	lsls	r2, r3, #22
 8006932:	d402      	bmi.n	800693a <_vfiprintf_r+0x2a>
 8006934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006936:	f7fe fcee 	bl	8005316 <__retarget_lock_acquire_recursive>
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	071b      	lsls	r3, r3, #28
 800693e:	d501      	bpl.n	8006944 <_vfiprintf_r+0x34>
 8006940:	692b      	ldr	r3, [r5, #16]
 8006942:	b99b      	cbnz	r3, 800696c <_vfiprintf_r+0x5c>
 8006944:	4629      	mov	r1, r5
 8006946:	4630      	mov	r0, r6
 8006948:	f7fe fc12 	bl	8005170 <__swsetup_r>
 800694c:	b170      	cbz	r0, 800696c <_vfiprintf_r+0x5c>
 800694e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006950:	07dc      	lsls	r4, r3, #31
 8006952:	d504      	bpl.n	800695e <_vfiprintf_r+0x4e>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b01d      	add	sp, #116	@ 0x74
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	0598      	lsls	r0, r3, #22
 8006962:	d4f7      	bmi.n	8006954 <_vfiprintf_r+0x44>
 8006964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006966:	f7fe fcd7 	bl	8005318 <__retarget_lock_release_recursive>
 800696a:	e7f3      	b.n	8006954 <_vfiprintf_r+0x44>
 800696c:	2300      	movs	r3, #0
 800696e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006970:	2320      	movs	r3, #32
 8006972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006976:	f8cd 800c 	str.w	r8, [sp, #12]
 800697a:	2330      	movs	r3, #48	@ 0x30
 800697c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b2c <_vfiprintf_r+0x21c>
 8006980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006984:	f04f 0901 	mov.w	r9, #1
 8006988:	4623      	mov	r3, r4
 800698a:	469a      	mov	sl, r3
 800698c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006990:	b10a      	cbz	r2, 8006996 <_vfiprintf_r+0x86>
 8006992:	2a25      	cmp	r2, #37	@ 0x25
 8006994:	d1f9      	bne.n	800698a <_vfiprintf_r+0x7a>
 8006996:	ebba 0b04 	subs.w	fp, sl, r4
 800699a:	d00b      	beq.n	80069b4 <_vfiprintf_r+0xa4>
 800699c:	465b      	mov	r3, fp
 800699e:	4622      	mov	r2, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ffa1 	bl	80068ea <__sfputs_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	f000 80a7 	beq.w	8006afc <_vfiprintf_r+0x1ec>
 80069ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069b0:	445a      	add	r2, fp
 80069b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 809f 	beq.w	8006afc <_vfiprintf_r+0x1ec>
 80069be:	2300      	movs	r3, #0
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c8:	f10a 0a01 	add.w	sl, sl, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80069d6:	4654      	mov	r4, sl
 80069d8:	2205      	movs	r2, #5
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	4853      	ldr	r0, [pc, #332]	@ (8006b2c <_vfiprintf_r+0x21c>)
 80069e0:	f7f9 fbf6 	bl	80001d0 <memchr>
 80069e4:	9a04      	ldr	r2, [sp, #16]
 80069e6:	b9d8      	cbnz	r0, 8006a20 <_vfiprintf_r+0x110>
 80069e8:	06d1      	lsls	r1, r2, #27
 80069ea:	bf44      	itt	mi
 80069ec:	2320      	movmi	r3, #32
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069f2:	0713      	lsls	r3, r2, #28
 80069f4:	bf44      	itt	mi
 80069f6:	232b      	movmi	r3, #43	@ 0x2b
 80069f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a02:	d015      	beq.n	8006a30 <_vfiprintf_r+0x120>
 8006a04:	9a07      	ldr	r2, [sp, #28]
 8006a06:	4654      	mov	r4, sl
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a14:	3b30      	subs	r3, #48	@ 0x30
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d94b      	bls.n	8006ab2 <_vfiprintf_r+0x1a2>
 8006a1a:	b1b0      	cbz	r0, 8006a4a <_vfiprintf_r+0x13a>
 8006a1c:	9207      	str	r2, [sp, #28]
 8006a1e:	e014      	b.n	8006a4a <_vfiprintf_r+0x13a>
 8006a20:	eba0 0308 	sub.w	r3, r0, r8
 8006a24:	fa09 f303 	lsl.w	r3, r9, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	46a2      	mov	sl, r4
 8006a2e:	e7d2      	b.n	80069d6 <_vfiprintf_r+0xc6>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	1d19      	adds	r1, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9103      	str	r1, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfbb      	ittet	lt
 8006a3c:	425b      	neglt	r3, r3
 8006a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a42:	9307      	strge	r3, [sp, #28]
 8006a44:	9307      	strlt	r3, [sp, #28]
 8006a46:	bfb8      	it	lt
 8006a48:	9204      	strlt	r2, [sp, #16]
 8006a4a:	7823      	ldrb	r3, [r4, #0]
 8006a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a4e:	d10a      	bne.n	8006a66 <_vfiprintf_r+0x156>
 8006a50:	7863      	ldrb	r3, [r4, #1]
 8006a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a54:	d132      	bne.n	8006abc <_vfiprintf_r+0x1ac>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	9203      	str	r2, [sp, #12]
 8006a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a62:	3402      	adds	r4, #2
 8006a64:	9305      	str	r3, [sp, #20]
 8006a66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b3c <_vfiprintf_r+0x22c>
 8006a6a:	7821      	ldrb	r1, [r4, #0]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	4650      	mov	r0, sl
 8006a70:	f7f9 fbae 	bl	80001d0 <memchr>
 8006a74:	b138      	cbz	r0, 8006a86 <_vfiprintf_r+0x176>
 8006a76:	9b04      	ldr	r3, [sp, #16]
 8006a78:	eba0 000a 	sub.w	r0, r0, sl
 8006a7c:	2240      	movs	r2, #64	@ 0x40
 8006a7e:	4082      	lsls	r2, r0
 8006a80:	4313      	orrs	r3, r2
 8006a82:	3401      	adds	r4, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8a:	4829      	ldr	r0, [pc, #164]	@ (8006b30 <_vfiprintf_r+0x220>)
 8006a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a90:	2206      	movs	r2, #6
 8006a92:	f7f9 fb9d 	bl	80001d0 <memchr>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d03f      	beq.n	8006b1a <_vfiprintf_r+0x20a>
 8006a9a:	4b26      	ldr	r3, [pc, #152]	@ (8006b34 <_vfiprintf_r+0x224>)
 8006a9c:	bb1b      	cbnz	r3, 8006ae6 <_vfiprintf_r+0x1d6>
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aac:	443b      	add	r3, r7
 8006aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab0:	e76a      	b.n	8006988 <_vfiprintf_r+0x78>
 8006ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	2001      	movs	r0, #1
 8006aba:	e7a8      	b.n	8006a0e <_vfiprintf_r+0xfe>
 8006abc:	2300      	movs	r3, #0
 8006abe:	3401      	adds	r4, #1
 8006ac0:	9305      	str	r3, [sp, #20]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0c0a 	mov.w	ip, #10
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ace:	3a30      	subs	r2, #48	@ 0x30
 8006ad0:	2a09      	cmp	r2, #9
 8006ad2:	d903      	bls.n	8006adc <_vfiprintf_r+0x1cc>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0c6      	beq.n	8006a66 <_vfiprintf_r+0x156>
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	e7c4      	b.n	8006a66 <_vfiprintf_r+0x156>
 8006adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e7f0      	b.n	8006ac8 <_vfiprintf_r+0x1b8>
 8006ae6:	ab03      	add	r3, sp, #12
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	462a      	mov	r2, r5
 8006aec:	4b12      	ldr	r3, [pc, #72]	@ (8006b38 <_vfiprintf_r+0x228>)
 8006aee:	a904      	add	r1, sp, #16
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7fd fdd1 	bl	8004698 <_printf_float>
 8006af6:	4607      	mov	r7, r0
 8006af8:	1c78      	adds	r0, r7, #1
 8006afa:	d1d6      	bne.n	8006aaa <_vfiprintf_r+0x19a>
 8006afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d405      	bmi.n	8006b0e <_vfiprintf_r+0x1fe>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_vfiprintf_r+0x1fe>
 8006b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b0a:	f7fe fc05 	bl	8005318 <__retarget_lock_release_recursive>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	065b      	lsls	r3, r3, #25
 8006b12:	f53f af1f 	bmi.w	8006954 <_vfiprintf_r+0x44>
 8006b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b18:	e71e      	b.n	8006958 <_vfiprintf_r+0x48>
 8006b1a:	ab03      	add	r3, sp, #12
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <_vfiprintf_r+0x228>)
 8006b22:	a904      	add	r1, sp, #16
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7fe f84f 	bl	8004bc8 <_printf_i>
 8006b2a:	e7e4      	b.n	8006af6 <_vfiprintf_r+0x1e6>
 8006b2c:	08007210 	.word	0x08007210
 8006b30:	0800721a 	.word	0x0800721a
 8006b34:	08004699 	.word	0x08004699
 8006b38:	080068eb 	.word	0x080068eb
 8006b3c:	08007216 	.word	0x08007216

08006b40 <__sflush_r>:
 8006b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b48:	0716      	lsls	r6, r2, #28
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	d454      	bmi.n	8006bfa <__sflush_r+0xba>
 8006b50:	684b      	ldr	r3, [r1, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dc02      	bgt.n	8006b5c <__sflush_r+0x1c>
 8006b56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dd48      	ble.n	8006bee <__sflush_r+0xae>
 8006b5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d045      	beq.n	8006bee <__sflush_r+0xae>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b68:	682f      	ldr	r7, [r5, #0]
 8006b6a:	6a21      	ldr	r1, [r4, #32]
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	d030      	beq.n	8006bd2 <__sflush_r+0x92>
 8006b70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	0759      	lsls	r1, r3, #29
 8006b76:	d505      	bpl.n	8006b84 <__sflush_r+0x44>
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b7e:	b10b      	cbz	r3, 8006b84 <__sflush_r+0x44>
 8006b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b88:	6a21      	ldr	r1, [r4, #32]
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b0      	blx	r6
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	d106      	bne.n	8006ba2 <__sflush_r+0x62>
 8006b94:	6829      	ldr	r1, [r5, #0]
 8006b96:	291d      	cmp	r1, #29
 8006b98:	d82b      	bhi.n	8006bf2 <__sflush_r+0xb2>
 8006b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006c44 <__sflush_r+0x104>)
 8006b9c:	410a      	asrs	r2, r1
 8006b9e:	07d6      	lsls	r6, r2, #31
 8006ba0:	d427      	bmi.n	8006bf2 <__sflush_r+0xb2>
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	6062      	str	r2, [r4, #4]
 8006ba6:	04d9      	lsls	r1, r3, #19
 8006ba8:	6922      	ldr	r2, [r4, #16]
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	d504      	bpl.n	8006bb8 <__sflush_r+0x78>
 8006bae:	1c42      	adds	r2, r0, #1
 8006bb0:	d101      	bne.n	8006bb6 <__sflush_r+0x76>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	b903      	cbnz	r3, 8006bb8 <__sflush_r+0x78>
 8006bb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bba:	602f      	str	r7, [r5, #0]
 8006bbc:	b1b9      	cbz	r1, 8006bee <__sflush_r+0xae>
 8006bbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d002      	beq.n	8006bcc <__sflush_r+0x8c>
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f7ff f9f6 	bl	8005fb8 <_free_r>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bd0:	e00d      	b.n	8006bee <__sflush_r+0xae>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	47b0      	blx	r6
 8006bd8:	4602      	mov	r2, r0
 8006bda:	1c50      	adds	r0, r2, #1
 8006bdc:	d1c9      	bne.n	8006b72 <__sflush_r+0x32>
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0c6      	beq.n	8006b72 <__sflush_r+0x32>
 8006be4:	2b1d      	cmp	r3, #29
 8006be6:	d001      	beq.n	8006bec <__sflush_r+0xac>
 8006be8:	2b16      	cmp	r3, #22
 8006bea:	d11e      	bne.n	8006c2a <__sflush_r+0xea>
 8006bec:	602f      	str	r7, [r5, #0]
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e022      	b.n	8006c38 <__sflush_r+0xf8>
 8006bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	e01b      	b.n	8006c32 <__sflush_r+0xf2>
 8006bfa:	690f      	ldr	r7, [r1, #16]
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	d0f6      	beq.n	8006bee <__sflush_r+0xae>
 8006c00:	0793      	lsls	r3, r2, #30
 8006c02:	680e      	ldr	r6, [r1, #0]
 8006c04:	bf08      	it	eq
 8006c06:	694b      	ldreq	r3, [r1, #20]
 8006c08:	600f      	str	r7, [r1, #0]
 8006c0a:	bf18      	it	ne
 8006c0c:	2300      	movne	r3, #0
 8006c0e:	eba6 0807 	sub.w	r8, r6, r7
 8006c12:	608b      	str	r3, [r1, #8]
 8006c14:	f1b8 0f00 	cmp.w	r8, #0
 8006c18:	dde9      	ble.n	8006bee <__sflush_r+0xae>
 8006c1a:	6a21      	ldr	r1, [r4, #32]
 8006c1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c1e:	4643      	mov	r3, r8
 8006c20:	463a      	mov	r2, r7
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b0      	blx	r6
 8006c26:	2800      	cmp	r0, #0
 8006c28:	dc08      	bgt.n	8006c3c <__sflush_r+0xfc>
 8006c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c32:	81a3      	strh	r3, [r4, #12]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3c:	4407      	add	r7, r0
 8006c3e:	eba8 0800 	sub.w	r8, r8, r0
 8006c42:	e7e7      	b.n	8006c14 <__sflush_r+0xd4>
 8006c44:	dfbffffe 	.word	0xdfbffffe

08006c48 <_fflush_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	690b      	ldr	r3, [r1, #16]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b913      	cbnz	r3, 8006c58 <_fflush_r+0x10>
 8006c52:	2500      	movs	r5, #0
 8006c54:	4628      	mov	r0, r5
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	b118      	cbz	r0, 8006c62 <_fflush_r+0x1a>
 8006c5a:	6a03      	ldr	r3, [r0, #32]
 8006c5c:	b90b      	cbnz	r3, 8006c62 <_fflush_r+0x1a>
 8006c5e:	f7fe f95f 	bl	8004f20 <__sinit>
 8006c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f3      	beq.n	8006c52 <_fflush_r+0xa>
 8006c6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c6c:	07d0      	lsls	r0, r2, #31
 8006c6e:	d404      	bmi.n	8006c7a <_fflush_r+0x32>
 8006c70:	0599      	lsls	r1, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_fflush_r+0x32>
 8006c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c76:	f7fe fb4e 	bl	8005316 <__retarget_lock_acquire_recursive>
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f7ff ff5f 	bl	8006b40 <__sflush_r>
 8006c82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c84:	07da      	lsls	r2, r3, #31
 8006c86:	4605      	mov	r5, r0
 8006c88:	d4e4      	bmi.n	8006c54 <_fflush_r+0xc>
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	059b      	lsls	r3, r3, #22
 8006c8e:	d4e1      	bmi.n	8006c54 <_fflush_r+0xc>
 8006c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c92:	f7fe fb41 	bl	8005318 <__retarget_lock_release_recursive>
 8006c96:	e7dd      	b.n	8006c54 <_fflush_r+0xc>

08006c98 <__swhatbuf_r>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	b096      	sub	sp, #88	@ 0x58
 8006ca4:	4615      	mov	r5, r2
 8006ca6:	461e      	mov	r6, r3
 8006ca8:	da0d      	bge.n	8006cc6 <__swhatbuf_r+0x2e>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cb0:	f04f 0100 	mov.w	r1, #0
 8006cb4:	bf14      	ite	ne
 8006cb6:	2340      	movne	r3, #64	@ 0x40
 8006cb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	6031      	str	r1, [r6, #0]
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	b016      	add	sp, #88	@ 0x58
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	466a      	mov	r2, sp
 8006cc8:	f000 f848 	bl	8006d5c <_fstat_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	dbec      	blt.n	8006caa <__swhatbuf_r+0x12>
 8006cd0:	9901      	ldr	r1, [sp, #4]
 8006cd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cda:	4259      	negs	r1, r3
 8006cdc:	4159      	adcs	r1, r3
 8006cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ce2:	e7eb      	b.n	8006cbc <__swhatbuf_r+0x24>

08006ce4 <__smakebuf_r>:
 8006ce4:	898b      	ldrh	r3, [r1, #12]
 8006ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce8:	079d      	lsls	r5, r3, #30
 8006cea:	4606      	mov	r6, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	d507      	bpl.n	8006d00 <__smakebuf_r+0x1c>
 8006cf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	6163      	str	r3, [r4, #20]
 8006cfc:	b003      	add	sp, #12
 8006cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d00:	ab01      	add	r3, sp, #4
 8006d02:	466a      	mov	r2, sp
 8006d04:	f7ff ffc8 	bl	8006c98 <__swhatbuf_r>
 8006d08:	9f00      	ldr	r7, [sp, #0]
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff f9c6 	bl	80060a0 <_malloc_r>
 8006d14:	b948      	cbnz	r0, 8006d2a <__smakebuf_r+0x46>
 8006d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d1a:	059a      	lsls	r2, r3, #22
 8006d1c:	d4ee      	bmi.n	8006cfc <__smakebuf_r+0x18>
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	f043 0302 	orr.w	r3, r3, #2
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	e7e2      	b.n	8006cf0 <__smakebuf_r+0xc>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	6020      	str	r0, [r4, #0]
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	9b01      	ldr	r3, [sp, #4]
 8006d36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d3a:	b15b      	cbz	r3, 8006d54 <__smakebuf_r+0x70>
 8006d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 f81d 	bl	8006d80 <_isatty_r>
 8006d46:	b128      	cbz	r0, 8006d54 <__smakebuf_r+0x70>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	431d      	orrs	r5, r3
 8006d58:	81a5      	strh	r5, [r4, #12]
 8006d5a:	e7cf      	b.n	8006cfc <__smakebuf_r+0x18>

08006d5c <_fstat_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d07      	ldr	r5, [pc, #28]	@ (8006d7c <_fstat_r+0x20>)
 8006d60:	2300      	movs	r3, #0
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	f7fa fb34 	bl	80013d6 <_fstat>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	d102      	bne.n	8006d78 <_fstat_r+0x1c>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	b103      	cbz	r3, 8006d78 <_fstat_r+0x1c>
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	bd38      	pop	{r3, r4, r5, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000408 	.word	0x20000408

08006d80 <_isatty_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d06      	ldr	r5, [pc, #24]	@ (8006d9c <_isatty_r+0x1c>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7fa fb33 	bl	80013f6 <_isatty>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_isatty_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_isatty_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000408 	.word	0x20000408

08006da0 <_sbrk_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_sbrk_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fa fb3c 	bl	8001428 <_sbrk>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_sbrk_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_sbrk_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20000408 	.word	0x20000408

08006dc0 <memcpy>:
 8006dc0:	440a      	add	r2, r1
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc8:	d100      	bne.n	8006dcc <memcpy+0xc>
 8006dca:	4770      	bx	lr
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d1f9      	bne.n	8006dce <memcpy+0xe>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <__assert_func>:
 8006ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dde:	4614      	mov	r4, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <__assert_func+0x2c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4605      	mov	r5, r0
 8006de8:	68d8      	ldr	r0, [r3, #12]
 8006dea:	b954      	cbnz	r4, 8006e02 <__assert_func+0x26>
 8006dec:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <__assert_func+0x30>)
 8006dee:	461c      	mov	r4, r3
 8006df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006df4:	9100      	str	r1, [sp, #0]
 8006df6:	462b      	mov	r3, r5
 8006df8:	4905      	ldr	r1, [pc, #20]	@ (8006e10 <__assert_func+0x34>)
 8006dfa:	f000 f841 	bl	8006e80 <fiprintf>
 8006dfe:	f000 f851 	bl	8006ea4 <abort>
 8006e02:	4b04      	ldr	r3, [pc, #16]	@ (8006e14 <__assert_func+0x38>)
 8006e04:	e7f4      	b.n	8006df0 <__assert_func+0x14>
 8006e06:	bf00      	nop
 8006e08:	20000018 	.word	0x20000018
 8006e0c:	08007266 	.word	0x08007266
 8006e10:	08007238 	.word	0x08007238
 8006e14:	0800722b 	.word	0x0800722b

08006e18 <_calloc_r>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	fba1 5402 	umull	r5, r4, r1, r2
 8006e1e:	b93c      	cbnz	r4, 8006e30 <_calloc_r+0x18>
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7ff f93d 	bl	80060a0 <_malloc_r>
 8006e26:	4606      	mov	r6, r0
 8006e28:	b928      	cbnz	r0, 8006e36 <_calloc_r+0x1e>
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	220c      	movs	r2, #12
 8006e32:	6002      	str	r2, [r0, #0]
 8006e34:	e7f9      	b.n	8006e2a <_calloc_r+0x12>
 8006e36:	462a      	mov	r2, r5
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f7fe f9ef 	bl	800521c <memset>
 8006e3e:	e7f5      	b.n	8006e2c <_calloc_r+0x14>

08006e40 <__ascii_mbtowc>:
 8006e40:	b082      	sub	sp, #8
 8006e42:	b901      	cbnz	r1, 8006e46 <__ascii_mbtowc+0x6>
 8006e44:	a901      	add	r1, sp, #4
 8006e46:	b142      	cbz	r2, 8006e5a <__ascii_mbtowc+0x1a>
 8006e48:	b14b      	cbz	r3, 8006e5e <__ascii_mbtowc+0x1e>
 8006e4a:	7813      	ldrb	r3, [r2, #0]
 8006e4c:	600b      	str	r3, [r1, #0]
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	1e10      	subs	r0, r2, #0
 8006e52:	bf18      	it	ne
 8006e54:	2001      	movne	r0, #1
 8006e56:	b002      	add	sp, #8
 8006e58:	4770      	bx	lr
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	e7fb      	b.n	8006e56 <__ascii_mbtowc+0x16>
 8006e5e:	f06f 0001 	mvn.w	r0, #1
 8006e62:	e7f8      	b.n	8006e56 <__ascii_mbtowc+0x16>

08006e64 <__ascii_wctomb>:
 8006e64:	4603      	mov	r3, r0
 8006e66:	4608      	mov	r0, r1
 8006e68:	b141      	cbz	r1, 8006e7c <__ascii_wctomb+0x18>
 8006e6a:	2aff      	cmp	r2, #255	@ 0xff
 8006e6c:	d904      	bls.n	8006e78 <__ascii_wctomb+0x14>
 8006e6e:	228a      	movs	r2, #138	@ 0x8a
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295
 8006e76:	4770      	bx	lr
 8006e78:	700a      	strb	r2, [r1, #0]
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	4770      	bx	lr
	...

08006e80 <fiprintf>:
 8006e80:	b40e      	push	{r1, r2, r3}
 8006e82:	b503      	push	{r0, r1, lr}
 8006e84:	4601      	mov	r1, r0
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	4805      	ldr	r0, [pc, #20]	@ (8006ea0 <fiprintf+0x20>)
 8006e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8e:	6800      	ldr	r0, [r0, #0]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	f7ff fd3d 	bl	8006910 <_vfiprintf_r>
 8006e96:	b002      	add	sp, #8
 8006e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e9c:	b003      	add	sp, #12
 8006e9e:	4770      	bx	lr
 8006ea0:	20000018 	.word	0x20000018

08006ea4 <abort>:
 8006ea4:	b508      	push	{r3, lr}
 8006ea6:	2006      	movs	r0, #6
 8006ea8:	f000 f82c 	bl	8006f04 <raise>
 8006eac:	2001      	movs	r0, #1
 8006eae:	f7fa fa42 	bl	8001336 <_exit>

08006eb2 <_raise_r>:
 8006eb2:	291f      	cmp	r1, #31
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	d904      	bls.n	8006ec6 <_raise_r+0x14>
 8006ebc:	2316      	movs	r3, #22
 8006ebe:	6003      	str	r3, [r0, #0]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	bd38      	pop	{r3, r4, r5, pc}
 8006ec6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ec8:	b112      	cbz	r2, 8006ed0 <_raise_r+0x1e>
 8006eca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ece:	b94b      	cbnz	r3, 8006ee4 <_raise_r+0x32>
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f831 	bl	8006f38 <_getpid_r>
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	4601      	mov	r1, r0
 8006eda:	4628      	mov	r0, r5
 8006edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee0:	f000 b818 	b.w	8006f14 <_kill_r>
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d00a      	beq.n	8006efe <_raise_r+0x4c>
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	d103      	bne.n	8006ef4 <_raise_r+0x42>
 8006eec:	2316      	movs	r3, #22
 8006eee:	6003      	str	r3, [r0, #0]
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e7e7      	b.n	8006ec4 <_raise_r+0x12>
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006efa:	4620      	mov	r0, r4
 8006efc:	4798      	blx	r3
 8006efe:	2000      	movs	r0, #0
 8006f00:	e7e0      	b.n	8006ec4 <_raise_r+0x12>
	...

08006f04 <raise>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	@ (8006f10 <raise+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f7ff bfd2 	b.w	8006eb2 <_raise_r>
 8006f0e:	bf00      	nop
 8006f10:	20000018 	.word	0x20000018

08006f14 <_kill_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	@ (8006f34 <_kill_r+0x20>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fa f9f8 	bl	8001316 <_kill>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_kill_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_kill_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20000408 	.word	0x20000408

08006f38 <_getpid_r>:
 8006f38:	f7fa b9e5 	b.w	8001306 <_getpid>

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
